{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LeakCanary \ud83d\udc24 LeakCanary is a memory leak detection library for Android. LeakCanary s knowledge of the internals of the Android Framework gives it a unique ability to narrow down the cause of each leak, helping developers dramatically reduce OutOfMemoryError crashes. Get started! Quote \u201cA small leak will sink a great ship.\u201d - Benjamin Franklin","title":"Overview"},{"location":"#leakcanary","text":"LeakCanary is a memory leak detection library for Android. LeakCanary s knowledge of the internals of the Android Framework gives it a unique ability to narrow down the cause of each leak, helping developers dramatically reduce OutOfMemoryError crashes. Get started! Quote \u201cA small leak will sink a great ship.\u201d - Benjamin Franklin","title":"LeakCanary \ud83d\udc24"},{"location":"blog-articles/","text":"Memory Leaks in Android Detect memory leaks in your instrumentation tests using LeakCanary 9 ways to avoid memory leaks in Android LeakCanary - Deobfuscation Feature Explained Your article should be here, please update this list! Any technical level welcome.","title":"Blog Articles"},{"location":"changelog/","text":"Change Log Version 2.2 (2020-02-05) We ve got some good stuff for the first release of the decade! Many thanks to @AndroidInternal , @Armaxis , @lic2050 , @mzgreen , @orenktaboola , @personshelldon , @Plastix , @pyricau for the contributions, bug reports and feature requests. ViewModel leak detection Android ViewModels are really cool! Their lifecycle is much nicer than fragments or activities, but sometimes mistakes happen. LeakCanary will now automatically detect ViewModel leaks and report any ViewModel instance retained after its onCleared() method was called. Android TV LeakCanary is finally coming to big screens near you! Best part - no additional setup is required, just enable it like you would for a mobile device . Now whenever there s a leak - you will see a helpful Toast appear with all the details. Make sure to check out our new Android TV section and chill! Java-friendly Config builders It was brought to our attention that configuring LeakCanary and AppWatcher was a miserable experience from Java code. Well, not anymore! Now you can use LeakCanary.Config.Builder and AppWatcher.Config.Builder to have idiomatic Java when updating the configurations. For example: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .computeRetainedHeapSize(false) .build(); LeakCanary.setConfig(config); If you notice any other problems when using LeakCanary from Java, please file an issue ! We take Java-interop seriously and will be happy to improve LeakCanary s API! For more details, see the 2.2 Milestone and the full diff . Version 2.1 (2019-12-31) A special New Year s Eve release \ud83e\udd73, the next release will be in another decade \ud83d\ude0e! Many thanks to @adamfit , @alexander-smityuk , @Armaxis , @BraisGabin , @devism , @ditclear , @jrodbx , @jstefanowski , @Maragues , @mzgreen , @pyricau for the contributions, bug reports and feature requests. A Gradle plugin for obfuscated apps It s fairly common for teams to have a QA build that is tested before making the release build. Usually that build will be obfuscated (via Proguard or R8), but also add LeakCanary to detect leaks during QA. This leads to obfuscated leak traces, which are hard to understand \ud83e\udd2f. Check out our new Gradle deobfuscation plugin and rejoice! UI twix tweaks In 2.0 we changed the LeakCanary UI and UX, and built a foundation on which 2.1 extends. Since 2.0, Leaks are grouped by their distinct signature. In 2.1 there s a New tag that will show until you open up a leak. There s also a Library Leak tag for leaks that are known to be caused by a bug in the Android Framework or Google libraries, and the library leak description now shows up in the UI. The type of the Java objects (class, instance, array) is now displayed in the LeakTrace, e.g. see FontsContract class and ExampleApplication instance above. The type of the GC root now shows up at the root of the leak trace. Makes sense! The leak result notification has an importance now set to MAX so that it ll show up right in your face. If you turn it off, the canary will haunt you in your dreams \ud83d\udc24\ud83d\udc7b. To save your sanity and your device battery, automatic heap dumps now won t happen more often than once per minute. The resource id name for View instances is now displayed in the leak trace. You shouldn t look at the implementation . \u251c\u2500 android.widget.TextView instance \u2502 View.mID = R.id.helper_text Documentation goodies The Fundamentals page was entirely rewritten, split into 3 pages and moved to its own tab. Please read it and provide feedback! At Square, we have been uploading leaks to Bugsnag for 3 years now, so that no leak ever gets missed. Follow this recipe ! Did you know you can run LeakCanary in a JVM ? API breaking bettering changes The APIs of the Leak and LeakTrace classes have significantly changed, e.g. all LeakTrace instances with an identical signature are grouped under the same Leak object. Despite these breaking changes, this release version is a minor update. Oh noes, what about semantic versioning \ud83d\ude31? Ask Don Quixote. You can now customize the way LeakCanary finds the leaking objects in the heap dump. For example, here s the configuration SharkCli uses to find leaks in heap dumps of apps that don t even have the LeakCanary dependency: LeakCanary . config = LeakCanary . config . copy ( leakingObjectFinder = FilteringLeakingObjectFinder ( AndroidObjectInspectors . appLeakingObjectFilters ) ) LeakCanary automatically disables itself in tests by detecting that the org.junit.Test is in the classpath. Unfortunately, some apps ship Junit in their app debug classpath (e.g. when using OkHttp MockWebServer). You can now customize which class is used to detect tests: resources string name= leak_canary_test_class_name assertk.Assert /string /resources Interactive CLI Shark CLI was rewritten on top of Clikt : $ shark-cli Usage: shark-cli [ OPTIONS ] COMMAND [ ARGS ] ... ^ ` . . = = . ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / ` ~~~--__ \\ / \\ / { \\_ __----~~ `~~-_/ - = \\/ = - \\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / . . ._. _ | ` ~~ ` | _ / | \\ / | \\ Options: -p, --process NAME Full or partial name of a process, e.g. example would match com.example.app -d, --device ID device/emulator id -m, --obfuscation-mapping PATH path to obfuscation mapping file --verbose / --no-verbose provide additional details as to what shark-cli is doing -h, --hprof FILE path to a .hprof file --help Show this message and exit Commands: interactive Explore a heap dump. analyze Analyze a heap dump. dump-process Dump the heap and pull the hprof file. strip-hprof Replace all primitive arrays from the provided heap dump with arrays of zeroes and generate a new -stripped.hprof file. There s a new interactive command which enables exploring the heap dump from the command line: $ shark-cli -h heapdump.hprof interactive Enter command [ help ] : help Available commands: analyze Analyze the heap dump. class NAME@ID Show class with a matching NAME and Object ID. instance CLASS_NAME@ID Show instance with a matching CLASS_NAME and Object ID. array CLASS_NAME@ID Show array instance with a matching CLASS_NAME and Object ID. - instance CLASS_NAME@ID Show path from GC Roots to instance. ~ instance CLASS_NAME@ID Show path from GC Roots to instance, highlighting suspect references. help Show this message. exit Exit this interactive prompt. We re currently exploring the idea of adding support for SQL queries , feedback welcome! For more details, see the 2.1 Milestone and the full diff . Version 2.0 (2019-11-27) In the past 7 months, LeakCanary went through 3 alphas and 5 betas, encompassing 23 contributors over 493 commits, 35826 insertions and 10156 deletions. Should I upgrade? YES! LeakCanary 2 is so much better, it might make you excited when you see a new memory leak. Follow the upgrade guide , you won t regret it! So, what s changed since 1.6.3? Everything. The LeakCanary codebase went from ~6000 lines of Java to ~16000 lines of Kotlin, excluding comments blanks. Isn t Kotlin supposed to drastically reduce the amount of boilerplate code? Absolutely! And it did. But then, we wrote more code. LeakCanary used to depend on HAHA , a repackaging of perflib , the heap dump parser used by Android Studio. Unfortunately perflib was slow and used too much memory, so LeakCanary now includes its own heap dump parser: Shark . The extra code comes from Shark, but also from having a lot more automated tests, and an improved UI layer. One major difference: when the app is in foreground, LeakCanary 2 will not trigger on every retained instance. Instead it will wait until the app goes in background or to reach a threashold of 5 retained instances in foreground. The analysis will then find all the leaks at once, and group identical leaks in the results UI. Please read the Fundamentals section to learn more! Random facts You can customize the Leaks launcher icon and label: learn more here . If you ` press on your main activity launcher icon, you should see a LeakCanary dynamic shortcut. You can then long press that to drop it on your home screen, and the launcher shows that it s the leaks launcher for your app. Out of the box, LeakCanary tracks all fragments flavors: AOSP, Support Library and Android X. From within the leak screen, you can share a leak to stack overflow. You can also share a heap dump, or import and analyze a heap dump from another device. You can run LeakCanary from your computer command line, on any debuggable app even if that app doesn t have LeakCanary: learn more here . The new documentation is fully searchable and includes the API documentation. Try the search bar \u2934. A large 160Mb heap dump uses 2Gb memory when opening it in Android Studio, but only 40Mb with Shark. Changes since 2.0 Beta 5 Shark CLI supports multiple connected devices #1642 Fixed missing sources from Maven Central #1643 Updated notification icon to avoid confusion with Twitter DM notifications, and added icons to bottom navigation bar #1648 Automatic leak detection for support library fragments #1611 Many thanks to @AndreasBoehm , @jrodbx , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0 Milestone and the full diff . Version 2.0 Beta 5 (2019-11-25) Major bugfix: native gc roots were accidentally ignored in Beta 4, as a result some leaks were not found #1634 Fixed Lint warning ( leak_canary_about_message string triggered multiple substitutions warning) #1630 Many thanks to @DanEdgarTarget , @msfjarvis , @PaulWoitaschek , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-5 Milestone and the full diff . Version 2.0 Beta 4 (2019-11-18) Improved string rendering for heap analysis results UX redesign #1445 Support for pattern matching of native reference leaks #1562 Added support for deobfuscation using Proguard mapping files in Shark #1499 . This isn t directly supported in LeakCanary yet. Added support for extracting metadata from the heap dump (see the recipe ) #1519 Improved auto disabling of LeakCanary in Unit and UI tests #1552 Several performance improvements when parsing heap dumps Fixed several bugs and crashes Added new known leak patterns Many thanks to @Armaxis , @BraisGabin , @bric3 , @elihart , @fernandospr , @flickator , @gabrysgab , @JorgeDLS , @lannyf77 , @msfjarvis , @mzgreen , @ozmium , @PaulWoitaschek , @pyricau , @shelpy , @vRallev , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-4 Milestone and the full diff . Version 2.0 Beta 3 (2019-08-22) Baseline memory usage for large hprofs divided by 3 and removed memory spikes #1543 Fixed crash when LeakCanary is initialized from another process #1529 Java local references are deprioritized to look for longer alternative paths #1525 Fixed JavaLocalPattern not matching on Lollipop #1524 Many thanks to @Armaxis , @elihart , @emartynov , @hmcgreevy-instil , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-3 Milestone and the full diff . Version 2.0 Beta 2 (2019-08-02) Fixed Leak analysis failed: Object id not found in heap dump. #1516 10x speed increase of hprof indexing on large heap dumps #1520 Many thanks to @kolphi , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-2 Milestone and the full diff . Version 2.0 Beta 1 (2019-07-30) New standalone library! Shark is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a CLI : you can now run shark-cli analyze-process com.example.myapp from your computer. New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select Heap Explorer . This is still experimental and not very user friendly, contributions welcome! Large API rewrite to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became AppWatcher , RefWatcher became ObjectWatcher , AndroidExcludedRefs became AndroidReferenceMatchers , AnalysisResultListener became OnHeapAnalyzedListener , AndroidLeakTraceInspectors became AndroidObjectInspectors . The entire API surface is now documented and the documentation is available on this website: see the LeakCanary API tab at the top. Removed the dependency on Android X . No more configuration issues! #1462 Added Proguard rules for LeakCanary and ObjectWatcher. #1500 Display LeakCanary version in the About screen. #1448 Bug fixes, new reference matchers and object inspectors Many thanks to @arctouch-carlosottoboni , @jemaystermind , @kushagrakumar27 , @pyricau , @snkashis for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-1 Milestone and the full diff . Version 2.0 Alpha 3 (2019-07-04) #1401 LeakCanary can now import all hprof files created from prior LeakCanary versions. #1414 New API: RefWatcher.retainedInstances which returns the instances that are currently considered retained. #1419 New APIs: LeakCanary.Config.maxStoredHeapDumps (default 7) and LeakCanary.Config.requestWriteExternalStoragePermission (default false). LeakCanary won t ask for the external storage permission anymore by default. #1338 API change: LeakCanary.Config.exclusionsFactory replaced with LeakCanary.Config.knownReferences (simpler use), LeakCanary.Config.leakInspectors and LeakCanary.Config.labelers merged into LeakCanary.Config.leakTraceInspectors which provides access to the entire leak trace as well as a new graph oriented API that replaces the low level hprof parser API. #1382 LeakCanary now disables automatic heap dumping when running in AndroidX UI tests. #1424 API rename: RefWatcher.hasRetainedReferences = RefWatcher.hasRetainedInstances , RefWatcher.retainedReferenceCount = RefWatcher.retainedInstanceCount , RefWatcher.hasWatchedReferences = RefWatcher.hasWatchedInstances , RefWatcher.removeKeysRetainedBeforeHeapDump = RefWatcher.removeInstancesRetainedBeforeHeapDump , RefWatcher.clearWatchedReferences = RefWatcher.clearWatchedInstances . #1432 #1438 #1440 New won t fix leaks and leak trace inspectors #1374 #1364 #1366 #1417 #1399 #1416 #1407 #1427 #1385 Bug and crash fixes Many thanks to @1step2hell , @afollestad , @ansman , @bjdodson , @BraisGabin , @EBfVince , @jaredsburrows , @pforhan , @pyricau , @tellypresence , @wiyarmir for the contributions, bug reports and feature requests. For more details, see the 2.0-alpha-3 Milestone and the full diff . Version 2.0 Alpha 2 (2019-05-21) #1040 Import and analyze hprof files from other devices #1344 Computing retained size #1325 New notification showing current count of retained instances #1079 Excluded leaks have been renamed to Won t fix leaks to clarify meaning. #1328 New leaks are called out in the UI. #1327 LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds. #1173 Experimental: now reporting leaks that only go through weak references (previously reported as no path to instance ) #1339 Readded support for Thread name based exclusions #1312 Fixed bug causing LeakCanary to stop detecting leaks after the app is killed. #1310 #1313 #1314 #1340 #1337 Many API changes #1296 #1293 #1306 #1336 Fixed several crashes. Many thanks to @forrestbice , @Foso , @Goddchen , @marcosholgado , @orionlee , @pyricau , @satoshun , @ZacSweers for the contributions! For more details, see the 2.0-alpha-2 Milestone and the full diff . Version 2.0 Alpha 1 (2019-04-23) New logo , thanks @flickator ! Entirely rewritten to 100% Kotlin Multiple leaks detected in one analysis The heap is dumped when the app goes in the background, or when a minimum of 5 leaks is reached in the foreground. Leak grouping Leaks that share similar causes are grouped in the UI. New screens to see the list of groups and each group. Improved leaktrace strings to highlight leak causes. Leaks can be shared to Stack Overflow New library: LeakSentry . Detects when objects are leaking and triggers LeakCanary Can be used independently in production, for instance to report the number of leaking instances on an OutOfMemoryError crash. New heap parser Uses 90% less memory and 6 times faster than the prior heap parser. Runs in the same process as the app on a low priority thread. No more dependency on Perflib and TroveJ. New dependency on Okio. The old parser is still available as leakcanary-android-perflib but will be removed after alpha. Labelers can add any string content to leak elements 0 code setup, just add the one debug dependency. Simpler configuration options Updated from support library to Android X Many thanks to @BraisGabin , @colinmarsch , @jrodbx , @flickator , @JakeWharton , @pyricau , @WhatsEmo for the contributions! For more details, see the 2.0-alpha-1 Milestone and the full diff . Version 1.6.3 (2019-01-10) #1163 Fixed leaks being incorrectly classified as no leak due to missed GC Roots. #1153 LeakCanary.isInAnalyzerProcess now correctly returns true in the analyzer process prior to any first leak (could be triggered by starting the leak result activity). #1158 Stopped enabling DisplayLeakActivity when not using DisplayLeakService. #1135 Fixed IndexOutOfBoundsException for leak traces of size 1. #1163 Keep no leak heap dumps. Many thanks to @KMaragh , @pyricau , @SebRut for the code contributions! For more details, see the 1.6.3 Milestone and the full diff . Version 1.6.2 (2018-10-16) #1067 Fixed TransactionTooLargeException crash (leak analysis would never complete). #1061 Detection of Fragment view leaks after Fragment#onDestroyView(). #1076 Added the FOREGROUND_SERVICE permission for Android P. #1062 The LeakCanary toast now always shows correctly. It doesn t show if there is no activity in foreground. #1115 Reenabled the DisplayLeakActivity icon on fresh installs. #1100 Added nullability annotations to improve Kotlin support. Updates to excluded leaks ( commits ). Updates to reachability inspectors ( commits ). Many thanks to @fractalwrench , @ZacSweers , @Goddchen , @igokoro , @IlyaGulya , @JakeWharton , @javmarina , @jokermonn , @jrodbx , @Parseus , @pyricau , @scottkennedy for the code contributions! Public API changes Subclasses of AbstractAnalysisResultService should now override onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) instead of onHeapAnalyzed(@NonNull HeapDump heapDump, @NonNull AnalysisResult result) For more details, see the 1.6.2 Milestone and the full diff . Version 1.6.1 (2018-06-21) #727 Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak. #1011 We noticed that computing the retained heap size could take a long time, so it s now optional and off by default. #633 Support for detecting leaks in instrumentation tests ( see the wiki ). #985 Ability to convert leak traces into stack traces for easy remote reporting ( see the wiki ). #983 Support for watching destroyed Fragments. #846 LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+. The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found. #775 Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library. #930 DisplayLeakActivity has a responsive icon. #685 Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors). #999 Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1). Several bug and crash fixes. Many thanks to @AdityaAnand1 , @alhah , @christxph , @csoon03 , @daqi , @JakeWharton , @jankovd , @jrodbx , @kurtisnelson , @NightlyNexus , @pyricau , @SalvatoreT , @shmuelr , @tokou , @xueqiushi for the code contributions! Note: we made a 1.6 release but quickly followed up with 1.6.1 due to #1058 . Public API changes The installed ref watcher singleton is now available via LeakCanary.installedRefWatcher() AnalysisResult.leakTraceAsFakeException() returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics. New InstrumentationLeakDetector and FailTestOnLeakRunListener APIs for detecting leaks in instrumentation tests. New Reachability.Inspector and RefWatcherBuilder.stethoscopeClasses() API to establish reachability and help identify leak causes. Watching activities can be disabled with AndroidRefWatcherBuilder.watchActivities(false) , watching fragments can be disabled with AndroidRefWatcherBuilder.watchFragments(false) LeakCanary.setDisplayLeakActivityDirectoryProvider() is deprecated and replaced with LeakCanary.setLeakDirectoryProvider() New RefWatcherBuilder.computeRetainedHeapSize() API to enable the computing of the retained heap size (off by default). For more details, see the 1.6.1 Milestone and the full diff . Version 1.5.4 (2017-09-22) Restore Java 7 compatibility in leakcanary-watcher Version 1.5.3 (2017-09-17) Fix broken 1.5.2 build Convert leakcanary-watcher from Android library to Java library Disable finish animations in RequestStoragePermissionActivity Corrected README sample for Robolectric tests For more details, see the full diff . Version 1.5.2 (2017-08-09) New excluded leaks Move Leakcanary UI into leak analyzer process Ignore computing retained sizes for bitmaps on O+ Add notification channel for persistent messages on O+ Exclude permission activity from recents menu Updated README and sample for handling Robolectric tests For more details, see the full diff . Version 1.5.1 (2017-04-25) New excluded leaks Fix java.util.MissingFormatArgumentException in DisplayLeakService Separate task affinities for different apps Bump minSdk to 14 Fix HahaHelper for O Preview For more details, see the full diff . Version 1.5 (2016-09-28) New excluded leaks Added LeakCanary.isInAnalyzerProcess() to the no-op jar Fixed several file access issues: No more cleanup on startup, we rotate the heap dump files on every new heap dump. LeakCanary now falls back to the app directory until it can write to the external storage. Leak notifications now each use a distinct notification instead of erasing each other. If LeakCanary can t perform a heap dump for any reason (e.g. analysis in progress, debugger attached), it retries later with an exponential backoff. Added confirmation dialog when user deletes all leaks. Replace the two LeakCanary configuration methods with a builder that provides more flexibility, see LeakCanary.refWatcher() . For more details, see the full diff . Public API changes New HeapAnalyzer.findTrackedReferences() method for headless analysis when you have no context on what leaked. Added LeakCanary.isInAnalyzerProcess() to the no-op jar Added LeakCanary.refWatcher() which returns an AndroidRefWatcherBuilder that extends RefWatcherBuilder and lets you fully customize the RefWatcher instance. Removed LeakCanary.install(Application, Class) and LeakCanary.androidWatcher(Context, HeapDump.Listener, ExcludedRefs) . Removed R.integer.leak_canary_max_stored_leaks and R.integer.leak_canary_watch_delay_millis , those can now be set via LeakCanary.refWatcher() . Updated the LeakDirectoryProvider API to centralize all file related responsibilities. RefWatcher is now constructed with a WatchExecutor which executes a Retryable , instead of an Executor that executes a Runnable . HeapDumper.NO_DUMP was renamed HeapDumper.RETRY_LATER Version 1.4 (2016-09-11) Fix false negative where GC root is of type android.os.Binder #482 Update HAHA to 2.0.3; clear compiler warnings #563 Correct some mistakes in German translation #516 Don t loop when storage permission denied #422 Remove old references to __ prefixed resources #477 Fix permission crash for DisplayLeakActivity on M #382 Fix NPE when thread name not found in heap dump #417 Add version info to stacktrace #473 Version 1.4-beta2 (2016-03-23) Add reason for ignoring to analysis result #365 . Lower memory usage when parsing heap dumps on M #223 . Fix NPE in LeakCanaryInternals.isInServiceProcess() #449 . New ignored Android SDK leaks #297 , #322 . Use leakcanary-android-no-op in test builds #143 . Fixes to allow LeakCanary to work with ProGuard #398 . Optimize png assets #406 . Fix delete button not working on error views #408 . Add German translation #437 . Version 1.4-beta1 (2016-01-08) Switched to HAHA 2.0.2 with uses Perflib instead of MAT under the hood #219 . This fixes crashes and improves speed a lot. We can now parse Android M heap dumps #267 , although there are still memory issues (see #223 ). Excluded leaks are now reported as well and available in the display leak activity. Added ProGuard configuration for #132 . Many new ignored Android SDK leaks. Added excluded leaks to text report #119 . Added LeakCanary SHA to text report #120 . Added CanaryLog API to replace the logger: #201 . Renamed all resources to begin with leak_canary_ instead of __leak_canary #161 No crash when heap dump fails #226 . Add retained size to leak reports #162 . Public API changes AnalysisResult.failure is now a Throwable instead of an Exception . Main goal is to catch and correctly report OOMs while parsing. Added ARRAY_ENTRY to LeakTraceElement.Type for references through array entries. Renamed ExcludedRefs fields. Each ExcludedRef entry can now be ignored entirely or kept only if no other path . Added support for ignoring all fields (static and non static) for a given class. Version 1.3.1 (2015-05-16) Heap dumps and analysis results are now saved on the sd card: #21 . ExcludedRef and AndroidExcludedRefs are customizable: #12 #73 . 7 new ignored Android SDK leaks: #1 #4 #32 #89 #82 #97 . Fixed 3 crashes in LeakCanary: #37 #46 #66 . Fixed StrictMode thread policy violations: #15 . Updated minSdkVersion from 9 to 8 : #57 . Added LeakCanary version name to LeakCanary.leakInfo() : #49 . leakcanary-android-no-op is lighter, it does not depend on leakcanary-watcher anymore, only 2 classes now: #74 . Adding field state details to the text leak trace. A Toast is displayed while the heap dump is in progress to warn that the UI will freeze: #20 . You can customize the toast by providing your own layout named __leak_canary_heap_dump_toast.xml (e.g. you could make it an empty layout). If the analysis fails, the result and heap dump are kept so that it can be reported to LeakCanary: #102 . Update to HAHA 1.3 to fix a 2 crashes #3 46 Public API changes When upgrading from 1.3 to 1.3.1, previously saved heap dumps will not be readable any more, but they won t be removed from the app directory. You should probably uninstall your app. Added android.permission.WRITE_EXTERNAL_STORAGE to leakcanary-android artifact. LeakCanary.androidWatcher() parameter types have changed (+ExcludedRefs). LeakCanary.leakInfo() parameter types have changed (+boolean) ExcludedRef is now serializable and immutable, instances can be created using ExcludedRef.Builder . ExcludedRef is available in HeapDump AndroidExcludedRefs is an enum, you can now pick the leaks you want to ignore in AndroidExcludedRefs by creating an EnumSet and calling AndroidExcludedRefs.createBuilder() . AndroidExcludedRefs.createAppDefaults() AndroidExcludedRefs.createAndroidDefaults() return a ExcludedRef.Builder . ExcludedRef moved from leakcanary-analyzer to leakcanary-watcher Version 1.3 (2015-05-08) Initial release. Dependencies","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-22-2020-02-05","text":"We ve got some good stuff for the first release of the decade! Many thanks to @AndroidInternal , @Armaxis , @lic2050 , @mzgreen , @orenktaboola , @personshelldon , @Plastix , @pyricau for the contributions, bug reports and feature requests.","title":"Version 2.2 (2020-02-05)"},{"location":"changelog/#viewmodel-leak-detection","text":"Android ViewModels are really cool! Their lifecycle is much nicer than fragments or activities, but sometimes mistakes happen. LeakCanary will now automatically detect ViewModel leaks and report any ViewModel instance retained after its onCleared() method was called.","title":"ViewModel leak detection"},{"location":"changelog/#android-tv","text":"LeakCanary is finally coming to big screens near you! Best part - no additional setup is required, just enable it like you would for a mobile device . Now whenever there s a leak - you will see a helpful Toast appear with all the details. Make sure to check out our new Android TV section and chill!","title":"Android TV"},{"location":"changelog/#java-friendly-config-builders","text":"It was brought to our attention that configuring LeakCanary and AppWatcher was a miserable experience from Java code. Well, not anymore! Now you can use LeakCanary.Config.Builder and AppWatcher.Config.Builder to have idiomatic Java when updating the configurations. For example: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .computeRetainedHeapSize(false) .build(); LeakCanary.setConfig(config); If you notice any other problems when using LeakCanary from Java, please file an issue ! We take Java-interop seriously and will be happy to improve LeakCanary s API! For more details, see the 2.2 Milestone and the full diff .","title":"Java-friendly Config builders"},{"location":"changelog/#version-21-2019-12-31","text":"A special New Year s Eve release \ud83e\udd73, the next release will be in another decade \ud83d\ude0e! Many thanks to @adamfit , @alexander-smityuk , @Armaxis , @BraisGabin , @devism , @ditclear , @jrodbx , @jstefanowski , @Maragues , @mzgreen , @pyricau for the contributions, bug reports and feature requests.","title":"Version 2.1 (2019-12-31)"},{"location":"changelog/#a-gradle-plugin-for-obfuscated-apps","text":"It s fairly common for teams to have a QA build that is tested before making the release build. Usually that build will be obfuscated (via Proguard or R8), but also add LeakCanary to detect leaks during QA. This leads to obfuscated leak traces, which are hard to understand \ud83e\udd2f. Check out our new Gradle deobfuscation plugin and rejoice!","title":"A Gradle plugin for obfuscated apps"},{"location":"changelog/#ui-twix-tweaks","text":"In 2.0 we changed the LeakCanary UI and UX, and built a foundation on which 2.1 extends. Since 2.0, Leaks are grouped by their distinct signature. In 2.1 there s a New tag that will show until you open up a leak. There s also a Library Leak tag for leaks that are known to be caused by a bug in the Android Framework or Google libraries, and the library leak description now shows up in the UI. The type of the Java objects (class, instance, array) is now displayed in the LeakTrace, e.g. see FontsContract class and ExampleApplication instance above. The type of the GC root now shows up at the root of the leak trace. Makes sense! The leak result notification has an importance now set to MAX so that it ll show up right in your face. If you turn it off, the canary will haunt you in your dreams \ud83d\udc24\ud83d\udc7b. To save your sanity and your device battery, automatic heap dumps now won t happen more often than once per minute. The resource id name for View instances is now displayed in the leak trace. You shouldn t look at the implementation . \u251c\u2500 android.widget.TextView instance \u2502 View.mID = R.id.helper_text","title":"UI twix tweaks"},{"location":"changelog/#documentation-goodies","text":"The Fundamentals page was entirely rewritten, split into 3 pages and moved to its own tab. Please read it and provide feedback! At Square, we have been uploading leaks to Bugsnag for 3 years now, so that no leak ever gets missed. Follow this recipe ! Did you know you can run LeakCanary in a JVM ?","title":"Documentation goodies"},{"location":"changelog/#api-breaking-bettering-changes","text":"The APIs of the Leak and LeakTrace classes have significantly changed, e.g. all LeakTrace instances with an identical signature are grouped under the same Leak object. Despite these breaking changes, this release version is a minor update. Oh noes, what about semantic versioning \ud83d\ude31? Ask Don Quixote. You can now customize the way LeakCanary finds the leaking objects in the heap dump. For example, here s the configuration SharkCli uses to find leaks in heap dumps of apps that don t even have the LeakCanary dependency: LeakCanary . config = LeakCanary . config . copy ( leakingObjectFinder = FilteringLeakingObjectFinder ( AndroidObjectInspectors . appLeakingObjectFilters ) ) LeakCanary automatically disables itself in tests by detecting that the org.junit.Test is in the classpath. Unfortunately, some apps ship Junit in their app debug classpath (e.g. when using OkHttp MockWebServer). You can now customize which class is used to detect tests: resources string name= leak_canary_test_class_name assertk.Assert /string /resources","title":"API breaking bettering changes"},{"location":"changelog/#interactive-cli","text":"Shark CLI was rewritten on top of Clikt : $ shark-cli Usage: shark-cli [ OPTIONS ] COMMAND [ ARGS ] ... ^ ` . . = = . ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / ` ~~~--__ \\ / \\ / { \\_ __----~~ `~~-_/ - = \\/ = - \\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / . . ._. _ | ` ~~ ` | _ / | \\ / | \\ Options: -p, --process NAME Full or partial name of a process, e.g. example would match com.example.app -d, --device ID device/emulator id -m, --obfuscation-mapping PATH path to obfuscation mapping file --verbose / --no-verbose provide additional details as to what shark-cli is doing -h, --hprof FILE path to a .hprof file --help Show this message and exit Commands: interactive Explore a heap dump. analyze Analyze a heap dump. dump-process Dump the heap and pull the hprof file. strip-hprof Replace all primitive arrays from the provided heap dump with arrays of zeroes and generate a new -stripped.hprof file. There s a new interactive command which enables exploring the heap dump from the command line: $ shark-cli -h heapdump.hprof interactive Enter command [ help ] : help Available commands: analyze Analyze the heap dump. class NAME@ID Show class with a matching NAME and Object ID. instance CLASS_NAME@ID Show instance with a matching CLASS_NAME and Object ID. array CLASS_NAME@ID Show array instance with a matching CLASS_NAME and Object ID. - instance CLASS_NAME@ID Show path from GC Roots to instance. ~ instance CLASS_NAME@ID Show path from GC Roots to instance, highlighting suspect references. help Show this message. exit Exit this interactive prompt. We re currently exploring the idea of adding support for SQL queries , feedback welcome! For more details, see the 2.1 Milestone and the full diff .","title":"Interactive CLI"},{"location":"changelog/#version-20-2019-11-27","text":"In the past 7 months, LeakCanary went through 3 alphas and 5 betas, encompassing 23 contributors over 493 commits, 35826 insertions and 10156 deletions.","title":"Version 2.0 (2019-11-27)"},{"location":"changelog/#should-i-upgrade","text":"YES! LeakCanary 2 is so much better, it might make you excited when you see a new memory leak. Follow the upgrade guide , you won t regret it!","title":"Should I upgrade?"},{"location":"changelog/#so-whats-changed-since-163","text":"Everything. The LeakCanary codebase went from ~6000 lines of Java to ~16000 lines of Kotlin, excluding comments blanks. Isn t Kotlin supposed to drastically reduce the amount of boilerplate code? Absolutely! And it did. But then, we wrote more code. LeakCanary used to depend on HAHA , a repackaging of perflib , the heap dump parser used by Android Studio. Unfortunately perflib was slow and used too much memory, so LeakCanary now includes its own heap dump parser: Shark . The extra code comes from Shark, but also from having a lot more automated tests, and an improved UI layer. One major difference: when the app is in foreground, LeakCanary 2 will not trigger on every retained instance. Instead it will wait until the app goes in background or to reach a threashold of 5 retained instances in foreground. The analysis will then find all the leaks at once, and group identical leaks in the results UI. Please read the Fundamentals section to learn more!","title":"So, what's changed since 1.6.3?"},{"location":"changelog/#random-facts","text":"You can customize the Leaks launcher icon and label: learn more here . If you ` press on your main activity launcher icon, you should see a LeakCanary dynamic shortcut. You can then long press that to drop it on your home screen, and the launcher shows that it s the leaks launcher for your app. Out of the box, LeakCanary tracks all fragments flavors: AOSP, Support Library and Android X. From within the leak screen, you can share a leak to stack overflow. You can also share a heap dump, or import and analyze a heap dump from another device. You can run LeakCanary from your computer command line, on any debuggable app even if that app doesn t have LeakCanary: learn more here . The new documentation is fully searchable and includes the API documentation. Try the search bar \u2934. A large 160Mb heap dump uses 2Gb memory when opening it in Android Studio, but only 40Mb with Shark.","title":"Random facts"},{"location":"changelog/#changes-since-20-beta-5","text":"Shark CLI supports multiple connected devices #1642 Fixed missing sources from Maven Central #1643 Updated notification icon to avoid confusion with Twitter DM notifications, and added icons to bottom navigation bar #1648 Automatic leak detection for support library fragments #1611 Many thanks to @AndreasBoehm , @jrodbx , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0 Milestone and the full diff .","title":"Changes since 2.0 Beta 5"},{"location":"changelog/#version-20-beta-5-2019-11-25","text":"Major bugfix: native gc roots were accidentally ignored in Beta 4, as a result some leaks were not found #1634 Fixed Lint warning ( leak_canary_about_message string triggered multiple substitutions warning) #1630 Many thanks to @DanEdgarTarget , @msfjarvis , @PaulWoitaschek , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-5 Milestone and the full diff .","title":"Version 2.0 Beta 5 (2019-11-25)"},{"location":"changelog/#version-20-beta-4-2019-11-18","text":"Improved string rendering for heap analysis results UX redesign #1445 Support for pattern matching of native reference leaks #1562 Added support for deobfuscation using Proguard mapping files in Shark #1499 . This isn t directly supported in LeakCanary yet. Added support for extracting metadata from the heap dump (see the recipe ) #1519 Improved auto disabling of LeakCanary in Unit and UI tests #1552 Several performance improvements when parsing heap dumps Fixed several bugs and crashes Added new known leak patterns Many thanks to @Armaxis , @BraisGabin , @bric3 , @elihart , @fernandospr , @flickator , @gabrysgab , @JorgeDLS , @lannyf77 , @msfjarvis , @mzgreen , @ozmium , @PaulWoitaschek , @pyricau , @shelpy , @vRallev , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-4 Milestone and the full diff .","title":"Version 2.0 Beta 4 (2019-11-18)"},{"location":"changelog/#version-20-beta-3-2019-08-22","text":"Baseline memory usage for large hprofs divided by 3 and removed memory spikes #1543 Fixed crash when LeakCanary is initialized from another process #1529 Java local references are deprioritized to look for longer alternative paths #1525 Fixed JavaLocalPattern not matching on Lollipop #1524 Many thanks to @Armaxis , @elihart , @emartynov , @hmcgreevy-instil , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-3 Milestone and the full diff .","title":"Version 2.0 Beta 3 (2019-08-22)"},{"location":"changelog/#version-20-beta-2-2019-08-02","text":"Fixed Leak analysis failed: Object id not found in heap dump. #1516 10x speed increase of hprof indexing on large heap dumps #1520 Many thanks to @kolphi , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-2 Milestone and the full diff .","title":"Version 2.0 Beta 2 (2019-08-02)"},{"location":"changelog/#version-20-beta-1-2019-07-30","text":"New standalone library! Shark is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a CLI : you can now run shark-cli analyze-process com.example.myapp from your computer. New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select Heap Explorer . This is still experimental and not very user friendly, contributions welcome! Large API rewrite to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became AppWatcher , RefWatcher became ObjectWatcher , AndroidExcludedRefs became AndroidReferenceMatchers , AnalysisResultListener became OnHeapAnalyzedListener , AndroidLeakTraceInspectors became AndroidObjectInspectors . The entire API surface is now documented and the documentation is available on this website: see the LeakCanary API tab at the top. Removed the dependency on Android X . No more configuration issues! #1462 Added Proguard rules for LeakCanary and ObjectWatcher. #1500 Display LeakCanary version in the About screen. #1448 Bug fixes, new reference matchers and object inspectors Many thanks to @arctouch-carlosottoboni , @jemaystermind , @kushagrakumar27 , @pyricau , @snkashis for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-1 Milestone and the full diff .","title":"Version 2.0 Beta 1 (2019-07-30)"},{"location":"changelog/#version-20-alpha-3-2019-07-04","text":"#1401 LeakCanary can now import all hprof files created from prior LeakCanary versions. #1414 New API: RefWatcher.retainedInstances which returns the instances that are currently considered retained. #1419 New APIs: LeakCanary.Config.maxStoredHeapDumps (default 7) and LeakCanary.Config.requestWriteExternalStoragePermission (default false). LeakCanary won t ask for the external storage permission anymore by default. #1338 API change: LeakCanary.Config.exclusionsFactory replaced with LeakCanary.Config.knownReferences (simpler use), LeakCanary.Config.leakInspectors and LeakCanary.Config.labelers merged into LeakCanary.Config.leakTraceInspectors which provides access to the entire leak trace as well as a new graph oriented API that replaces the low level hprof parser API. #1382 LeakCanary now disables automatic heap dumping when running in AndroidX UI tests. #1424 API rename: RefWatcher.hasRetainedReferences = RefWatcher.hasRetainedInstances , RefWatcher.retainedReferenceCount = RefWatcher.retainedInstanceCount , RefWatcher.hasWatchedReferences = RefWatcher.hasWatchedInstances , RefWatcher.removeKeysRetainedBeforeHeapDump = RefWatcher.removeInstancesRetainedBeforeHeapDump , RefWatcher.clearWatchedReferences = RefWatcher.clearWatchedInstances . #1432 #1438 #1440 New won t fix leaks and leak trace inspectors #1374 #1364 #1366 #1417 #1399 #1416 #1407 #1427 #1385 Bug and crash fixes Many thanks to @1step2hell , @afollestad , @ansman , @bjdodson , @BraisGabin , @EBfVince , @jaredsburrows , @pforhan , @pyricau , @tellypresence , @wiyarmir for the contributions, bug reports and feature requests. For more details, see the 2.0-alpha-3 Milestone and the full diff .","title":"Version 2.0 Alpha 3 (2019-07-04)"},{"location":"changelog/#version-20-alpha-2-2019-05-21","text":"#1040 Import and analyze hprof files from other devices #1344 Computing retained size #1325 New notification showing current count of retained instances #1079 Excluded leaks have been renamed to Won t fix leaks to clarify meaning. #1328 New leaks are called out in the UI. #1327 LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds. #1173 Experimental: now reporting leaks that only go through weak references (previously reported as no path to instance ) #1339 Readded support for Thread name based exclusions #1312 Fixed bug causing LeakCanary to stop detecting leaks after the app is killed. #1310 #1313 #1314 #1340 #1337 Many API changes #1296 #1293 #1306 #1336 Fixed several crashes. Many thanks to @forrestbice , @Foso , @Goddchen , @marcosholgado , @orionlee , @pyricau , @satoshun , @ZacSweers for the contributions! For more details, see the 2.0-alpha-2 Milestone and the full diff .","title":"Version 2.0 Alpha 2 (2019-05-21)"},{"location":"changelog/#version-20-alpha-1-2019-04-23","text":"New logo , thanks @flickator ! Entirely rewritten to 100% Kotlin Multiple leaks detected in one analysis The heap is dumped when the app goes in the background, or when a minimum of 5 leaks is reached in the foreground. Leak grouping Leaks that share similar causes are grouped in the UI. New screens to see the list of groups and each group. Improved leaktrace strings to highlight leak causes. Leaks can be shared to Stack Overflow New library: LeakSentry . Detects when objects are leaking and triggers LeakCanary Can be used independently in production, for instance to report the number of leaking instances on an OutOfMemoryError crash. New heap parser Uses 90% less memory and 6 times faster than the prior heap parser. Runs in the same process as the app on a low priority thread. No more dependency on Perflib and TroveJ. New dependency on Okio. The old parser is still available as leakcanary-android-perflib but will be removed after alpha. Labelers can add any string content to leak elements 0 code setup, just add the one debug dependency. Simpler configuration options Updated from support library to Android X Many thanks to @BraisGabin , @colinmarsch , @jrodbx , @flickator , @JakeWharton , @pyricau , @WhatsEmo for the contributions! For more details, see the 2.0-alpha-1 Milestone and the full diff .","title":"Version 2.0 Alpha 1 (2019-04-23)"},{"location":"changelog/#version-163-2019-01-10","text":"#1163 Fixed leaks being incorrectly classified as no leak due to missed GC Roots. #1153 LeakCanary.isInAnalyzerProcess now correctly returns true in the analyzer process prior to any first leak (could be triggered by starting the leak result activity). #1158 Stopped enabling DisplayLeakActivity when not using DisplayLeakService. #1135 Fixed IndexOutOfBoundsException for leak traces of size 1. #1163 Keep no leak heap dumps. Many thanks to @KMaragh , @pyricau , @SebRut for the code contributions! For more details, see the 1.6.3 Milestone and the full diff .","title":"Version 1.6.3 (2019-01-10)"},{"location":"changelog/#version-162-2018-10-16","text":"#1067 Fixed TransactionTooLargeException crash (leak analysis would never complete). #1061 Detection of Fragment view leaks after Fragment#onDestroyView(). #1076 Added the FOREGROUND_SERVICE permission for Android P. #1062 The LeakCanary toast now always shows correctly. It doesn t show if there is no activity in foreground. #1115 Reenabled the DisplayLeakActivity icon on fresh installs. #1100 Added nullability annotations to improve Kotlin support. Updates to excluded leaks ( commits ). Updates to reachability inspectors ( commits ). Many thanks to @fractalwrench , @ZacSweers , @Goddchen , @igokoro , @IlyaGulya , @JakeWharton , @javmarina , @jokermonn , @jrodbx , @Parseus , @pyricau , @scottkennedy for the code contributions!","title":"Version 1.6.2 (2018-10-16)"},{"location":"changelog/#public-api-changes","text":"Subclasses of AbstractAnalysisResultService should now override onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) instead of onHeapAnalyzed(@NonNull HeapDump heapDump, @NonNull AnalysisResult result) For more details, see the 1.6.2 Milestone and the full diff .","title":"Public API changes"},{"location":"changelog/#version-161-2018-06-21","text":"#727 Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak. #1011 We noticed that computing the retained heap size could take a long time, so it s now optional and off by default. #633 Support for detecting leaks in instrumentation tests ( see the wiki ). #985 Ability to convert leak traces into stack traces for easy remote reporting ( see the wiki ). #983 Support for watching destroyed Fragments. #846 LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+. The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found. #775 Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library. #930 DisplayLeakActivity has a responsive icon. #685 Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors). #999 Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1). Several bug and crash fixes. Many thanks to @AdityaAnand1 , @alhah , @christxph , @csoon03 , @daqi , @JakeWharton , @jankovd , @jrodbx , @kurtisnelson , @NightlyNexus , @pyricau , @SalvatoreT , @shmuelr , @tokou , @xueqiushi for the code contributions! Note: we made a 1.6 release but quickly followed up with 1.6.1 due to #1058 .","title":"Version 1.6.1 (2018-06-21)"},{"location":"changelog/#public-api-changes_1","text":"The installed ref watcher singleton is now available via LeakCanary.installedRefWatcher() AnalysisResult.leakTraceAsFakeException() returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics. New InstrumentationLeakDetector and FailTestOnLeakRunListener APIs for detecting leaks in instrumentation tests. New Reachability.Inspector and RefWatcherBuilder.stethoscopeClasses() API to establish reachability and help identify leak causes. Watching activities can be disabled with AndroidRefWatcherBuilder.watchActivities(false) , watching fragments can be disabled with AndroidRefWatcherBuilder.watchFragments(false) LeakCanary.setDisplayLeakActivityDirectoryProvider() is deprecated and replaced with LeakCanary.setLeakDirectoryProvider() New RefWatcherBuilder.computeRetainedHeapSize() API to enable the computing of the retained heap size (off by default). For more details, see the 1.6.1 Milestone and the full diff .","title":"Public API changes"},{"location":"changelog/#version-154-2017-09-22","text":"Restore Java 7 compatibility in leakcanary-watcher","title":"Version 1.5.4 (2017-09-22)"},{"location":"changelog/#version-153-2017-09-17","text":"Fix broken 1.5.2 build Convert leakcanary-watcher from Android library to Java library Disable finish animations in RequestStoragePermissionActivity Corrected README sample for Robolectric tests For more details, see the full diff .","title":"Version 1.5.3 (2017-09-17)"},{"location":"changelog/#version-152-2017-08-09","text":"New excluded leaks Move Leakcanary UI into leak analyzer process Ignore computing retained sizes for bitmaps on O+ Add notification channel for persistent messages on O+ Exclude permission activity from recents menu Updated README and sample for handling Robolectric tests For more details, see the full diff .","title":"Version 1.5.2 (2017-08-09)"},{"location":"changelog/#version-151-2017-04-25","text":"New excluded leaks Fix java.util.MissingFormatArgumentException in DisplayLeakService Separate task affinities for different apps Bump minSdk to 14 Fix HahaHelper for O Preview For more details, see the full diff .","title":"Version 1.5.1 (2017-04-25)"},{"location":"changelog/#version-15-2016-09-28","text":"New excluded leaks Added LeakCanary.isInAnalyzerProcess() to the no-op jar Fixed several file access issues: No more cleanup on startup, we rotate the heap dump files on every new heap dump. LeakCanary now falls back to the app directory until it can write to the external storage. Leak notifications now each use a distinct notification instead of erasing each other. If LeakCanary can t perform a heap dump for any reason (e.g. analysis in progress, debugger attached), it retries later with an exponential backoff. Added confirmation dialog when user deletes all leaks. Replace the two LeakCanary configuration methods with a builder that provides more flexibility, see LeakCanary.refWatcher() . For more details, see the full diff .","title":"Version 1.5 (2016-09-28)"},{"location":"changelog/#public-api-changes_2","text":"New HeapAnalyzer.findTrackedReferences() method for headless analysis when you have no context on what leaked. Added LeakCanary.isInAnalyzerProcess() to the no-op jar Added LeakCanary.refWatcher() which returns an AndroidRefWatcherBuilder that extends RefWatcherBuilder and lets you fully customize the RefWatcher instance. Removed LeakCanary.install(Application, Class) and LeakCanary.androidWatcher(Context, HeapDump.Listener, ExcludedRefs) . Removed R.integer.leak_canary_max_stored_leaks and R.integer.leak_canary_watch_delay_millis , those can now be set via LeakCanary.refWatcher() . Updated the LeakDirectoryProvider API to centralize all file related responsibilities. RefWatcher is now constructed with a WatchExecutor which executes a Retryable , instead of an Executor that executes a Runnable . HeapDumper.NO_DUMP was renamed HeapDumper.RETRY_LATER","title":"Public API changes"},{"location":"changelog/#version-14-2016-09-11","text":"Fix false negative where GC root is of type android.os.Binder #482 Update HAHA to 2.0.3; clear compiler warnings #563 Correct some mistakes in German translation #516 Don t loop when storage permission denied #422 Remove old references to __ prefixed resources #477 Fix permission crash for DisplayLeakActivity on M #382 Fix NPE when thread name not found in heap dump #417 Add version info to stacktrace #473","title":"Version 1.4 (2016-09-11)"},{"location":"changelog/#version-14-beta2-2016-03-23","text":"Add reason for ignoring to analysis result #365 . Lower memory usage when parsing heap dumps on M #223 . Fix NPE in LeakCanaryInternals.isInServiceProcess() #449 . New ignored Android SDK leaks #297 , #322 . Use leakcanary-android-no-op in test builds #143 . Fixes to allow LeakCanary to work with ProGuard #398 . Optimize png assets #406 . Fix delete button not working on error views #408 . Add German translation #437 .","title":"Version 1.4-beta2 (2016-03-23)"},{"location":"changelog/#version-14-beta1-2016-01-08","text":"Switched to HAHA 2.0.2 with uses Perflib instead of MAT under the hood #219 . This fixes crashes and improves speed a lot. We can now parse Android M heap dumps #267 , although there are still memory issues (see #223 ). Excluded leaks are now reported as well and available in the display leak activity. Added ProGuard configuration for #132 . Many new ignored Android SDK leaks. Added excluded leaks to text report #119 . Added LeakCanary SHA to text report #120 . Added CanaryLog API to replace the logger: #201 . Renamed all resources to begin with leak_canary_ instead of __leak_canary #161 No crash when heap dump fails #226 . Add retained size to leak reports #162 .","title":"Version 1.4-beta1 (2016-01-08)"},{"location":"changelog/#public-api-changes_3","text":"AnalysisResult.failure is now a Throwable instead of an Exception . Main goal is to catch and correctly report OOMs while parsing. Added ARRAY_ENTRY to LeakTraceElement.Type for references through array entries. Renamed ExcludedRefs fields. Each ExcludedRef entry can now be ignored entirely or kept only if no other path . Added support for ignoring all fields (static and non static) for a given class.","title":"Public API changes"},{"location":"changelog/#version-131-2015-05-16","text":"Heap dumps and analysis results are now saved on the sd card: #21 . ExcludedRef and AndroidExcludedRefs are customizable: #12 #73 . 7 new ignored Android SDK leaks: #1 #4 #32 #89 #82 #97 . Fixed 3 crashes in LeakCanary: #37 #46 #66 . Fixed StrictMode thread policy violations: #15 . Updated minSdkVersion from 9 to 8 : #57 . Added LeakCanary version name to LeakCanary.leakInfo() : #49 . leakcanary-android-no-op is lighter, it does not depend on leakcanary-watcher anymore, only 2 classes now: #74 . Adding field state details to the text leak trace. A Toast is displayed while the heap dump is in progress to warn that the UI will freeze: #20 . You can customize the toast by providing your own layout named __leak_canary_heap_dump_toast.xml (e.g. you could make it an empty layout). If the analysis fails, the result and heap dump are kept so that it can be reported to LeakCanary: #102 . Update to HAHA 1.3 to fix a 2 crashes #3 46","title":"Version 1.3.1 (2015-05-16)"},{"location":"changelog/#public-api-changes_4","text":"When upgrading from 1.3 to 1.3.1, previously saved heap dumps will not be readable any more, but they won t be removed from the app directory. You should probably uninstall your app. Added android.permission.WRITE_EXTERNAL_STORAGE to leakcanary-android artifact. LeakCanary.androidWatcher() parameter types have changed (+ExcludedRefs). LeakCanary.leakInfo() parameter types have changed (+boolean) ExcludedRef is now serializable and immutable, instances can be created using ExcludedRef.Builder . ExcludedRef is available in HeapDump AndroidExcludedRefs is an enum, you can now pick the leaks you want to ignore in AndroidExcludedRefs by creating an EnumSet and calling AndroidExcludedRefs.createBuilder() . AndroidExcludedRefs.createAppDefaults() AndroidExcludedRefs.createAndroidDefaults() return a ExcludedRef.Builder . ExcludedRef moved from leakcanary-analyzer to leakcanary-watcher","title":"Public API changes"},{"location":"changelog/#version-13-2015-05-08","text":"Initial release.","title":"Version 1.3 (2015-05-08)"},{"location":"changelog/#dependencies","text":"","title":"Dependencies"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"dev-env/","text":"Dev Environment for LeakCanary contributors Setup Download Android Studio We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles Build with ./gradlew build Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-sample:connectedCheck Normal UI tests: ./gradlew leakcanary-support-fragment:connectedCheck Static Code Analysis LeakCanary uses tool Detekt for static Code analysis Analyze whole project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There s also a git pre-push hook that will run analysis automatically before pushing branch to remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in console and saved to `/moduleDir/build/reports/ Deploying locally To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:2.3-SNAPSHOT } repositories { mavenLocal() } Deploying the docs locally Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Dev Environment"},{"location":"dev-env/#dev-environment-for-leakcanary-contributors","text":"","title":"Dev Environment for LeakCanary contributors"},{"location":"dev-env/#setup","text":"Download Android Studio We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles Build with ./gradlew build Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-sample:connectedCheck Normal UI tests: ./gradlew leakcanary-support-fragment:connectedCheck","title":"Setup"},{"location":"dev-env/#static-code-analysis","text":"LeakCanary uses tool Detekt for static Code analysis Analyze whole project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There s also a git pre-push hook that will run analysis automatically before pushing branch to remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in console and saved to `/moduleDir/build/reports/","title":"Static Code Analysis"},{"location":"dev-env/#deploying-locally","text":"To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:2.3-SNAPSHOT } repositories { mavenLocal() }","title":"Deploying locally"},{"location":"dev-env/#deploying-the-docs-locally","text":"Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Deploying the docs locally"},{"location":"faq/","text":"FAQ Can a leak be caused by the Android SDK? Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to recognize: AndroidReferenceMatchers . If you find a new one, please create an issue and follow these steps: Provide the entire leak trace information (including metadata), and use backticks (`) for formatting. Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions by switching branches on the GitHub mirror: android/platform_frameworks_base . Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed. If it s still happening, build a simple repro case. File an issue on b.android.com with the leak trace and the repro case. Create a PR in LeakCanary to update AndroidReferenceMatchers . Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it. How do I know if LeakCanary is running? You can confirm that LeakCanary starts correctly by filtering on the LeakCanary tag in Logcat: $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher If you do not see Installing AppWatcher in the logs, check your dependencies ( ./gradlew app:dependencies ) and make sure LeakCanary is there. Note that LeakCanary is automatically disabled in tests (see Running LeakCanary in instrumentation tests ): $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher D/LeakCanary: JUnit detected in classpath, app is running tests = disabling heap dumping analysis D/LeakCanary: Updated LeakCanary.config: Config(dumpHeap=false) How can I dig beyond the leak trace? Sometimes the leak trace isn t enough and you need to dig into a heap dump with MAT or YourKit . Go to a heap analysis screen, click the overflow menu and select Share Heap Dump . Here s how you can find the leaking instance in the heap dump: Look for all instances of leakcanary.KeyedWeakReference . For each of these, look at the key field. Find the KeyedWeakReference that has a key field equal to the reference key reported by LeakCanary. The referent field of that KeyedWeakReference is your leaking object. From then on, the matter is in your hands. A good start is to look at the shortest path to GC Roots (excluding weak references). How does LeakCanary get installed by only adding a dependency? On Android, content providers are created after the Application instance is created but before Application.onCreate() is called. The leakcanary-object-watcher-android artifact has a non exported ContentProvider defined in its AndroidManifest.xml file. When that ContentProvider is installed, it adds activity and fragment lifecycle listeners to the application. How many methods does LeakCanary add? 0 . LeakCanary is a debug only library. How do I use the SNAPSHOT version? Update your dependencies to the latest SNAPSHOT (see build.gradle ): dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:2.3-SNAPSHOT } Add Sonatype s snapshots repository: repositories { mavenCentral() maven { url https://oss.sonatype.org/content/repositories/snapshots/ } } Status of the snapshot build: Who s behind LeakCanary? LeakCanary was created and open sourced by @pyricau , with many contributions from the community. Why is it called LeakCanary? The name LeakCanary is a reference to the expression canary in a coal mine , because LeakCanary is a sentinel used to detect risks by providing advance warning of a danger. Props to @edenman for suggesting it! Who made the logo? @pyricau quickly made the first version of the logo. It was based on cliparts from Android Asset Studio , mixed with the selection from a photo of a Canary. The exclamation mark means danger, the shield stands for protection, and the bird, well, is a canary. @romainguy turned the ugly logo into a nice vector asset . @flickator designed a much nicer logo for LeakCanary 2.0!","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#can-a-leak-be-caused-by-the-android-sdk","text":"Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to recognize: AndroidReferenceMatchers . If you find a new one, please create an issue and follow these steps: Provide the entire leak trace information (including metadata), and use backticks (`) for formatting. Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions by switching branches on the GitHub mirror: android/platform_frameworks_base . Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed. If it s still happening, build a simple repro case. File an issue on b.android.com with the leak trace and the repro case. Create a PR in LeakCanary to update AndroidReferenceMatchers . Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it.","title":"Can a leak be caused by the Android SDK?"},{"location":"faq/#how-do-i-know-if-leakcanary-is-running","text":"You can confirm that LeakCanary starts correctly by filtering on the LeakCanary tag in Logcat: $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher If you do not see Installing AppWatcher in the logs, check your dependencies ( ./gradlew app:dependencies ) and make sure LeakCanary is there. Note that LeakCanary is automatically disabled in tests (see Running LeakCanary in instrumentation tests ): $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher D/LeakCanary: JUnit detected in classpath, app is running tests = disabling heap dumping analysis D/LeakCanary: Updated LeakCanary.config: Config(dumpHeap=false)","title":"How do I know if LeakCanary is running?"},{"location":"faq/#how-can-i-dig-beyond-the-leak-trace","text":"Sometimes the leak trace isn t enough and you need to dig into a heap dump with MAT or YourKit . Go to a heap analysis screen, click the overflow menu and select Share Heap Dump . Here s how you can find the leaking instance in the heap dump: Look for all instances of leakcanary.KeyedWeakReference . For each of these, look at the key field. Find the KeyedWeakReference that has a key field equal to the reference key reported by LeakCanary. The referent field of that KeyedWeakReference is your leaking object. From then on, the matter is in your hands. A good start is to look at the shortest path to GC Roots (excluding weak references).","title":"How can I dig beyond the leak trace?"},{"location":"faq/#how-does-leakcanary-get-installed-by-only-adding-a-dependency","text":"On Android, content providers are created after the Application instance is created but before Application.onCreate() is called. The leakcanary-object-watcher-android artifact has a non exported ContentProvider defined in its AndroidManifest.xml file. When that ContentProvider is installed, it adds activity and fragment lifecycle listeners to the application.","title":"How does LeakCanary get installed by only adding a dependency?"},{"location":"faq/#how-many-methods-does-leakcanary-add","text":"0 . LeakCanary is a debug only library.","title":"How many methods does LeakCanary add?"},{"location":"faq/#how-do-i-use-the-snapshot-version","text":"Update your dependencies to the latest SNAPSHOT (see build.gradle ): dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:2.3-SNAPSHOT } Add Sonatype s snapshots repository: repositories { mavenCentral() maven { url https://oss.sonatype.org/content/repositories/snapshots/ } } Status of the snapshot build:","title":"How do I use the SNAPSHOT version?"},{"location":"faq/#whos-behind-leakcanary","text":"LeakCanary was created and open sourced by @pyricau , with many contributions from the community.","title":"Who's behind LeakCanary?"},{"location":"faq/#why-is-it-called-leakcanary","text":"The name LeakCanary is a reference to the expression canary in a coal mine , because LeakCanary is a sentinel used to detect risks by providing advance warning of a danger. Props to @edenman for suggesting it!","title":"Why is it called LeakCanary?"},{"location":"faq/#who-made-the-logo","text":"@pyricau quickly made the first version of the logo. It was based on cliparts from Android Asset Studio , mixed with the selection from a photo of a Canary. The exclamation mark means danger, the shield stands for protection, and the bird, well, is a canary. @romainguy turned the ugly logo into a nice vector asset . @flickator designed a much nicer logo for LeakCanary 2.0!","title":"Who made the logo?"},{"location":"fundamentals-fixing-a-memory-leak/","text":"A memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. Somewhere in the code, there s a reference that should have been cleared and wasn t. There are 4 steps to fixing a memory leak: Find the leak trace Narrow down the leak trace Find the cause Fix the leak LeakCanary helps you with the first two steps. The last two steps are up to you! 1. Find the leak trace A leak trace is the best strong reference path from garbage collection roots to the retained object , ie the path of references that is holding an object in memory, therefore preventing it from being garbage collected. For example, if we store a helper singleton in a static field: class Helper { } class Utils { public static Helper helper = new Helper (); } And then we tell LeakCanary that we expect that singleton instance to be garbage collected soon: AppWatcher.objectWatcher.watch(Utils.helper) The leak trace for that singleton could look like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper Let s break it down! At the top, we can see that a PathClassLoader instance is held by a garbage collection (GC) root, more specifically a local variable in native code. GC roots are special objects that are always reachable, ie they cannot be garbage collected. There are four kinds of GC roots worth mentioning: Local variables , which belong to the stack of a thread. Instances of active Java threads . System Classes , which never unload. Native references , which are controlled by native code. \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance A line starting with \u251c\u2500 represents a Java object (either a class, an object array or an instance), and a line starting with \u2502 \u2193 represents a reference to the Java object on the next line. We can see that PathClassLoader has a runtimeInternalObjects field which is a reference to an array of Object . \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array The element at position 43 in that array of Object is a reference to our Utils class. \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class A line starting with \u2570\u2192 represents the leaking object. The leaking object was passed to AppWatcher.objectWatcher to confirm it would be garbage collected, and it ended up not being garbage collected which triggered LeakCanary. We can see that our Utils class has a static helper field which is a reference to the leaking object, our Helper singleton instance. \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper instance 2. Narrow down the leak trace Now, let s write some bad Android code: class ExampleApplication : Application () { val leakedViews = mutableListOf View () } class MainActivity : Activity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . main_activity ) val textView = findViewById View ( R . id . helper_text ) val app = application as ExampleApplication // What a Terrible Failure! app . leakedViews . add ( textView ) } } Let s pretend that we don t know about this bad code. We just joined a new company that has an existing Android app, we set up LeakCanary, and soon enough tit produces a leak trace that looks like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 \u2193 ExampleApplication.leakedViews \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance In words: the FontsContract class is a system class and has an sContext static field which references the ExampleApplication instance which has a leakedViews field which references an array list which references an array (the array backing the array list implementation) which contains a TextView which has an mContext field which references a destroyed instance of MainActivity . Let s highlight all references we are currently suspecting of causing this leak: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u2502 ~~~~~~~~ \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance Our next step is to reason about the state and lifecycle of the objects in the leak trace: we know that in an Android app the Application instance is a singleton that is never garbage collected, so it s never leaking. From that, we can conclude that the leak is not caused by FontsContract.sContext . Let s update our suspected references: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance We also know that the TexView instance references our destroyed activity instance via it s mContext field. Views should not survive the lifecycle of their context, so we know that this text view is leaking: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance Reasoning about the state and lifecycle of the objects in the leak trace help us narrow down the list of suspect references. The good news here is that most of that reasoning is automated, e.g. LeakCanary already knows that the Application class is a singleton and that Views should not survive the lifecycle of their context and will narrow down the list of suspects references for you. You can help LeakCanary help you by providing additional ObjectInspector implementations, see Identifying leaking objects and labeling objects . 3. Find the cause So far, our investigation has taught us that there are 3 suspect references in our leak trace: ExampleApplication.leakedViews , ArrayList.elementData and Object[].[0] : \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance ArrayList.elementData and Object[].[0] are implementation details of ArrayList , and it s unlikely that there s a bug in the ArrayList implementation instead, so we know the problem is somewhere else, ie the only remaining reference: ExampleApplication.leakedViews . 4. Fix the leak Once we ve found the reference that s causing the leak, we need to figure out what that reference is about, when it should have been cleared and why it hasn t been. Sometimes it s obvious, like in this example. Sometimes we lack enough information to figure it out. You could either add labels , or explore the hprof directly (see How can I dig beyond the leak trace? ). Warning Memory leaks cannot be fixed by replacing strong references with weak references. It s a common solution when attempting to quickly address memory issues, however it never works. The bugs that were causing references to be kept longer than necessary are still there. On top of that, it creates more bugs as some objects will now be garbage collected sooner than they should. It also makes the code much harder to maintain. What s next? Try the code recipes !","title":"Fixing a memory leak"},{"location":"fundamentals-fixing-a-memory-leak/#1-find-the-leak-trace","text":"A leak trace is the best strong reference path from garbage collection roots to the retained object , ie the path of references that is holding an object in memory, therefore preventing it from being garbage collected. For example, if we store a helper singleton in a static field: class Helper { } class Utils { public static Helper helper = new Helper (); } And then we tell LeakCanary that we expect that singleton instance to be garbage collected soon: AppWatcher.objectWatcher.watch(Utils.helper) The leak trace for that singleton could look like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper Let s break it down! At the top, we can see that a PathClassLoader instance is held by a garbage collection (GC) root, more specifically a local variable in native code. GC roots are special objects that are always reachable, ie they cannot be garbage collected. There are four kinds of GC roots worth mentioning: Local variables , which belong to the stack of a thread. Instances of active Java threads . System Classes , which never unload. Native references , which are controlled by native code. \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance A line starting with \u251c\u2500 represents a Java object (either a class, an object array or an instance), and a line starting with \u2502 \u2193 represents a reference to the Java object on the next line. We can see that PathClassLoader has a runtimeInternalObjects field which is a reference to an array of Object . \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array The element at position 43 in that array of Object is a reference to our Utils class. \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class A line starting with \u2570\u2192 represents the leaking object. The leaking object was passed to AppWatcher.objectWatcher to confirm it would be garbage collected, and it ended up not being garbage collected which triggered LeakCanary. We can see that our Utils class has a static helper field which is a reference to the leaking object, our Helper singleton instance. \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper instance","title":"1. Find the leak trace"},{"location":"fundamentals-fixing-a-memory-leak/#2-narrow-down-the-leak-trace","text":"Now, let s write some bad Android code: class ExampleApplication : Application () { val leakedViews = mutableListOf View () } class MainActivity : Activity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . main_activity ) val textView = findViewById View ( R . id . helper_text ) val app = application as ExampleApplication // What a Terrible Failure! app . leakedViews . add ( textView ) } } Let s pretend that we don t know about this bad code. We just joined a new company that has an existing Android app, we set up LeakCanary, and soon enough tit produces a leak trace that looks like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 \u2193 ExampleApplication.leakedViews \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance In words: the FontsContract class is a system class and has an sContext static field which references the ExampleApplication instance which has a leakedViews field which references an array list which references an array (the array backing the array list implementation) which contains a TextView which has an mContext field which references a destroyed instance of MainActivity . Let s highlight all references we are currently suspecting of causing this leak: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u2502 ~~~~~~~~ \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance Our next step is to reason about the state and lifecycle of the objects in the leak trace: we know that in an Android app the Application instance is a singleton that is never garbage collected, so it s never leaking. From that, we can conclude that the leak is not caused by FontsContract.sContext . Let s update our suspected references: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance We also know that the TexView instance references our destroyed activity instance via it s mContext field. Views should not survive the lifecycle of their context, so we know that this text view is leaking: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance Reasoning about the state and lifecycle of the objects in the leak trace help us narrow down the list of suspect references. The good news here is that most of that reasoning is automated, e.g. LeakCanary already knows that the Application class is a singleton and that Views should not survive the lifecycle of their context and will narrow down the list of suspects references for you. You can help LeakCanary help you by providing additional ObjectInspector implementations, see Identifying leaking objects and labeling objects .","title":"2. Narrow down the leak trace"},{"location":"fundamentals-fixing-a-memory-leak/#3-find-the-cause","text":"So far, our investigation has taught us that there are 3 suspect references in our leak trace: ExampleApplication.leakedViews , ArrayList.elementData and Object[].[0] : \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance ArrayList.elementData and Object[].[0] are implementation details of ArrayList , and it s unlikely that there s a bug in the ArrayList implementation instead, so we know the problem is somewhere else, ie the only remaining reference: ExampleApplication.leakedViews .","title":"3. Find the cause"},{"location":"fundamentals-fixing-a-memory-leak/#4-fix-the-leak","text":"Once we ve found the reference that s causing the leak, we need to figure out what that reference is about, when it should have been cleared and why it hasn t been. Sometimes it s obvious, like in this example. Sometimes we lack enough information to figure it out. You could either add labels , or explore the hprof directly (see How can I dig beyond the leak trace? ). Warning Memory leaks cannot be fixed by replacing strong references with weak references. It s a common solution when attempting to quickly address memory issues, however it never works. The bugs that were causing references to be kept longer than necessary are still there. On top of that, it creates more bugs as some objects will now be garbage collected sooner than they should. It also makes the code much harder to maintain. What s next? Try the code recipes !","title":"4. Fix the leak"},{"location":"fundamentals-how-leakcanary-works/","text":"Detecting retained objects The foundation of LeakCanary is the leakcanary-object-watcher-android library. It hooks into the Android lifecycle to automatically detect when activities and fragments are destroyed and should be garbage collected. These destroyed objects are passed to an ObjectWatcher , which holds weak references to them. You can watch any objects that is no longer needed, for example a detached view, a destroyed presenter, etc. AppWatcher . objectWatcher . watch ( myDetachedView , View was detached ) If the weak references aren t cleared after waiting 5 seconds and running garbage collection, the watched objects are considered retained , and potentially leaking. LeakCanary logs this to Logcat: D LeakCanary: Watching instance of com.example.leakcanary.MainActivity (Activity received Activity#onDestroy() callback) ... 5 seconds later ... D LeakCanary: Scheduling check for retained objects because found new object retained LeakCanary waits for the count of retained objects to reach a threshold before dumping the heap, and displays a notification with the latest count. D LeakCanary: Rescheduling check for retained objects in 2000ms because found only 4 retained objects ( 5 while app visible) Info The default threshold is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . If you see the retained objects notification and then put the app in background (for example by pressing the Home button), then the threshold changes from 5 to 1 and LeakCanary dumps the heap within 5 seconds. Tapping the notification forces LeakCanary to dump the heap immediately. Dumping the heap When the count of retained objects reaches a threshold, LeakCanary dumps the Java heap into a .hprof file stored onto the Android file system. This freezes the app for a short amount of time, during which LeakCanary displays the following toast: Analyzing the heap LeakCanary parses the .hprof file using Shark and locates the retained objects in that heap dump. For each retained object, LeakCanary finds the path of references which prevents that retained object from being garbage collected: its leak trace . Leak trace is another name for the best strong reference path from garbage collection roots to a retained object . When the analysis is done, LeakCanary displays a notification with a summary, and also prints the result in Logcat . Notice below how the 4 retained objects are grouped as 2 distinct leaks . LeakCanary creates a signature for each leak trace , and groups together leaks that have the same signature, ie leaks that are caused by the same bug. ==================================== HEAP ANALYSIS RESULT ==================================== 2 APPLICATION LEAKS References underlined with ~~~ are likely causes. Learn more at https://squ.re/leaks. 58782 bytes retained by leaking objects Displaying only 1 leak trace out of 2 with the same signature Signature: ce9dee3a1feb859fd3b3a9ff51e3ddfd8efbc6 \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 ... Tapping the notification starts an activity that provides more details. Each row corresponds to a group of leaks with the same signature. LeakCanary will mark a leak as New if it s the first time you ve seen a leak with that signature. Tapping into a leak opens up a screen where you can see each retained object and its leak trace. You can toggle between retained objects via a drop down. The leak signature is the hash of the concatenation of each reference suspected to cause the leak, ie each reference displayed with a red underline : These same suspicious references are underlined with ~~~ when the leak trace is shared as text: ... \u2502 \u251c\u2500 com.example.leakcanary.LeakingSingleton class \u2502 Leaking: NO (a class is never leaking) \u2502 \u2193 static LeakingSingleton.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 Leaking: UNKNOWN \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) ... In the example above, the signature of the leak would be computed as: val leakSignature = sha1Hash ( com.example.leakcanary.LeakingSingle.leakedView + java.util.ArrayList.elementData + java.lang.Object[].[x] ) println ( leakSignature ) // d962211eda4d45ac50d88d8f212224116a664968 What s next? Learn how to fix a memory leak !","title":"How LeakCanary works"},{"location":"fundamentals-how-leakcanary-works/#detecting-retained-objects","text":"The foundation of LeakCanary is the leakcanary-object-watcher-android library. It hooks into the Android lifecycle to automatically detect when activities and fragments are destroyed and should be garbage collected. These destroyed objects are passed to an ObjectWatcher , which holds weak references to them. You can watch any objects that is no longer needed, for example a detached view, a destroyed presenter, etc. AppWatcher . objectWatcher . watch ( myDetachedView , View was detached ) If the weak references aren t cleared after waiting 5 seconds and running garbage collection, the watched objects are considered retained , and potentially leaking. LeakCanary logs this to Logcat: D LeakCanary: Watching instance of com.example.leakcanary.MainActivity (Activity received Activity#onDestroy() callback) ... 5 seconds later ... D LeakCanary: Scheduling check for retained objects because found new object retained LeakCanary waits for the count of retained objects to reach a threshold before dumping the heap, and displays a notification with the latest count. D LeakCanary: Rescheduling check for retained objects in 2000ms because found only 4 retained objects ( 5 while app visible) Info The default threshold is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . If you see the retained objects notification and then put the app in background (for example by pressing the Home button), then the threshold changes from 5 to 1 and LeakCanary dumps the heap within 5 seconds. Tapping the notification forces LeakCanary to dump the heap immediately.","title":"Detecting retained objects"},{"location":"fundamentals-how-leakcanary-works/#dumping-the-heap","text":"When the count of retained objects reaches a threshold, LeakCanary dumps the Java heap into a .hprof file stored onto the Android file system. This freezes the app for a short amount of time, during which LeakCanary displays the following toast:","title":"Dumping the heap"},{"location":"fundamentals-how-leakcanary-works/#analyzing-the-heap","text":"LeakCanary parses the .hprof file using Shark and locates the retained objects in that heap dump. For each retained object, LeakCanary finds the path of references which prevents that retained object from being garbage collected: its leak trace . Leak trace is another name for the best strong reference path from garbage collection roots to a retained object . When the analysis is done, LeakCanary displays a notification with a summary, and also prints the result in Logcat . Notice below how the 4 retained objects are grouped as 2 distinct leaks . LeakCanary creates a signature for each leak trace , and groups together leaks that have the same signature, ie leaks that are caused by the same bug. ==================================== HEAP ANALYSIS RESULT ==================================== 2 APPLICATION LEAKS References underlined with ~~~ are likely causes. Learn more at https://squ.re/leaks. 58782 bytes retained by leaking objects Displaying only 1 leak trace out of 2 with the same signature Signature: ce9dee3a1feb859fd3b3a9ff51e3ddfd8efbc6 \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 ... Tapping the notification starts an activity that provides more details. Each row corresponds to a group of leaks with the same signature. LeakCanary will mark a leak as New if it s the first time you ve seen a leak with that signature. Tapping into a leak opens up a screen where you can see each retained object and its leak trace. You can toggle between retained objects via a drop down. The leak signature is the hash of the concatenation of each reference suspected to cause the leak, ie each reference displayed with a red underline : These same suspicious references are underlined with ~~~ when the leak trace is shared as text: ... \u2502 \u251c\u2500 com.example.leakcanary.LeakingSingleton class \u2502 Leaking: NO (a class is never leaking) \u2502 \u2193 static LeakingSingleton.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 Leaking: UNKNOWN \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) ... In the example above, the signature of the leak would be computed as: val leakSignature = sha1Hash ( com.example.leakcanary.LeakingSingle.leakedView + java.util.ArrayList.elementData + java.lang.Object[].[x] ) println ( leakSignature ) // d962211eda4d45ac50d88d8f212224116a664968 What s next? Learn how to fix a memory leak !","title":"Analyzing the heap"},{"location":"fundamentals/","text":"What is a memory leak? In a Java based runtime, a memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. As a result, the memory allocated for that object cannot be reclaimed, eventually leading to an OutOfMemoryError crash. For example, an Android activity instance is no longer needed after its onDestroy() method is called, and storing a reference to that activity in a static field would prevent it from being garbage collected. Common causes for memory leaks Most memory leaks are caused by bugs related to the lifecycle of objects. Here are a few common Android mistakes: Adding a Fragment to the backstack without clearing its view fields in Fragment.onDestroyView() (see this great StackOverflow answer ) Storing an Activity context as a field in an object that survives activity recreation due to configuration changes. Registering a listener, broadcast receiver or RxJava subscription which references an object with lifecycle, and forgetting to unregister when the lifecycle reaches its end. Why should I use LeakCanary? Memory leaks are very common in Android apps and the accumulation of small memory leaks causes apps to run out of memory and crash with an OutOfMemoryError (OOM). LeakCanary will help you find these memory leaks during development. When we first enabled LeakCanary in the Square Point Of Sale app, we were able to find and fix several leaks and reduced the OOM crash rate by 94% . Info Most crash reporting tools do not correctly report OOMs . When memory is low because of memory leak accumulation, an OOM can be thrown from anywhere in the app code, which means every OOM has a different stacktrace. So instead of one crash entry with a 1000 crashes, those get reported as 1000 distinct crashes and hide in the long tail of low occuring crashes. What s next? Learn how LeakCanary works !","title":"Introduction"},{"location":"fundamentals/#what-is-a-memory-leak","text":"In a Java based runtime, a memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. As a result, the memory allocated for that object cannot be reclaimed, eventually leading to an OutOfMemoryError crash. For example, an Android activity instance is no longer needed after its onDestroy() method is called, and storing a reference to that activity in a static field would prevent it from being garbage collected.","title":"What is a memory leak?"},{"location":"fundamentals/#common-causes-for-memory-leaks","text":"Most memory leaks are caused by bugs related to the lifecycle of objects. Here are a few common Android mistakes: Adding a Fragment to the backstack without clearing its view fields in Fragment.onDestroyView() (see this great StackOverflow answer ) Storing an Activity context as a field in an object that survives activity recreation due to configuration changes. Registering a listener, broadcast receiver or RxJava subscription which references an object with lifecycle, and forgetting to unregister when the lifecycle reaches its end.","title":"Common causes for memory leaks"},{"location":"fundamentals/#why-should-i-use-leakcanary","text":"Memory leaks are very common in Android apps and the accumulation of small memory leaks causes apps to run out of memory and crash with an OutOfMemoryError (OOM). LeakCanary will help you find these memory leaks during development. When we first enabled LeakCanary in the Square Point Of Sale app, we were able to find and fix several leaks and reduced the OOM crash rate by 94% . Info Most crash reporting tools do not correctly report OOMs . When memory is low because of memory leak accumulation, an OOM can be thrown from anywhere in the app code, which means every OOM has a different stacktrace. So instead of one crash entry with a 1000 crashes, those get reported as 1000 distinct crashes and hide in the long tail of low occuring crashes. What s next? Learn how LeakCanary works !","title":"Why should I use LeakCanary?"},{"location":"getting_started/","text":"Getting started Info To upgrade from LeakCanary 1.6 , follow the upgrade guide . Add LeakCanary to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation com.squareup.leakcanary:leakcanary-android:2.2 } That s it, there is no code change needed! You can confirm that LeakCanary is running on startup by filtering on the LeakCanary tag in Logcat: D LeakCanary: Installing AppWatcher What s next? Learn the Fundamentals !","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Info To upgrade from LeakCanary 1.6 , follow the upgrade guide . Add LeakCanary to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation com.squareup.leakcanary:leakcanary-android:2.2 } That s it, there is no code change needed! You can confirm that LeakCanary is running on startup by filtering on the LeakCanary tag in Logcat: D LeakCanary: Installing AppWatcher What s next? Learn the Fundamentals !","title":"Getting started"},{"location":"how_to_help/","text":"How to help You are most welcome to contribute code, answer StackOverflow questions , help manage GitHub issues and review pull requests. If you would like to contribute code to LeakCanary you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"how_to_help/#how-to-help","text":"You are most welcome to contribute code, answer StackOverflow questions , help manage GitHub issues and review pull requests. If you would like to contribute code to LeakCanary you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"recipes/","text":"Code Recipes Bug If you think a recipe might be missing or you re not sure that what you re trying to achieve is possible with the current APIs, please file an issue . Your feedback help us make LeakCanary better for the entire community. Watching objects with a lifecycle In your application, you may have other objects with a lifecycle, such as fragments, services, Dagger components, etc. Use AppWatcher.objectWatcher to watch instances that should be garbage collected: class MyService : Service { // ... override fun onDestroy () { super . onDestroy () AppWatcher . objectWatcher . watch ( this , MyService received Service#onDestroy() callback ) } } Configuration LeakCanary has a default configuration that should work well for most apps. You can also customize it to your needs. The LeakCanary configuration is held by two singleton objects ( AppWatcher and LeakCanary ) and can be updated at any time. Most developers configure LeakCanary in their debug Application class: class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } Info You can create a debug application class in your src/debug/java folder. Don t forget to also register it in src/debug/AndroidManifest.xml . To customize the detection of retained objects at runtime, update AppWatcher.config : AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false) In Java, you can use AppWatcher.Config.Builder instead: AppWatcher.Config config = AppWatcher.getConfig().newBuilder() .watchFragmentViews(false) .build(); AppWatcher.setConfig(config); To customize the heap dumping analysis, update LeakCanary.config : LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) In Java, you can use LeakCanary.Config.Builder instead: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .build(); LeakCanary.setConfig(config); The LeakCanary UI can be configured by overriding the following resources: mipmap/leak_canary_icon see Icon and label string/leak_canary_display_activity_label see Icon and label bool/leak_canary_add_dynamic_shortcut see Disabling LeakCanary bool/leak_canary_add_launcher_icon see Disabling LeakCanary layout/leak_canary_heap_dump_toast the layout for the toast shown when the heap is dumped Disabling LeakCanary Sometimes it s necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you re trying to achieve: Create a build variant that does not include the LeakCanary dependencies, see Setting up LeakCanary for different product flavors . Disable the tracking of retained objects: AppWatcher.config = AppWatcher.config.copy(enabled = false) . Disable the heap dumping analysis: LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . Hide the leak display activity launcher icon: override R.bool.leak_canary_add_launcher_icon or call LeakCanary.showLeakDisplayActivityLauncherIcon(false) Info When you set AppWatcher.config.enabled to false, AppWatcher.objectWatcher will stop creating weak references to destroyed objects. If instead you set LeakCanary.Config.dumpHeap to false, AppWatcher.objectWatcher will still keep track of retained objects, and LeakCanary will look for these objects when you change LeakCanary.Config.dumpHeap back to true. Counting retained instances in production The com.squareup.leakcanary:leakcanary-android dependency should only be used in debug builds. It depends on com.squareup.leakcanary:leakcanary-object-watcher-android which you can use in production to track and count retained instances. In your build.gradle : dependencies { implementation com.squareup.leakcanary:leakcanary-object-watcher-android:2.0-beta-5 } In your leak reporting code: val retainedInstanceCount = AppWatcher . objectWatcher . retainedObjectCount Running LeakCanary in instrumentation tests Running leak detection in UI tests means you can detect memory leaks automatically in Continuous Integration prior to those leaks being merged into the codebase. However, as LeakCanary runs with a 5 seconds delay and freezes the VM to take a heap dump, this can introduce flakiness to the UI tests. Therefore it is automatically disabled by setting LeakCanary.config.dumpHeap to false when JUnit is on the runtime classpath. LeakCanary provides an artifact dedicated to detecting leaks in UI tests which provides a run listener that waits for the end of a test, and if the test succeeds then it look for retained objects, trigger a heap dump if needed and perform an analysis. To set it up, add the leakcanary-android-instrumentation dependency to your instrumentation tests: androidTestImplementation com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion} Add the dedicated run listener to defaultConfig in your build.gradle : android { defaultConfig { // ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner testInstrumentationRunnerArgument listener , leakcanary.FailTestOnLeakRunListener } } Run the instrumentation tests: ./gradlew leakcanary-android-sample:connectedCheck You can extend FailTestOnLeakRunListener to customize the behavior. Android TV LeakCanary works on Android TV devices (FireTV, Nexus player, Nvidia Shield, MiBox, etc.) without any additional setup. However, there are couple things you need to be aware of: Android TV doesn t have notifications. LeakCanary will display Toast messages when objects become retained and when leak analysis completes. You can also check Logcat for more details. Due to lack of notifications, the only way to manually trigger a heap dump is to background the app. There s a bug on API 26+ devices that prevents the activity that displays leaks from appearing in apps list. As a workaround, LeakCanary prints an adb shell command in Logcat after heap dump analysis that launches leak list activity: adb shell am start -n com.your.package.name/leakcanary.internal.activity.LeakLauncherActivity Some Android TV devices have very little memory available per app process and this might impact LeakCanary. Running the LeakCanary analysis in a separate process might help in such cases. Icon and label The activity that displays leaks comes with a default icon and label, which you can change by providing R.mipmap.leak_canary_icon and R.string.leak_canary_display_activity_label in your app: res/ mipmap-hdpi/ leak_canary_icon.png mipmap-mdpi/ leak_canary_icon.png mipmap-xhdpi/ leak_canary_icon.png mipmap-xxhdpi/ leak_canary_icon.png mipmap-xxxhdpi/ leak_canary_icon.png mipmap-anydpi-v26/ leak_canary_icon.xml ?xml version= 1.0 encoding= utf-8 ? resources string name= leak_canary_display_activity_label MyLeaks /string /resources Uploading to a server You can change the default behavior to upload the analysis result to a server of your choosing. Create a custom OnHeapAnalyzedListener that delegates to DefaultOnHeapAnalyzedListener : class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( Upload heap analysis to server ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } Set LeakCanary.config.onHeapAnalyzedListener : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader ()) } } Uploading to Bugsnag A leak trace has a lot in common with a stack trace, so if you lack the engineering resources to build a backend for LeakCanary, you can instead upload leak traces to a crash reporting backend. The client needs to support grouping via custom client-side hashing as well as custom metadata with support for newlines. Info As of this writing, the only known library suitable for uploading leaks is the Bugsnag client. If you managed to make it work with another library, please file an issue . Create a Bugsnag account , create a new project for leak reporting and grab an API key . Make sure the app has the android.permission.INTERNET permission then add the latest version of the Bugsnag Android client library to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation com.squareup.leakcanary:leakcanary-android:2.2 debugImplementation com.bugsnag:bugsnag-android:$bugsnagVersion } Info If you re only using Bugsnag for uploading leaks, then you do not need to set up the Bugsnag Gradle plugin or to configure the API key in your app manifest. Create a new BugsnagLeakUploader : import android.app.Application import com.bugsnag.android.Client import com.bugsnag.android.MetaData import leakcanary.DefaultOnHeapAnalyzedListener import leakcanary.OnHeapAnalyzedListener import shark.HeapAnalysis import shark.HeapAnalysisFailure import shark.HeapAnalysisSuccess import shark.Leak import shark.LeakTrace import shark.LibraryLeak class BugsnagLeakUploader ( applicationContext : Application ) : OnHeapAnalyzedListener { private val defaultLeakListener = DefaultOnHeapAnalyzedListener . create () private val bugsnagClient : Client init { bugsnagClient = Client ( applicationContext , BUGSNAG_API_KEY , DO_NOT_ENABLE_EXCEPTION_HANDLER ) bugsnagClient . setSendThreads ( false ) } override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { // Delegate to default behavior (notification and saving result) defaultLeakListener . onHeapAnalyzed ( heapAnalysis ) when ( heapAnalysis ) { is HeapAnalysisSuccess - { val allLeakTraces = heapAnalysis . allLeaks . toList () . flatMap { leak - leak . leakTraces . map { leakTrace - leak to leakTrace } } allLeakTraces . forEach { ( leak , leakTrace ) - val exception = FakeReportingException ( leak . shortDescription ) bugsnagClient . notify ( exception ) { report - val bugsnagMetaData = report . error . metaData bugsnagMetaData . addHeapAnalysis ( heapAnalysis ) bugsnagMetaData . addLeak ( leak ) bugsnagMetaData . addLeakTrace ( leakTrace ) report . error . groupingHash = leak . signature } } } is HeapAnalysisFailure - { // Please file any reported failure to // https://github.com/square/leakcanary/issues bugsnagClient . notify ( heapAnalysis . exception ) } } } private fun MetaData . addHeapAnalysis ( heapAnalysis : HeapAnalysisSuccess ) { addToTab ( Leak , heapDumpPath , heapAnalysis . heapDumpFile . absolutePath ) heapAnalysis . metadata . forEach { ( key , value ) - addToTab ( Leak , key , value ) } addToTab ( Leak , analysisDurationMs , heapAnalysis . analysisDurationMillis ) } private fun MetaData . addLeak ( leak : Leak ) { addToTab ( Leak , libraryLeak , leak is LibraryLeak ) if ( leak is LibraryLeak ) { addToTab ( Leak , libraryLeakPattern , leak . pattern . toString ()) addToTab ( Leak , libraryLeakDescription , leak . description ) } } private fun MetaData . addLeakTrace ( leakTrace : LeakTrace ) { addToTab ( Leak , retainedHeapByteSize , leakTrace . retainedHeapByteSize ) addToTab ( Leak , signature , leakTrace . signature ) addToTab ( Leak , leakTrace , leakTrace . toString ()) } class FakeReportingException ( message : String ) : RuntimeException ( message ) companion object { private const val BUGSNAG_API_KEY = YOUR_BUGSNAG_API_KEY private const val DO_NOT_ENABLE_EXCEPTION_HANDLER = false } } Set LeakCanary.config.onHeapAnalyzedListener to BugsnagLeakUploader : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = BugsnagLeakUploader ( applicationContext = this ) ) } } You should start seeing leaks reported into Bugsnag, grouped by their leak signature: The LEAK tab contains the leak trace: Matching known library leaks Set LeakCanary.Config.referenceMatchers to a list that builds on top of AndroidReferenceMatchers.appDefaults : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( className = com.samsing.SomeSingleton , fieldName = sContext , description = SomeSingleton has a static field leaking a context. , patternApplies = { manufacturer == Samsing sdkInt == 26 } ) ) } } Ignoring specific activities or fragment classes Sometimes a 3 rd party library provides its own activities or fragments which contain a number of bugs leading to leaks of those specific 3 rd party activities and fragments. You should push hard on that library to fix their memory leaks as it s directly impacting your application. That being said, until those are fixed, you have two options: Add the specific leaks as known library leaks (see Matching known library leaks ). LeakCanary will run when those leaks are detected and then report them as known library leaks. Disable LeakCanary automatic activity or fragment watching (e.g. AppWatcher.config = AppWatcher.config.copy(watchActivities = false) ) and then manually pass objects to AppWatcher.objectWatcher.watch . Identifying leaking objects and labeling objects class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val addEntityIdLabel = ObjectInspector { reporter - reporter . whenInstanceOf ( com.example.DbEntity ) { instance - val databaseIdField = instance [ com.example.DbEntity , databaseId ] !! val databaseId = databaseIdField . value . asInt !! labels += DbEntity.databaseId = $databaseId } } val singletonsInspector = AppSingletonInspector ( com.example.MySingleton , com.example.OtherSingleton ) val mmvmInspector = ObjectInspector { reporter - reporter . whenInstanceOf ( com.mmvm.SomeViewModel ) { instance - val destroyedField = instance [ com.mmvm.SomeViewModel , destroyed ] !! if ( destroyedField . value . asBoolean !! ) { leakingReasons += SomeViewModel.destroyed is true } else { notLeakingReasons += SomeViewModel.destroyed is false } } } LeakCanary . config = LeakCanary . config . copy ( objectInspectors = AndroidObjectInspectors . appDefaults + listOf ( addObjectIdLabel , singletonsInspector , mmvmInspector ) ) } } Running the LeakCanary analysis in a separate process LeakCanary runs in your main app process. LeakCanary 2 is optimized to keep memory usage low while analysing and runs in a background thread with priority Process.THREAD_PRIORITY_BACKGROUND . If you find that LeakCanary is still using too much memory or impacting the app process performance, you can configure it to run the analysis in a separate process. All you have to do is replace the leakcanary-android depedency with leakcanary-android-process : dependencies { // debugImplementation com.squareup.leakcanary:leakcanary-android:${version} debugImplementation com.squareup.leakcanary:leakcanary-android-process:${version} } You can call LeakCanaryProcess.isInAnalyzerProcess to check if your Application class is being created in the LeakCanary process. This is useful when configuring libraries like Firebase that may crash when running in an unexpected process. Setting up LeakCanary for different product flavors You can setup LeakCanary to run in a specific product flavors of your app. For example, create: android { flavorDimensions default productFlavors { prod { // ... } qa { // ... } dev { // ... } } } Then, define a custom configuration for the flavor for which you want to enable LeakCanary: android { // ... } configurations { devDebugImplementation {} } You can now add the LeakCanary dependency for that configuration: dependencies { devDebugImplementation com.squareup.leakcanary:leakcanary-android:${version} } Extracting metadata from the heap dump LeakCanary.Config.metadataExtractor extracts metadata from a heap dump. The metadata is then available in HeapAnalysisSuccess.metadata . LeakCanary.Config.metadataExtractor defaults to AndroidMetadataExtractor but you can replace it to extract additional metadata from the hprof. For example, if you want to include the app version name in your heap analysis reports, you need to first store it in memory (e.g. in a static field) and then you can retrieve it in MetadataExtractor . class DebugExampleApplication : ExampleApplication () { companion object { @JvmStatic lateinit var savedVersionName : String } override fun onCreate () { super . onCreate () val packageInfo = packageManager . getPackageInfo ( packageName , 0 ) savedVersionName = packageInfo . versionName LeakCanary . config = LeakCanary . config . copy ( metadataExtractor = MetadataExtractor { graph - val companionClass = graph . findClassByName ( com.example.DebugExampleApplication ) !! val versionNameField = companionClass [ savedVersionName ] !! val versionName = versionNameField . valueAsInstance !! . readAsJavaString () !! val defaultMetadata = AndroidMetadataExtractor . extractMetadata ( graph ) mapOf ( App Version Name to versionName ) + defaultMetadata }) } } Using LeakCanary with obfuscated apps If obfuscation is turned on then leak traces will be obfuscated. It s possible to automatically deobfuscate leak traces by using a deobfuscation gradle plugin provided by LeakCanary. You have to add a plugin dependency in your root build.gradle file: buildscript { dependencies { classpath com.squareup.leakcanary:leakcanary-deobfuscation-gradle-plugin:${version} } } And then you need to apply and configure the plugin in your app (or library) specific build.gradle file: apply plugin: com.android.application // LeakCanary plugin should be added after android application or android library plugin apply plugin: com.squareup.leakcanary.deobfuscation leakCanary { // LeakCanary needs to know which variants have obfuscation turned on filterObfuscatedVariants { variant - variant . name == debug } } And that s all. Now you can run LeakCanary on an obfuscated app and leak traces will be automatically deobfuscated. Important: never use this plugin on a variant that you release for production. This plugin copies obfuscation mapping file and puts it inside the .apk, so if you use it on production build then the obfuscation becomes pointless because the code can be easily deobfuscated using mapping file. Detecting leaks in JVM applications While LeakCanary was designed to work out of the box on Android, it can run on any JVM with a bit of configuration. Add the ObjectWatcher and Shark dependencies to your build file: dependencies { implementation com.squareup.leakcanary:leakcanary-object-watcher:2.2 implementation com.squareup.leakcanary:shark:2.2 } Define a HotSpotHeapDumper to dump the heap: import com.sun.management.HotSpotDiagnosticMXBean import java.lang.management.ManagementFactory object HotSpotHeapDumper { private val mBean : HotSpotDiagnosticMXBean by lazy { val server = ManagementFactory . getPlatformMBeanServer () ManagementFactory . newPlatformMXBeanProxy ( server , com.sun.management:type=HotSpotDiagnostic , HotSpotDiagnosticMXBean :: class . java ) } fun dumpHeap ( fileName : String ) { mBean . dumpHeap ( fileName , LIVE ) } private const val LIVE = true } Define a JvmHeapAnalyzer to analyze the heap when objects are retained and print the result to the console: import leakcanary.GcTrigger import leakcanary.ObjectWatcher import leakcanary.OnObjectRetainedListener import java.io.File import java.text.SimpleDateFormat import java.util.Date import java.util.Locale.US class JvmHeapAnalyzer ( private val objectWatcher : ObjectWatcher ) : OnObjectRetainedListener { private val fileNameFormat = SimpleDateFormat ( DATE_PATTERN , US ) override fun onObjectRetained () { GcTrigger . Default . runGc () if ( objectWatcher . retainedObjectCount == 0 ) { return } val fileName = fileNameFormat . format ( Date ()) val hprofFile = File ( fileName ) println ( Dumping the heap to ${hprofFile.absolutePath} ) HotSpotHeapDumper . dumpHeap ( hprofFile . absolutePath ) val analyzer = HeapAnalyzer ( OnAnalysisProgressListener { step - println ( Analysis in progress, working on: ${step.name} ) }) val heapDumpAnalysis = analyzer . analyze ( heapDumpFile = hprofFile , leakingObjectFinder = KeyedWeakReferenceFinder , computeRetainedHeapSize = true , objectInspectors = ObjectInspectors . jdkDefaults ) println ( heapDumpAnalysis ) } companion object { private const val DATE_PATTERN = yyyy-MM-dd_HH-mm-ss_SSS .hprof } } Create an ObjectWatcher instance and configure it to watch objects for 5 seconds before notifying a JvmHeapAnalyzer instance: val scheduledExecutor = Executors . newSingleThreadScheduledExecutor () val objectWatcher = ObjectWatcher ( clock = Clock { System . currentTimeMillis () }, checkRetainedExecutor = Executor { command - scheduledExecutor . schedule ( command , 5 , SECONDS ) } ) val heapAnalyzer = JvmHeapAnalyzer ( objectWatcher ) objectWatcher . addOnObjectRetainedListener ( heapAnalyzer ) Pass objects that you expect to be garbage collected (e.g. closed resources) to the ObjectWatcher instance: objectWatcher . watch ( watchedObject = closedResource , description = $closedResource is closed and should be garbage collected ) If you end up using LeakCanary on a JVM, the community will definitely benefit from you experience, so don t hesitate to let us know !","title":"Code recipes"},{"location":"recipes/#code-recipes","text":"Bug If you think a recipe might be missing or you re not sure that what you re trying to achieve is possible with the current APIs, please file an issue . Your feedback help us make LeakCanary better for the entire community.","title":"Code Recipes"},{"location":"recipes/#watching-objects-with-a-lifecycle","text":"In your application, you may have other objects with a lifecycle, such as fragments, services, Dagger components, etc. Use AppWatcher.objectWatcher to watch instances that should be garbage collected: class MyService : Service { // ... override fun onDestroy () { super . onDestroy () AppWatcher . objectWatcher . watch ( this , MyService received Service#onDestroy() callback ) } }","title":"Watching objects with a lifecycle"},{"location":"recipes/#configuration","text":"LeakCanary has a default configuration that should work well for most apps. You can also customize it to your needs. The LeakCanary configuration is held by two singleton objects ( AppWatcher and LeakCanary ) and can be updated at any time. Most developers configure LeakCanary in their debug Application class: class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } Info You can create a debug application class in your src/debug/java folder. Don t forget to also register it in src/debug/AndroidManifest.xml . To customize the detection of retained objects at runtime, update AppWatcher.config : AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false) In Java, you can use AppWatcher.Config.Builder instead: AppWatcher.Config config = AppWatcher.getConfig().newBuilder() .watchFragmentViews(false) .build(); AppWatcher.setConfig(config); To customize the heap dumping analysis, update LeakCanary.config : LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) In Java, you can use LeakCanary.Config.Builder instead: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .build(); LeakCanary.setConfig(config); The LeakCanary UI can be configured by overriding the following resources: mipmap/leak_canary_icon see Icon and label string/leak_canary_display_activity_label see Icon and label bool/leak_canary_add_dynamic_shortcut see Disabling LeakCanary bool/leak_canary_add_launcher_icon see Disabling LeakCanary layout/leak_canary_heap_dump_toast the layout for the toast shown when the heap is dumped","title":"Configuration"},{"location":"recipes/#disabling-leakcanary","text":"Sometimes it s necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you re trying to achieve: Create a build variant that does not include the LeakCanary dependencies, see Setting up LeakCanary for different product flavors . Disable the tracking of retained objects: AppWatcher.config = AppWatcher.config.copy(enabled = false) . Disable the heap dumping analysis: LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . Hide the leak display activity launcher icon: override R.bool.leak_canary_add_launcher_icon or call LeakCanary.showLeakDisplayActivityLauncherIcon(false) Info When you set AppWatcher.config.enabled to false, AppWatcher.objectWatcher will stop creating weak references to destroyed objects. If instead you set LeakCanary.Config.dumpHeap to false, AppWatcher.objectWatcher will still keep track of retained objects, and LeakCanary will look for these objects when you change LeakCanary.Config.dumpHeap back to true.","title":"Disabling LeakCanary"},{"location":"recipes/#counting-retained-instances-in-production","text":"The com.squareup.leakcanary:leakcanary-android dependency should only be used in debug builds. It depends on com.squareup.leakcanary:leakcanary-object-watcher-android which you can use in production to track and count retained instances. In your build.gradle : dependencies { implementation com.squareup.leakcanary:leakcanary-object-watcher-android:2.0-beta-5 } In your leak reporting code: val retainedInstanceCount = AppWatcher . objectWatcher . retainedObjectCount","title":"Counting retained instances in production"},{"location":"recipes/#running-leakcanary-in-instrumentation-tests","text":"Running leak detection in UI tests means you can detect memory leaks automatically in Continuous Integration prior to those leaks being merged into the codebase. However, as LeakCanary runs with a 5 seconds delay and freezes the VM to take a heap dump, this can introduce flakiness to the UI tests. Therefore it is automatically disabled by setting LeakCanary.config.dumpHeap to false when JUnit is on the runtime classpath. LeakCanary provides an artifact dedicated to detecting leaks in UI tests which provides a run listener that waits for the end of a test, and if the test succeeds then it look for retained objects, trigger a heap dump if needed and perform an analysis. To set it up, add the leakcanary-android-instrumentation dependency to your instrumentation tests: androidTestImplementation com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion} Add the dedicated run listener to defaultConfig in your build.gradle : android { defaultConfig { // ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner testInstrumentationRunnerArgument listener , leakcanary.FailTestOnLeakRunListener } } Run the instrumentation tests: ./gradlew leakcanary-android-sample:connectedCheck You can extend FailTestOnLeakRunListener to customize the behavior.","title":"Running LeakCanary in instrumentation tests"},{"location":"recipes/#android-tv","text":"LeakCanary works on Android TV devices (FireTV, Nexus player, Nvidia Shield, MiBox, etc.) without any additional setup. However, there are couple things you need to be aware of: Android TV doesn t have notifications. LeakCanary will display Toast messages when objects become retained and when leak analysis completes. You can also check Logcat for more details. Due to lack of notifications, the only way to manually trigger a heap dump is to background the app. There s a bug on API 26+ devices that prevents the activity that displays leaks from appearing in apps list. As a workaround, LeakCanary prints an adb shell command in Logcat after heap dump analysis that launches leak list activity: adb shell am start -n com.your.package.name/leakcanary.internal.activity.LeakLauncherActivity Some Android TV devices have very little memory available per app process and this might impact LeakCanary. Running the LeakCanary analysis in a separate process might help in such cases.","title":"Android TV"},{"location":"recipes/#icon-and-label","text":"The activity that displays leaks comes with a default icon and label, which you can change by providing R.mipmap.leak_canary_icon and R.string.leak_canary_display_activity_label in your app: res/ mipmap-hdpi/ leak_canary_icon.png mipmap-mdpi/ leak_canary_icon.png mipmap-xhdpi/ leak_canary_icon.png mipmap-xxhdpi/ leak_canary_icon.png mipmap-xxxhdpi/ leak_canary_icon.png mipmap-anydpi-v26/ leak_canary_icon.xml ?xml version= 1.0 encoding= utf-8 ? resources string name= leak_canary_display_activity_label MyLeaks /string /resources","title":"Icon and label"},{"location":"recipes/#uploading-to-a-server","text":"You can change the default behavior to upload the analysis result to a server of your choosing. Create a custom OnHeapAnalyzedListener that delegates to DefaultOnHeapAnalyzedListener : class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( Upload heap analysis to server ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } Set LeakCanary.config.onHeapAnalyzedListener : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader ()) } }","title":"Uploading to a server"},{"location":"recipes/#uploading-to-bugsnag","text":"A leak trace has a lot in common with a stack trace, so if you lack the engineering resources to build a backend for LeakCanary, you can instead upload leak traces to a crash reporting backend. The client needs to support grouping via custom client-side hashing as well as custom metadata with support for newlines. Info As of this writing, the only known library suitable for uploading leaks is the Bugsnag client. If you managed to make it work with another library, please file an issue . Create a Bugsnag account , create a new project for leak reporting and grab an API key . Make sure the app has the android.permission.INTERNET permission then add the latest version of the Bugsnag Android client library to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation com.squareup.leakcanary:leakcanary-android:2.2 debugImplementation com.bugsnag:bugsnag-android:$bugsnagVersion } Info If you re only using Bugsnag for uploading leaks, then you do not need to set up the Bugsnag Gradle plugin or to configure the API key in your app manifest. Create a new BugsnagLeakUploader : import android.app.Application import com.bugsnag.android.Client import com.bugsnag.android.MetaData import leakcanary.DefaultOnHeapAnalyzedListener import leakcanary.OnHeapAnalyzedListener import shark.HeapAnalysis import shark.HeapAnalysisFailure import shark.HeapAnalysisSuccess import shark.Leak import shark.LeakTrace import shark.LibraryLeak class BugsnagLeakUploader ( applicationContext : Application ) : OnHeapAnalyzedListener { private val defaultLeakListener = DefaultOnHeapAnalyzedListener . create () private val bugsnagClient : Client init { bugsnagClient = Client ( applicationContext , BUGSNAG_API_KEY , DO_NOT_ENABLE_EXCEPTION_HANDLER ) bugsnagClient . setSendThreads ( false ) } override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { // Delegate to default behavior (notification and saving result) defaultLeakListener . onHeapAnalyzed ( heapAnalysis ) when ( heapAnalysis ) { is HeapAnalysisSuccess - { val allLeakTraces = heapAnalysis . allLeaks . toList () . flatMap { leak - leak . leakTraces . map { leakTrace - leak to leakTrace } } allLeakTraces . forEach { ( leak , leakTrace ) - val exception = FakeReportingException ( leak . shortDescription ) bugsnagClient . notify ( exception ) { report - val bugsnagMetaData = report . error . metaData bugsnagMetaData . addHeapAnalysis ( heapAnalysis ) bugsnagMetaData . addLeak ( leak ) bugsnagMetaData . addLeakTrace ( leakTrace ) report . error . groupingHash = leak . signature } } } is HeapAnalysisFailure - { // Please file any reported failure to // https://github.com/square/leakcanary/issues bugsnagClient . notify ( heapAnalysis . exception ) } } } private fun MetaData . addHeapAnalysis ( heapAnalysis : HeapAnalysisSuccess ) { addToTab ( Leak , heapDumpPath , heapAnalysis . heapDumpFile . absolutePath ) heapAnalysis . metadata . forEach { ( key , value ) - addToTab ( Leak , key , value ) } addToTab ( Leak , analysisDurationMs , heapAnalysis . analysisDurationMillis ) } private fun MetaData . addLeak ( leak : Leak ) { addToTab ( Leak , libraryLeak , leak is LibraryLeak ) if ( leak is LibraryLeak ) { addToTab ( Leak , libraryLeakPattern , leak . pattern . toString ()) addToTab ( Leak , libraryLeakDescription , leak . description ) } } private fun MetaData . addLeakTrace ( leakTrace : LeakTrace ) { addToTab ( Leak , retainedHeapByteSize , leakTrace . retainedHeapByteSize ) addToTab ( Leak , signature , leakTrace . signature ) addToTab ( Leak , leakTrace , leakTrace . toString ()) } class FakeReportingException ( message : String ) : RuntimeException ( message ) companion object { private const val BUGSNAG_API_KEY = YOUR_BUGSNAG_API_KEY private const val DO_NOT_ENABLE_EXCEPTION_HANDLER = false } } Set LeakCanary.config.onHeapAnalyzedListener to BugsnagLeakUploader : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = BugsnagLeakUploader ( applicationContext = this ) ) } } You should start seeing leaks reported into Bugsnag, grouped by their leak signature: The LEAK tab contains the leak trace:","title":"Uploading to Bugsnag"},{"location":"recipes/#matching-known-library-leaks","text":"Set LeakCanary.Config.referenceMatchers to a list that builds on top of AndroidReferenceMatchers.appDefaults : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( className = com.samsing.SomeSingleton , fieldName = sContext , description = SomeSingleton has a static field leaking a context. , patternApplies = { manufacturer == Samsing sdkInt == 26 } ) ) } }","title":"Matching known library leaks"},{"location":"recipes/#ignoring-specific-activities-or-fragment-classes","text":"Sometimes a 3 rd party library provides its own activities or fragments which contain a number of bugs leading to leaks of those specific 3 rd party activities and fragments. You should push hard on that library to fix their memory leaks as it s directly impacting your application. That being said, until those are fixed, you have two options: Add the specific leaks as known library leaks (see Matching known library leaks ). LeakCanary will run when those leaks are detected and then report them as known library leaks. Disable LeakCanary automatic activity or fragment watching (e.g. AppWatcher.config = AppWatcher.config.copy(watchActivities = false) ) and then manually pass objects to AppWatcher.objectWatcher.watch .","title":"Ignoring specific activities or fragment classes"},{"location":"recipes/#identifying-leaking-objects-and-labeling-objects","text":"class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val addEntityIdLabel = ObjectInspector { reporter - reporter . whenInstanceOf ( com.example.DbEntity ) { instance - val databaseIdField = instance [ com.example.DbEntity , databaseId ] !! val databaseId = databaseIdField . value . asInt !! labels += DbEntity.databaseId = $databaseId } } val singletonsInspector = AppSingletonInspector ( com.example.MySingleton , com.example.OtherSingleton ) val mmvmInspector = ObjectInspector { reporter - reporter . whenInstanceOf ( com.mmvm.SomeViewModel ) { instance - val destroyedField = instance [ com.mmvm.SomeViewModel , destroyed ] !! if ( destroyedField . value . asBoolean !! ) { leakingReasons += SomeViewModel.destroyed is true } else { notLeakingReasons += SomeViewModel.destroyed is false } } } LeakCanary . config = LeakCanary . config . copy ( objectInspectors = AndroidObjectInspectors . appDefaults + listOf ( addObjectIdLabel , singletonsInspector , mmvmInspector ) ) } }","title":"Identifying leaking objects and labeling objects"},{"location":"recipes/#running-the-leakcanary-analysis-in-a-separate-process","text":"LeakCanary runs in your main app process. LeakCanary 2 is optimized to keep memory usage low while analysing and runs in a background thread with priority Process.THREAD_PRIORITY_BACKGROUND . If you find that LeakCanary is still using too much memory or impacting the app process performance, you can configure it to run the analysis in a separate process. All you have to do is replace the leakcanary-android depedency with leakcanary-android-process : dependencies { // debugImplementation com.squareup.leakcanary:leakcanary-android:${version} debugImplementation com.squareup.leakcanary:leakcanary-android-process:${version} } You can call LeakCanaryProcess.isInAnalyzerProcess to check if your Application class is being created in the LeakCanary process. This is useful when configuring libraries like Firebase that may crash when running in an unexpected process.","title":"Running the LeakCanary analysis in a separate process"},{"location":"recipes/#setting-up-leakcanary-for-different-product-flavors","text":"You can setup LeakCanary to run in a specific product flavors of your app. For example, create: android { flavorDimensions default productFlavors { prod { // ... } qa { // ... } dev { // ... } } } Then, define a custom configuration for the flavor for which you want to enable LeakCanary: android { // ... } configurations { devDebugImplementation {} } You can now add the LeakCanary dependency for that configuration: dependencies { devDebugImplementation com.squareup.leakcanary:leakcanary-android:${version} }","title":"Setting up LeakCanary for different product flavors"},{"location":"recipes/#extracting-metadata-from-the-heap-dump","text":"LeakCanary.Config.metadataExtractor extracts metadata from a heap dump. The metadata is then available in HeapAnalysisSuccess.metadata . LeakCanary.Config.metadataExtractor defaults to AndroidMetadataExtractor but you can replace it to extract additional metadata from the hprof. For example, if you want to include the app version name in your heap analysis reports, you need to first store it in memory (e.g. in a static field) and then you can retrieve it in MetadataExtractor . class DebugExampleApplication : ExampleApplication () { companion object { @JvmStatic lateinit var savedVersionName : String } override fun onCreate () { super . onCreate () val packageInfo = packageManager . getPackageInfo ( packageName , 0 ) savedVersionName = packageInfo . versionName LeakCanary . config = LeakCanary . config . copy ( metadataExtractor = MetadataExtractor { graph - val companionClass = graph . findClassByName ( com.example.DebugExampleApplication ) !! val versionNameField = companionClass [ savedVersionName ] !! val versionName = versionNameField . valueAsInstance !! . readAsJavaString () !! val defaultMetadata = AndroidMetadataExtractor . extractMetadata ( graph ) mapOf ( App Version Name to versionName ) + defaultMetadata }) } }","title":"Extracting metadata from the heap dump"},{"location":"recipes/#using-leakcanary-with-obfuscated-apps","text":"If obfuscation is turned on then leak traces will be obfuscated. It s possible to automatically deobfuscate leak traces by using a deobfuscation gradle plugin provided by LeakCanary. You have to add a plugin dependency in your root build.gradle file: buildscript { dependencies { classpath com.squareup.leakcanary:leakcanary-deobfuscation-gradle-plugin:${version} } } And then you need to apply and configure the plugin in your app (or library) specific build.gradle file: apply plugin: com.android.application // LeakCanary plugin should be added after android application or android library plugin apply plugin: com.squareup.leakcanary.deobfuscation leakCanary { // LeakCanary needs to know which variants have obfuscation turned on filterObfuscatedVariants { variant - variant . name == debug } } And that s all. Now you can run LeakCanary on an obfuscated app and leak traces will be automatically deobfuscated. Important: never use this plugin on a variant that you release for production. This plugin copies obfuscation mapping file and puts it inside the .apk, so if you use it on production build then the obfuscation becomes pointless because the code can be easily deobfuscated using mapping file.","title":"Using LeakCanary with obfuscated apps"},{"location":"recipes/#detecting-leaks-in-jvm-applications","text":"While LeakCanary was designed to work out of the box on Android, it can run on any JVM with a bit of configuration. Add the ObjectWatcher and Shark dependencies to your build file: dependencies { implementation com.squareup.leakcanary:leakcanary-object-watcher:2.2 implementation com.squareup.leakcanary:shark:2.2 } Define a HotSpotHeapDumper to dump the heap: import com.sun.management.HotSpotDiagnosticMXBean import java.lang.management.ManagementFactory object HotSpotHeapDumper { private val mBean : HotSpotDiagnosticMXBean by lazy { val server = ManagementFactory . getPlatformMBeanServer () ManagementFactory . newPlatformMXBeanProxy ( server , com.sun.management:type=HotSpotDiagnostic , HotSpotDiagnosticMXBean :: class . java ) } fun dumpHeap ( fileName : String ) { mBean . dumpHeap ( fileName , LIVE ) } private const val LIVE = true } Define a JvmHeapAnalyzer to analyze the heap when objects are retained and print the result to the console: import leakcanary.GcTrigger import leakcanary.ObjectWatcher import leakcanary.OnObjectRetainedListener import java.io.File import java.text.SimpleDateFormat import java.util.Date import java.util.Locale.US class JvmHeapAnalyzer ( private val objectWatcher : ObjectWatcher ) : OnObjectRetainedListener { private val fileNameFormat = SimpleDateFormat ( DATE_PATTERN , US ) override fun onObjectRetained () { GcTrigger . Default . runGc () if ( objectWatcher . retainedObjectCount == 0 ) { return } val fileName = fileNameFormat . format ( Date ()) val hprofFile = File ( fileName ) println ( Dumping the heap to ${hprofFile.absolutePath} ) HotSpotHeapDumper . dumpHeap ( hprofFile . absolutePath ) val analyzer = HeapAnalyzer ( OnAnalysisProgressListener { step - println ( Analysis in progress, working on: ${step.name} ) }) val heapDumpAnalysis = analyzer . analyze ( heapDumpFile = hprofFile , leakingObjectFinder = KeyedWeakReferenceFinder , computeRetainedHeapSize = true , objectInspectors = ObjectInspectors . jdkDefaults ) println ( heapDumpAnalysis ) } companion object { private const val DATE_PATTERN = yyyy-MM-dd_HH-mm-ss_SSS .hprof } } Create an ObjectWatcher instance and configure it to watch objects for 5 seconds before notifying a JvmHeapAnalyzer instance: val scheduledExecutor = Executors . newSingleThreadScheduledExecutor () val objectWatcher = ObjectWatcher ( clock = Clock { System . currentTimeMillis () }, checkRetainedExecutor = Executor { command - scheduledExecutor . schedule ( command , 5 , SECONDS ) } ) val heapAnalyzer = JvmHeapAnalyzer ( objectWatcher ) objectWatcher . addOnObjectRetainedListener ( heapAnalyzer ) Pass objects that you expect to be garbage collected (e.g. closed resources) to the ObjectWatcher instance: objectWatcher . watch ( watchedObject = closedResource , description = $closedResource is closed and should be garbage collected ) If you end up using LeakCanary on a JVM, the community will definitely benefit from you experience, so don t hesitate to let us know !","title":"Detecting leaks in JVM applications"},{"location":"recorded-presentations/","text":"Shark: Diving into the guts of LeakCanary s Hprof parser LeakCanary 2: Leaner, Better, Faster, Kotliner! LeakCanary, then what? Nuking Nasty Memory Leaks Memory Leak Hunt , a live investigation. Installing LeakCanary (LeakCanary 1.5) How to use LeakCanary Your presentation should be here, please update this list! Any technical level welcome.","title":"Recorded Presentations"},{"location":"releasing/","text":"Releasing LeakCanary Create a local release branch from master git checkout master git pull git checkout -b release_2.3 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME = 2.3 Update the current version and next version in mkdocs.yml : extra: leak_canary: release: 2.3 next_release: REPLACE_WITH_NEXT_VERSION_NUMBER Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v2.2...master Take one last look git diff Commit all local changes git commit -am Prepare 2.3 release Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v2.3 git push origin v2.3 Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff release_2.3 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME = REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT Commit your changes git commit -am Prepare for next development iteration Push your changes git push Go to Milestones , close the corresponding milestones and create a new milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v2.3) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing"},{"location":"releasing/#releasing-leakcanary","text":"Create a local release branch from master git checkout master git pull git checkout -b release_2.3 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME = 2.3 Update the current version and next version in mkdocs.yml : extra: leak_canary: release: 2.3 next_release: REPLACE_WITH_NEXT_VERSION_NUMBER Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v2.2...master Take one last look git diff Commit all local changes git commit -am Prepare 2.3 release Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v2.3 git push origin v2.3 Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff release_2.3 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME = REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT Commit your changes git commit -am Prepare for next development iteration Push your changes git push Go to Milestones , close the corresponding milestones and create a new milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v2.3) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing LeakCanary"},{"location":"shark/","text":"Shark \ud83e\udd88 Shark : S m a r t H e a p A n a l y s i s R e p o r t s f o r K o t l i n Shark is the heap analyzer that powers LeakCanary 2. It s a Kotlin standalone heap analysis library that runs at high speed with a low memory footprint . Shark is released in layers: Shark Hprof : Read and write records in hprof files. Shark Graph : Navigate the heap object graph. Shark : Generate heap analysis reports. Shark Android : Android heuristics to generate tailored heap analysis reports. Shark CLI : Analyze the heap of debuggable apps installed on an Android device connected to your desktop. The output is similar to the output of LeakCanary, except you don t have to add the LeakCanary dependency to your app. LeakCanary : Builds on top. It automatically watches destroyed activities and fragments, triggers a heap dump, runs Shark Android and then displays the result. A few more things: Shark is built on top of Okio. Okio makes it easy to parse heap dumps efficiently. Shark is a 100% Kotlin library, and Kotlin is essential to its design, because Shark relies heavily on sealed classes and sequences to save memory. Shark has the unique ability to help narrow down the cause of memory leaks through platform specific heuristics . Shark is heavily tested (80% test coverage). Shark can run in both Java and Android VMs, with no other dependency than Okio and Kotlin. Shark can analyze both Java and Android VM hprof files. Shark can deobfuscate hprof records if it has access to obfuscation mapping file. Shark CLI The Shark Command Line Interface (CLI) enables you to analyze heaps directly from your computer. It can dump the heap of an app installed on a connected Android device, analyze it, and even strip a heap dump of any sensitive data (e.g. PII, passwords or encryption keys) which is useful when sharing a heap dump. Download it here ! Usage instructions: $ ./bin/shark-cli Usage: shark-cli [OPTIONS] COMMAND [ARGS]... ^`. .= =. ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / `~~~--__ \\ /\\ / { \\___----~~ `~~-_/ -=\\/=- \\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / . . ._. _|`~~`|_ /|\\ /|\\ Options: -h, --help Show this message and exit Commands: analyze-process Dumps the heap for the provided partial PROCESS_NAME, pulls the hprof file and analyzes it. (Usage: shark-cli analyze-process [--device ID --obfuscation-mapping PATH] PROCESS_NAME) dump-process Dumps the heap for the provided partial PROCESS_NAME and pulls the hprof file. (Usage: shark-cli dump-process [--device ID] PROCESS_NAME) analyze-hprof Analyzes the provided HPROF_FILE_PATH. (Usage: shark-cli analyze-hprof [--obfuscation-mapping PATH] HPROF_FILE_PATH) strip-hprof Replaces all primitive arrays from the provided HPROF_FILE_PATH with arrays of zeroes and generates a new -stripped.hprof file. (Usage: shark-cli strip-hprof HPROF_FILE_PATH) Shark code examples Reading records in a hprof file dependencies { implementation com.squareup.leakcanary:shark-hprof:$sharkVersion } // Prints all class and field names Hprof . open ( heapDumpFile ) . use { hprof - hprof . reader . readHprofRecords ( recordTypes = setOf ( StringRecord :: class ), listener = OnHprofRecordListener { position , record - println (( record as StringRecord ). string ) }) } Navigating the heap object graph dependencies { implementation com.squareup.leakcanary:shark-graph:$sharkVersion } // Prints all thread names Hprof . open ( heapDumpFile ) . use { hprof - val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val threadClass = heapGraph . findClassByName ( java.lang.Thread ) !! val threadNames : Sequence String = threadClass . instances . map { instance - val nameField = instance [ java.lang.Thread , name ] !! nameField . value . readAsJavaString () !! } threadNames . forEach { println ( it ) } } Generating a heap analysis report dependencies { implementation com.squareup.leakcanary:shark:$sharkVersion } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , leakFinders = listOf ( ObjectInspector { _ , reporter - reporter . whenInstanceOf ( com.example.ThingWithLifecycle ) { instance - val field = instance [ com.example.ThingWithLifecycle , destroyed ] !! val destroyed = field . value . asBoolean !! if ( destroyed ) { leakingReasons += ThingWithLifecycle.destroyed = true } } }) ) println ( analysis ) Generating an Android heap analysis report dependencies { implementation com.squareup.leakcanary:shark-android:$sharkVersion } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , referenceMatchers = AndroidReferenceMatchers . appDefaults , objectInspectors = AndroidObjectInspectors . appDefaults ) println ( analysis )","title":"Overview"},{"location":"shark/#shark","text":"Shark : S m a r t H e a p A n a l y s i s R e p o r t s f o r K o t l i n Shark is the heap analyzer that powers LeakCanary 2. It s a Kotlin standalone heap analysis library that runs at high speed with a low memory footprint . Shark is released in layers: Shark Hprof : Read and write records in hprof files. Shark Graph : Navigate the heap object graph. Shark : Generate heap analysis reports. Shark Android : Android heuristics to generate tailored heap analysis reports. Shark CLI : Analyze the heap of debuggable apps installed on an Android device connected to your desktop. The output is similar to the output of LeakCanary, except you don t have to add the LeakCanary dependency to your app. LeakCanary : Builds on top. It automatically watches destroyed activities and fragments, triggers a heap dump, runs Shark Android and then displays the result. A few more things: Shark is built on top of Okio. Okio makes it easy to parse heap dumps efficiently. Shark is a 100% Kotlin library, and Kotlin is essential to its design, because Shark relies heavily on sealed classes and sequences to save memory. Shark has the unique ability to help narrow down the cause of memory leaks through platform specific heuristics . Shark is heavily tested (80% test coverage). Shark can run in both Java and Android VMs, with no other dependency than Okio and Kotlin. Shark can analyze both Java and Android VM hprof files. Shark can deobfuscate hprof records if it has access to obfuscation mapping file.","title":"Shark \ud83e\udd88"},{"location":"shark/#shark-cli","text":"The Shark Command Line Interface (CLI) enables you to analyze heaps directly from your computer. It can dump the heap of an app installed on a connected Android device, analyze it, and even strip a heap dump of any sensitive data (e.g. PII, passwords or encryption keys) which is useful when sharing a heap dump. Download it here ! Usage instructions: $ ./bin/shark-cli Usage: shark-cli [OPTIONS] COMMAND [ARGS]... ^`. .= =. ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / `~~~--__ \\ /\\ / { \\___----~~ `~~-_/ -=\\/=- \\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / . . ._. _|`~~`|_ /|\\ /|\\ Options: -h, --help Show this message and exit Commands: analyze-process Dumps the heap for the provided partial PROCESS_NAME, pulls the hprof file and analyzes it. (Usage: shark-cli analyze-process [--device ID --obfuscation-mapping PATH] PROCESS_NAME) dump-process Dumps the heap for the provided partial PROCESS_NAME and pulls the hprof file. (Usage: shark-cli dump-process [--device ID] PROCESS_NAME) analyze-hprof Analyzes the provided HPROF_FILE_PATH. (Usage: shark-cli analyze-hprof [--obfuscation-mapping PATH] HPROF_FILE_PATH) strip-hprof Replaces all primitive arrays from the provided HPROF_FILE_PATH with arrays of zeroes and generates a new -stripped.hprof file. (Usage: shark-cli strip-hprof HPROF_FILE_PATH)","title":"Shark CLI"},{"location":"shark/#shark-code-examples","text":"","title":"Shark code examples"},{"location":"shark/#reading-records-in-a-hprof-file","text":"dependencies { implementation com.squareup.leakcanary:shark-hprof:$sharkVersion } // Prints all class and field names Hprof . open ( heapDumpFile ) . use { hprof - hprof . reader . readHprofRecords ( recordTypes = setOf ( StringRecord :: class ), listener = OnHprofRecordListener { position , record - println (( record as StringRecord ). string ) }) }","title":"Reading records in a hprof file"},{"location":"shark/#navigating-the-heap-object-graph","text":"dependencies { implementation com.squareup.leakcanary:shark-graph:$sharkVersion } // Prints all thread names Hprof . open ( heapDumpFile ) . use { hprof - val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val threadClass = heapGraph . findClassByName ( java.lang.Thread ) !! val threadNames : Sequence String = threadClass . instances . map { instance - val nameField = instance [ java.lang.Thread , name ] !! nameField . value . readAsJavaString () !! } threadNames . forEach { println ( it ) } }","title":"Navigating the heap object graph"},{"location":"shark/#generating-a-heap-analysis-report","text":"dependencies { implementation com.squareup.leakcanary:shark:$sharkVersion } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , leakFinders = listOf ( ObjectInspector { _ , reporter - reporter . whenInstanceOf ( com.example.ThingWithLifecycle ) { instance - val field = instance [ com.example.ThingWithLifecycle , destroyed ] !! val destroyed = field . value . asBoolean !! if ( destroyed ) { leakingReasons += ThingWithLifecycle.destroyed = true } } }) ) println ( analysis )","title":"Generating a heap analysis report"},{"location":"shark/#generating-an-android-heap-analysis-report","text":"dependencies { implementation com.squareup.leakcanary:shark-android:$sharkVersion } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , referenceMatchers = AndroidReferenceMatchers . appDefaults , objectInspectors = AndroidObjectInspectors . appDefaults ) println ( analysis )","title":"Generating an Android heap analysis report"},{"location":"support/","text":"LeakCanary Support If you re looking for help with LeakCanary: Learn the Fundamentals Try the code recipes Read the FAQ Watch recorded presentations Read blog articles Ask a question on StackOverflow","title":"Support"},{"location":"support/#leakcanary-support","text":"If you re looking for help with LeakCanary: Learn the Fundamentals Try the code recipes Read the FAQ Watch recorded presentations Read blog articles Ask a question on StackOverflow","title":"LeakCanary Support"},{"location":"upgrading-to-leakcanary-2.0/","text":"LeakCanary 2 is a major rewrite. High level changes: New heap analyzer, reimplemented from scratch to use 10 times less memory ( see Shark ). APIs updated to simplify configuration and provide access to the new heap analyzer. Internals rewritten to 100% Kotlin. Multiple leaks detected in one analysis, grouped per leak type Dependencies Before dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:1.6.3 releaseImplementation com.squareup.leakcanary:leakcanary-android-no-op:1.6.3 // Optional, if you use support library fragments: debugImplementation com.squareup.leakcanary:leakcanary-support-fragment:1.6.3 } Now dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:2.2 } Worth noting The leakcanary-android-no-op artifact is gone. If you have compile errors, see below. Question : if there s no no-op anymore, how do I ensure none of this runs during release builds? Answer : as long as you add leakcanary-android as debugImplementation , there won t be any code referencing LeakCanary in your release builds. LeakCanary does not depend on the support library anymore, and it doesn t depend on AndroidX either. Detection of AndroidX fragments is automatic if you have the AndroidX fragments dependency. Default setup code Before public class ExampleApplication extends Application { @Override public void onCreate () { super . onCreate (); if ( LeakCanary . isInAnalyzerProcess ( this )) { // This process is dedicated to LeakCanary for heap analysis. // You should not init your app in this process. return ; } LeakCanary . install ( this ); // Normal app init code... } } Now There is no more code for default setup. Worth noting LeakCanary auto installs itself LeakCanary analysis now runs in the main process so there is no need to call LeakCanary.isInAnalyzerProcess() . Retrieve the RefWatcher Before val refWatcher : RefWatcher = LeakCanary . installedRefWatcher () Now val objectWatcher : ObjectWatcher = AppWatcher . objectWatcher Compile errors because RefWatcher is used in release code If you were using RefWatcher in non debug code, you now get a compile error because the no-op artifact is gone. ObjectWatcher now lives in the object-watcher artifact, which is suitable for production. You have two options: Option 1: Add object-watcher-android to release builds. dependencies { implementation com.squareup.leakcanary:leakcanary-object-watcher-android:2.2 } It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to AppWatcher.objectWatcher . It will not trigger heap dumps or anything else that LeakCanary does. It s very little code and should have a no impact on your release app. You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes: val retainedObjectCount = AppWatcher . objectWatcher . retainedObjectCount Option 2: Make your own ObjectWatcher interface // In shared code interface MaybeObjectWatcher { fun watch ( watchedObject : Any , description : String ) object None : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { } } } // In debug code class RealObjectWatcher : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { AppWatcher . objectWatcher . watch ( watchedObject , description ) } } Use MaybeObjectWatcher.None in release code and RealObjectWatcher in debug code. Configuring LeakCanary Before public class DebugExampleApplication extends ExampleApplication { @Override protected void installLeakCanary () { RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . watchActivities ( false ) . buildAndInstall (); } } Now AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing AppWatcher.config : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing LeakCanary.config : disableLeakCanaryButton . setOnClickListener { LeakCanary . config = LeakCanary . config . copy ( dumpHeap = false ) } Running LeakCanary in instrumentation tests Before In your build.gradle file: dependencies { androidTestImplementation com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion} } android { defaultConfig { // ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner testInstrumentationRunnerArgument listener , com.squareup.leakcanary.FailTestOnLeakRunListener } } In your test Application class: public class InstrumentationTestExampleApplication extends DebugExampleApplication { @Override protected void installLeakCanary () { InstrumentationLeakDetector . instrumentationRefWatcher ( this ) . buildAndInstall (); } } Now In your build.gradle file: dependencies { androidTestImplementation com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion} } android { defaultConfig { // ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner testInstrumentationRunnerArgument listener , leakcanary.FailTestOnLeakRunListener } } No code is necessary. Analysis listener / uploading to a server Before public class LeakUploadService extends DisplayLeakService { @Override protected void afterDefaultHandling ( HeapDump heapDump , AnalysisResult result , String leakInfo ) { // TODO Upload result to server } } RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . listenerServiceClass ( LeakUploadService . class ); . buildAndInstall (); ?xml version= 1.0 encoding= utf-8 ? manifest xmlns:android= http://schemas.android.com/apk/res/android xmlns:tools= http://schemas.android.com/tools application android:name= com.example.DebugExampleApplication service android:name= com.example.LeakUploadService / /application /manifest Now class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( Upload heap analysis to server ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader () ) } } Matching known library leaks Before ExcludedRefs excludedRefs = AndroidExcludedRefs . createAppDefaults () . staticField ( com.samsing.SomeSingleton , sContext ) . build (); RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . excludedRefs ( excludedRefs ) . buildAndInstall (); } Now LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( com.samsing.SomeSingleton , sContext ) ) Info There is no equivalent API to ExcludedRefs.Builder.clazz() because it led to abuses. Instead see Ignoring specific activities or fragment classes . Public API packages Before All public APIs were in com.squareup.leakcanary.* Now All public APIs are in leakcanary.*","title":"Upgrading to LeakCanary 2"},{"location":"upgrading-to-leakcanary-2.0/#dependencies","text":"","title":"Dependencies"},{"location":"upgrading-to-leakcanary-2.0/#before","text":"dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:1.6.3 releaseImplementation com.squareup.leakcanary:leakcanary-android-no-op:1.6.3 // Optional, if you use support library fragments: debugImplementation com.squareup.leakcanary:leakcanary-support-fragment:1.6.3 }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now","text":"dependencies { debugImplementation com.squareup.leakcanary:leakcanary-android:2.2 }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting","text":"The leakcanary-android-no-op artifact is gone. If you have compile errors, see below. Question : if there s no no-op anymore, how do I ensure none of this runs during release builds? Answer : as long as you add leakcanary-android as debugImplementation , there won t be any code referencing LeakCanary in your release builds. LeakCanary does not depend on the support library anymore, and it doesn t depend on AndroidX either. Detection of AndroidX fragments is automatic if you have the AndroidX fragments dependency.","title":"Worth noting"},{"location":"upgrading-to-leakcanary-2.0/#default-setup-code","text":"","title":"Default setup code"},{"location":"upgrading-to-leakcanary-2.0/#before_1","text":"public class ExampleApplication extends Application { @Override public void onCreate () { super . onCreate (); if ( LeakCanary . isInAnalyzerProcess ( this )) { // This process is dedicated to LeakCanary for heap analysis. // You should not init your app in this process. return ; } LeakCanary . install ( this ); // Normal app init code... } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_1","text":"There is no more code for default setup.","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting_1","text":"LeakCanary auto installs itself LeakCanary analysis now runs in the main process so there is no need to call LeakCanary.isInAnalyzerProcess() .","title":"Worth noting"},{"location":"upgrading-to-leakcanary-2.0/#retrieve-the-refwatcher","text":"","title":"Retrieve the RefWatcher"},{"location":"upgrading-to-leakcanary-2.0/#before_2","text":"val refWatcher : RefWatcher = LeakCanary . installedRefWatcher ()","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_2","text":"val objectWatcher : ObjectWatcher = AppWatcher . objectWatcher","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#compile-errors-because-refwatcher-is-used-in-release-code","text":"If you were using RefWatcher in non debug code, you now get a compile error because the no-op artifact is gone. ObjectWatcher now lives in the object-watcher artifact, which is suitable for production. You have two options:","title":"Compile errors because RefWatcher is used in release code"},{"location":"upgrading-to-leakcanary-2.0/#option-1-add-object-watcher-android-to-release-builds","text":"dependencies { implementation com.squareup.leakcanary:leakcanary-object-watcher-android:2.2 } It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to AppWatcher.objectWatcher . It will not trigger heap dumps or anything else that LeakCanary does. It s very little code and should have a no impact on your release app. You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes: val retainedObjectCount = AppWatcher . objectWatcher . retainedObjectCount","title":"Option 1: Add object-watcher-android to release builds."},{"location":"upgrading-to-leakcanary-2.0/#option-2-make-your-own-objectwatcher-interface","text":"// In shared code interface MaybeObjectWatcher { fun watch ( watchedObject : Any , description : String ) object None : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { } } } // In debug code class RealObjectWatcher : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { AppWatcher . objectWatcher . watch ( watchedObject , description ) } } Use MaybeObjectWatcher.None in release code and RealObjectWatcher in debug code.","title":"Option 2: Make your own ObjectWatcher interface"},{"location":"upgrading-to-leakcanary-2.0/#configuring-leakcanary","text":"","title":"Configuring LeakCanary"},{"location":"upgrading-to-leakcanary-2.0/#before_3","text":"public class DebugExampleApplication extends ExampleApplication { @Override protected void installLeakCanary () { RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . watchActivities ( false ) . buildAndInstall (); } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_3","text":"AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing AppWatcher.config : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing LeakCanary.config : disableLeakCanaryButton . setOnClickListener { LeakCanary . config = LeakCanary . config . copy ( dumpHeap = false ) }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#running-leakcanary-in-instrumentation-tests","text":"","title":"Running LeakCanary in instrumentation tests"},{"location":"upgrading-to-leakcanary-2.0/#before_4","text":"In your build.gradle file: dependencies { androidTestImplementation com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion} } android { defaultConfig { // ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner testInstrumentationRunnerArgument listener , com.squareup.leakcanary.FailTestOnLeakRunListener } } In your test Application class: public class InstrumentationTestExampleApplication extends DebugExampleApplication { @Override protected void installLeakCanary () { InstrumentationLeakDetector . instrumentationRefWatcher ( this ) . buildAndInstall (); } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_4","text":"In your build.gradle file: dependencies { androidTestImplementation com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion} } android { defaultConfig { // ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner testInstrumentationRunnerArgument listener , leakcanary.FailTestOnLeakRunListener } } No code is necessary.","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#analysis-listener-uploading-to-a-server","text":"","title":"Analysis listener / uploading to a server"},{"location":"upgrading-to-leakcanary-2.0/#before_5","text":"public class LeakUploadService extends DisplayLeakService { @Override protected void afterDefaultHandling ( HeapDump heapDump , AnalysisResult result , String leakInfo ) { // TODO Upload result to server } } RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . listenerServiceClass ( LeakUploadService . class ); . buildAndInstall (); ?xml version= 1.0 encoding= utf-8 ? manifest xmlns:android= http://schemas.android.com/apk/res/android xmlns:tools= http://schemas.android.com/tools application android:name= com.example.DebugExampleApplication service android:name= com.example.LeakUploadService / /application /manifest","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_5","text":"class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( Upload heap analysis to server ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader () ) } }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#matching-known-library-leaks","text":"","title":"Matching known library leaks"},{"location":"upgrading-to-leakcanary-2.0/#before_6","text":"ExcludedRefs excludedRefs = AndroidExcludedRefs . createAppDefaults () . staticField ( com.samsing.SomeSingleton , sContext ) . build (); RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . excludedRefs ( excludedRefs ) . buildAndInstall (); }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_6","text":"LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( com.samsing.SomeSingleton , sContext ) ) Info There is no equivalent API to ExcludedRefs.Builder.clazz() because it led to abuses. Instead see Ignoring specific activities or fragment classes .","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#public-api-packages","text":"","title":"Public API packages"},{"location":"upgrading-to-leakcanary-2.0/#before_7","text":"All public APIs were in com.squareup.leakcanary.*","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_7","text":"All public APIs are in leakcanary.*","title":"Now"},{"location":"api/leakcanary-android-core/","text":"leakcanary-android-core Packages Name Summary leakcanary Index All Types","title":"Home"},{"location":"api/leakcanary-android-core/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-android-core/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-android-core/alltypes/","text":"All Types Name Summary leakcanary.DefaultOnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. leakcanary.LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. leakcanary.OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"Home"},{"location":"api/leakcanary-android-core/alltypes/#all-types","text":"Name Summary leakcanary.DefaultOnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. leakcanary.LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. leakcanary.OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"All Types"},{"location":"api/leakcanary-android-core/leakcanary/","text":"leakcanary-android-core / leakcanary Package leakcanary Types Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. LeakCanary object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. OnHeapAnalyzedListener interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"LeakCanary"},{"location":"api/leakcanary-android-core/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-core/leakcanary/#types","text":"Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. LeakCanary object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. OnHeapAnalyzedListener interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. Constructors Name Summary init DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. Functions Name Summary onHeapAnalyzed fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Companion Object Functions Name Summary create fun create(): OnHeapAnalyzedListener","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#defaultonheapanalyzedlistener","text":"class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"DefaultOnHeapAnalyzedListener"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#constructors","text":"Name Summary init DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#functions","text":"Name Summary onHeapAnalyzed fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#companion-object-functions","text":"Name Summary create fun create(): OnHeapAnalyzedListener","title":"Companion Object Functions"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/-init-/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener / init init DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":" init "},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/-init-/#init","text":"DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/create/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener / create create fun create(): OnHeapAnalyzedListener","title":"Create"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/create/#create","text":"fun create(): OnHeapAnalyzedListener","title":"create"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/on-heap-analyzed/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener / onHeapAnalyzed onHeapAnalyzed fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Overrides OnHeapAnalyzedListener.onHeapAnalyzed See Also OnHeapAnalyzedListener","title":"On heap analyzed"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/on-heap-analyzed/#onheapanalyzed","text":"fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Overrides OnHeapAnalyzedListener.onHeapAnalyzed See Also OnHeapAnalyzedListener","title":"onHeapAnalyzed"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/","text":"leakcanary-android-core / leakcanary / LeakCanary LeakCanary object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LeakCanary can be configured by updating config . Types Name Summary Config data class Config LeakCanary configuration data class. Properties can be updated via copy . Properties Name Summary config var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: Functions Name Summary dumpHeap fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead. newLeakDisplayActivityIntent fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity. showLeakDisplayActivityLauncherIcon fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource:","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#leakcanary","text":"object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LeakCanary can be configured by updating config .","title":"LeakCanary"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#types","text":"Name Summary Config data class Config LeakCanary configuration data class. Properties can be updated via copy .","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#properties","text":"Name Summary config var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.:","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#functions","text":"Name Summary dumpHeap fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead. newLeakDisplayActivityIntent fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity. showLeakDisplayActivityLauncherIcon fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource:","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/config/","text":"leakcanary-android-core / leakcanary / LeakCanary / config config @JvmStatic var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) In Java, you can use LeakCanary.Config.Builder instead: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .build(); LeakCanary.setConfig(config);","title":"Config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/config/#config","text":"@JvmStatic var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) In Java, you can use LeakCanary.Config.Builder instead: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .build(); LeakCanary.setConfig(config);","title":"config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap/","text":"leakcanary-android-core / leakcanary / LeakCanary / dumpHeap dumpHeap fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap/#dumpheap","text":"fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent/","text":"leakcanary-android-core / leakcanary / LeakCanary / newLeakDisplayActivityIntent newLeakDisplayActivityIntent fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity.","title":"New leak display activity intent"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent/#newleakdisplayactivityintent","text":"fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity.","title":"newLeakDisplayActivityIntent"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon/","text":"leakcanary-android-core / leakcanary / LeakCanary / showLeakDisplayActivityLauncherIcon showLeakDisplayActivityLauncherIcon fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: ?xml version= 1.0 encoding= utf-8 ? resources bool name= leak_canary_add_launcher_icon false /bool /resources","title":"Show leak display activity launcher icon"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon/#showleakdisplayactivitylaunchericon","text":"fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: ?xml version= 1.0 encoding= utf-8 ? resources bool name= leak_canary_add_launcher_icon false /bool /resources","title":"showLeakDisplayActivityLauncherIcon"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config Config data class Config LeakCanary configuration data class. Properties can be updated via copy . See Also config Types Name Summary Builder class Builder Builder for LeakCanary.Config intended to be used only from Java code. Constructors Name Summary init Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List ReferenceMatcher = AndroidReferenceMatchers.appDefaults, objectInspectors: List ObjectInspector = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy . Properties Name Summary computeRetainedHeapSize val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). dumpHeap val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). dumpHeapWhenDebugging val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). leakingObjectFinder val leakingObjectFinder: LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. maxStoredHeapDumps val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. metadataExtractor val metadataExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. objectInspectors val objectInspectors: List ObjectInspector List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. onHeapAnalyzedListener val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . referenceMatchers val referenceMatchers: List ReferenceMatcher Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). requestWriteExternalStoragePermission val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. retainedVisibleThreshold val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. useExperimentalLeakFinders val ~~useExperimentalLeakFinders~~: Boolean Deprecated: This is a no-op, set a custom leakingObjectFinder instead. Functions Name Summary newBuilder (Kotlin 999.9) fun newBuilder(): LeakCanary.Config.Builder Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config .","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#config","text":"data class Config LeakCanary configuration data class. Properties can be updated via copy . See Also config","title":"Config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#types","text":"Name Summary Builder class Builder Builder for LeakCanary.Config intended to be used only from Java code.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#constructors","text":"Name Summary init Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List ReferenceMatcher = AndroidReferenceMatchers.appDefaults, objectInspectors: List ObjectInspector = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy .","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#properties","text":"Name Summary computeRetainedHeapSize val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). dumpHeap val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). dumpHeapWhenDebugging val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). leakingObjectFinder val leakingObjectFinder: LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. maxStoredHeapDumps val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. metadataExtractor val metadataExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. objectInspectors val objectInspectors: List ObjectInspector List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. onHeapAnalyzedListener val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . referenceMatchers val referenceMatchers: List ReferenceMatcher Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). requestWriteExternalStoragePermission val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. retainedVisibleThreshold val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. useExperimentalLeakFinders val ~~useExperimentalLeakFinders~~: Boolean Deprecated: This is a no-op, set a custom leakingObjectFinder instead.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#functions","text":"Name Summary newBuilder (Kotlin 999.9) fun newBuilder(): LeakCanary.Config.Builder Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config .","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-init-/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / init init Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List ReferenceMatcher = AndroidReferenceMatchers.appDefaults, objectInspectors: List ObjectInspector = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy . See Also config","title":" init "},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-init-/#init","text":"Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List ReferenceMatcher = AndroidReferenceMatchers.appDefaults, objectInspectors: List ObjectInspector = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy . See Also config","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / computeRetainedHeapSize computeRetainedHeapSize val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"Compute retained heap size"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size/#computeretainedheapsize","text":"val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"computeRetainedHeapSize"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / dumpHeapWhenDebugging dumpHeapWhenDebugging val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). Defaults to false.","title":"Dump heap when debugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging/#dumpheapwhendebugging","text":"val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). Defaults to false.","title":"dumpHeapWhenDebugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / dumpHeap dumpHeap val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). Defaults to true.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap/#dumpheap","text":"val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). Defaults to true.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/leaking-object-finder/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / leakingObjectFinder leakingObjectFinder val leakingObjectFinder: LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. Defaults to KeyedWeakReferenceFinder which finds all objects tracked by a KeyedWeakReference , ie all objects that were passed to ObjectWatcher.watch . You could instead replace it with a FilteringLeakingObjectFinder , which scans all objects in the heap dump and delegates the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter . This can lead to finding more leaks than the default and shorter leak traces. This also means that every analysis during a given process life will bring up the same leaking objects over and over again, unlike when using KeyedWeakReferenceFinder (because KeyedWeakReference instances are cleared after each heap dump). The list of filters can be built from AndroidObjectInspectors : LeakCanary.config = LeakCanary.config.copy( leakingObjectFinder = FilteringLeakingObjectFinder( AndroidObjectInspectors.appLeakingObjectFilters ) )","title":"Leaking object finder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/leaking-object-finder/#leakingobjectfinder","text":"val leakingObjectFinder: LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. Defaults to KeyedWeakReferenceFinder which finds all objects tracked by a KeyedWeakReference , ie all objects that were passed to ObjectWatcher.watch . You could instead replace it with a FilteringLeakingObjectFinder , which scans all objects in the heap dump and delegates the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter . This can lead to finding more leaks than the default and shorter leak traces. This also means that every analysis during a given process life will bring up the same leaking objects over and over again, unlike when using KeyedWeakReferenceFinder (because KeyedWeakReference instances are cleared after each heap dump). The list of filters can be built from AndroidObjectInspectors : LeakCanary.config = LeakCanary.config.copy( leakingObjectFinder = FilteringLeakingObjectFinder( AndroidObjectInspectors.appLeakingObjectFilters ) )","title":"leakingObjectFinder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / maxStoredHeapDumps maxStoredHeapDumps val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. Defaults to 7.","title":"Max stored heap dumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps/#maxstoredheapdumps","text":"val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. Defaults to 7.","title":"maxStoredHeapDumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/metadata-extractor/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / metadataExtractor metadataExtractor val metadataExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"Metadata extractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/metadata-extractor/#metadataextractor","text":"val metadataExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"metadataExtractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/new-builder/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / newBuilder newBuilder fun newBuilder(): LeakCanary.Config.Builder Platform and version requirements: Kotlin 999.9 Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config .","title":"New builder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/new-builder/#newbuilder","text":"fun newBuilder(): LeakCanary.Config.Builder Platform and version requirements: Kotlin 999.9 Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config .","title":"newBuilder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / objectInspectors objectInspectors val objectInspectors: List ObjectInspector List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"Object inspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/#objectinspectors","text":"val objectInspectors: List ObjectInspector List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"objectInspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / onHeapAnalyzedListener onHeapAnalyzedListener val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . Defaults to DefaultOnHeapAnalyzedListener","title":"On heap analyzed listener"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener/#onheapanalyzedlistener","text":"val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . Defaults to DefaultOnHeapAnalyzedListener","title":"onHeapAnalyzedListener"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / referenceMatchers referenceMatchers val referenceMatchers: List ReferenceMatcher Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). When adding your own custom LibraryLeakReferenceMatcher instances, you ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph . Defaults to AndroidReferenceMatchers.appDefaults","title":"Reference matchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/#referencematchers","text":"val referenceMatchers: List ReferenceMatcher Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). When adding your own custom LibraryLeakReferenceMatcher instances, you ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph . Defaults to AndroidReferenceMatchers.appDefaults","title":"referenceMatchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / requestWriteExternalStoragePermission requestWriteExternalStoragePermission val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. Defaults to false because that permission notification can be annoying.","title":"Request write external storage permission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission/#requestwriteexternalstoragepermission","text":"val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. Defaults to false because that permission notification can be annoying.","title":"requestWriteExternalStoragePermission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / retainedVisibleThreshold retainedVisibleThreshold val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. When the app becomes invisible, LeakCanary dumps the heap after AppWatcher.Config.watchDurationMillis ms. The app is considered visible if it has at least one activity in started state. A higher threshold means LeakCanary will dump the heap less often, therefore it won t be bothering developers as much but it could miss some leaks. Defaults to 5.","title":"Retained visible threshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold/#retainedvisiblethreshold","text":"val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. When the app becomes invisible, LeakCanary dumps the heap after AppWatcher.Config.watchDurationMillis ms. The app is considered visible if it has at least one activity in started state. A higher threshold means LeakCanary will dump the heap less often, therefore it won t be bothering developers as much but it could miss some leaks. Defaults to 5.","title":"retainedVisibleThreshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/use-experimental-leak-finders/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / useExperimentalLeakFinders useExperimentalLeakFinders val ~~useExperimentalLeakFinders~~: Boolean Deprecated: This is a no-op, set a custom leakingObjectFinder instead Deprecated: This is a no-op, set a custom leakingObjectFinder instead.","title":"Use experimental leak finders"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/use-experimental-leak-finders/#useexperimentalleakfinders","text":"val ~~useExperimentalLeakFinders~~: Boolean Deprecated: This is a no-op, set a custom leakingObjectFinder instead Deprecated: This is a no-op, set a custom leakingObjectFinder instead.","title":"useExperimentalLeakFinders"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder Builder class Builder Builder for LeakCanary.Config intended to be used only from Java code. Usage: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .build(); LeakCanary.setConfig(config); For idiomatic Kotlin use copy() method instead: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) Functions Name Summary build fun build(): LeakCanary.Config computeRetainedHeapSize fun computeRetainedHeapSize(computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder dumpHeap fun dumpHeap(dumpHeap: Boolean ): LeakCanary.Config.Builder dumpHeapWhenDebugging fun dumpHeapWhenDebugging(dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder leakingObjectFinder fun leakingObjectFinder(leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder maxStoredHeapDumps fun maxStoredHeapDumps(maxStoredHeapDumps: Int ): LeakCanary.Config.Builder metadataExtractor fun metadataExtractor(metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder objectInspectors fun objectInspectors(objectInspectors: List ObjectInspector ): LeakCanary.Config.Builder onHeapAnalyzedListener fun onHeapAnalyzedListener(onHeapAnalyzedListener: OnHeapAnalyzedListener ): LeakCanary.Config.Builder referenceMatchers fun referenceMatchers(referenceMatchers: List ReferenceMatcher ): LeakCanary.Config.Builder requestWriteExternalStoragePermission fun requestWriteExternalStoragePermission(requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder retainedVisibleThreshold fun retainedVisibleThreshold(retainedVisibleThreshold: Int ): LeakCanary.Config.Builder","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/#builder","text":"class Builder Builder for LeakCanary.Config intended to be used only from Java code. Usage: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .build(); LeakCanary.setConfig(config); For idiomatic Kotlin use copy() method instead: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3)","title":"Builder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/#functions","text":"Name Summary build fun build(): LeakCanary.Config computeRetainedHeapSize fun computeRetainedHeapSize(computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder dumpHeap fun dumpHeap(dumpHeap: Boolean ): LeakCanary.Config.Builder dumpHeapWhenDebugging fun dumpHeapWhenDebugging(dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder leakingObjectFinder fun leakingObjectFinder(leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder maxStoredHeapDumps fun maxStoredHeapDumps(maxStoredHeapDumps: Int ): LeakCanary.Config.Builder metadataExtractor fun metadataExtractor(metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder objectInspectors fun objectInspectors(objectInspectors: List ObjectInspector ): LeakCanary.Config.Builder onHeapAnalyzedListener fun onHeapAnalyzedListener(onHeapAnalyzedListener: OnHeapAnalyzedListener ): LeakCanary.Config.Builder referenceMatchers fun referenceMatchers(referenceMatchers: List ReferenceMatcher ): LeakCanary.Config.Builder requestWriteExternalStoragePermission fun requestWriteExternalStoragePermission(requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder retainedVisibleThreshold fun retainedVisibleThreshold(retainedVisibleThreshold: Int ): LeakCanary.Config.Builder","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/build/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / build build fun build(): LeakCanary.Config","title":"Build"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/build/#build","text":"fun build(): LeakCanary.Config","title":"build"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/compute-retained-heap-size/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / computeRetainedHeapSize computeRetainedHeapSize fun computeRetainedHeapSize(computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.computeRetainedHeapSize","title":"Compute retained heap size"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/compute-retained-heap-size/#computeretainedheapsize","text":"fun computeRetainedHeapSize(computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.computeRetainedHeapSize","title":"computeRetainedHeapSize"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap-when-debugging/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / dumpHeapWhenDebugging dumpHeapWhenDebugging fun dumpHeapWhenDebugging(dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.dumpHeapWhenDebugging","title":"Dump heap when debugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap-when-debugging/#dumpheapwhendebugging","text":"fun dumpHeapWhenDebugging(dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.dumpHeapWhenDebugging","title":"dumpHeapWhenDebugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / dumpHeap dumpHeap fun dumpHeap(dumpHeap: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.dumpHeap","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap/#dumpheap","text":"fun dumpHeap(dumpHeap: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.dumpHeap","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/leaking-object-finder/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / leakingObjectFinder leakingObjectFinder fun leakingObjectFinder(leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder See Also LeakCanary.Config.leakingObjectFinder","title":"Leaking object finder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/leaking-object-finder/#leakingobjectfinder","text":"fun leakingObjectFinder(leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder See Also LeakCanary.Config.leakingObjectFinder","title":"leakingObjectFinder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/max-stored-heap-dumps/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / maxStoredHeapDumps maxStoredHeapDumps fun maxStoredHeapDumps(maxStoredHeapDumps: Int ): LeakCanary.Config.Builder See Also LeakCanary.Config.maxStoredHeapDumps","title":"Max stored heap dumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/max-stored-heap-dumps/#maxstoredheapdumps","text":"fun maxStoredHeapDumps(maxStoredHeapDumps: Int ): LeakCanary.Config.Builder See Also LeakCanary.Config.maxStoredHeapDumps","title":"maxStoredHeapDumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/metadata-extractor/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / metadataExtractor metadataExtractor fun metadataExtractor(metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder See Also LeakCanary.Config.metadataExtractor","title":"Metadata extractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/metadata-extractor/#metadataextractor","text":"fun metadataExtractor(metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder See Also LeakCanary.Config.metadataExtractor","title":"metadataExtractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/object-inspectors/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / objectInspectors objectInspectors fun objectInspectors(objectInspectors: List ObjectInspector ): LeakCanary.Config.Builder See Also LeakCanary.Config.objectInspectors","title":"Object inspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/object-inspectors/#objectinspectors","text":"fun objectInspectors(objectInspectors: List ObjectInspector ): LeakCanary.Config.Builder See Also LeakCanary.Config.objectInspectors","title":"objectInspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/on-heap-analyzed-listener/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / onHeapAnalyzedListener onHeapAnalyzedListener fun onHeapAnalyzedListener(onHeapAnalyzedListener: OnHeapAnalyzedListener ): LeakCanary.Config.Builder See Also LeakCanary.Config.onHeapAnalyzedListener","title":"On heap analyzed listener"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/on-heap-analyzed-listener/#onheapanalyzedlistener","text":"fun onHeapAnalyzedListener(onHeapAnalyzedListener: OnHeapAnalyzedListener ): LeakCanary.Config.Builder See Also LeakCanary.Config.onHeapAnalyzedListener","title":"onHeapAnalyzedListener"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/reference-matchers/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / referenceMatchers referenceMatchers fun referenceMatchers(referenceMatchers: List ReferenceMatcher ): LeakCanary.Config.Builder See Also LeakCanary.Config.referenceMatchers","title":"Reference matchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/reference-matchers/#referencematchers","text":"fun referenceMatchers(referenceMatchers: List ReferenceMatcher ): LeakCanary.Config.Builder See Also LeakCanary.Config.referenceMatchers","title":"referenceMatchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/request-write-external-storage-permission/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / requestWriteExternalStoragePermission requestWriteExternalStoragePermission fun requestWriteExternalStoragePermission(requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.requestWriteExternalStoragePermission","title":"Request write external storage permission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/request-write-external-storage-permission/#requestwriteexternalstoragepermission","text":"fun requestWriteExternalStoragePermission(requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder See Also LeakCanary.Config.requestWriteExternalStoragePermission","title":"requestWriteExternalStoragePermission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/retained-visible-threshold/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / retainedVisibleThreshold retainedVisibleThreshold fun retainedVisibleThreshold(retainedVisibleThreshold: Int ): LeakCanary.Config.Builder See Also LeakCanary.Config.retainedVisibleThreshold","title":"Retained visible threshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/retained-visible-threshold/#retainedvisiblethreshold","text":"fun retainedVisibleThreshold(retainedVisibleThreshold: Int ): LeakCanary.Config.Builder See Also LeakCanary.Config.retainedVisibleThreshold","title":"retainedVisibleThreshold"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/","text":"leakcanary-android-core / leakcanary / OnHeapAnalyzedListener OnHeapAnalyzedListener interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete. You can create a OnHeapAnalyzedListener from a lambda by calling invoke . Functions Name Summary onHeapAnalyzed abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Companion Object Functions Name Summary invoke operator fun invoke(block: (HeapAnalysis) - Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Inheritors Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#onheapanalyzedlistener","text":"interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete. You can create a OnHeapAnalyzedListener from a lambda by calling invoke .","title":"OnHeapAnalyzedListener"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#functions","text":"Name Summary onHeapAnalyzed abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: (HeapAnalysis) - Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax.","title":"Companion Object Functions"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#inheritors","text":"Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"Inheritors"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/invoke/","text":"leakcanary-android-core / leakcanary / OnHeapAnalyzedListener / invoke invoke inline operator fun invoke(crossinline block: (HeapAnalysis) - Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val listener = OnHeapAnalyzedListener { }","title":"Invoke"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: (HeapAnalysis) - Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val listener = OnHeapAnalyzedListener { }","title":"invoke"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/on-heap-analyzed/","text":"leakcanary-android-core / leakcanary / OnHeapAnalyzedListener / onHeapAnalyzed onHeapAnalyzed abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit See Also OnHeapAnalyzedListener","title":"On heap analyzed"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/on-heap-analyzed/#onheapanalyzed","text":"abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit See Also OnHeapAnalyzedListener","title":"onHeapAnalyzed"},{"location":"api/leakcanary-android-instrumentation/","text":"leakcanary-android-instrumentation Packages Name Summary leakcanary Index All Types","title":"Home"},{"location":"api/leakcanary-android-instrumentation/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-android-instrumentation/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-android-instrumentation/alltypes/","text":"All Types Name Summary leakcanary.FailAnnotatedTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. leakcanary.FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. leakcanary.FailTestOnLeakRunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. leakcanary.InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/alltypes/#all-types","text":"Name Summary leakcanary.FailAnnotatedTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. leakcanary.FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. leakcanary.FailTestOnLeakRunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. leakcanary.InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"All Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/","text":"leakcanary-android-instrumentation / leakcanary Package leakcanary Types Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. FailTestOnLeakRunListener open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. InstrumentationLeakDetector class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. Annotations Name Summary FailTestOnLeak annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Extension: Instrumentation tests"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#types","text":"Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. FailTestOnLeakRunListener open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. InstrumentationLeakDetector class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#annotations","text":"Name Summary FailTestOnLeak annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Annotations"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/","text":"leakcanary-android-instrumentation / leakcanary / FailAnnotatedTestOnLeakRunListener FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak Constructors Name Summary init FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. Functions Name Summary skipLeakDetectionReason fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. Inherited Functions Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#failannotatedtestonleakrunlistener","text":"class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak","title":"FailAnnotatedTestOnLeakRunListener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#constructors","text":"Name Summary init FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#functions","text":"Name Summary skipLeakDetectionReason fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#inherited-functions","text":"Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit","title":"Inherited Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/-init-/","text":"leakcanary-android-instrumentation / leakcanary / FailAnnotatedTestOnLeakRunListener / init init FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/-init-/#init","text":"FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/skip-leak-detection-reason/","text":"leakcanary-android-instrumentation / leakcanary / FailAnnotatedTestOnLeakRunListener / skipLeakDetectionReason skipLeakDetectionReason protected fun skipLeakDetectionReason(description: Description): String ? Overrides FailTestOnLeakRunListener.skipLeakDetectionReason Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"Skip leak detection reason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/skip-leak-detection-reason/#skipleakdetectionreason","text":"protected fun skipLeakDetectionReason(description: Description): String ? Overrides FailTestOnLeakRunListener.skipLeakDetectionReason Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"skipLeakDetectionReason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeak FailTestOnLeak @Target([AnnotationTarget.FUNCTION]) annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener Constructors Name Summary init FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/#failtestonleak","text":"@Target([AnnotationTarget.FUNCTION]) annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener","title":"FailTestOnLeak"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/#constructors","text":"Name Summary init FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/-init-/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeak / init init FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/-init-/#init","text":"FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener FailTestOnLeakRunListener open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector Constructors Name Summary init FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. Functions Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. skipLeakDetectionReason open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit Inheritors Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#failtestonleakrunlistener","text":"open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector","title":"FailTestOnLeakRunListener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#constructors","text":"Name Summary init FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#functions","text":"Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. skipLeakDetectionReason open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#inheritors","text":"Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used.","title":"Inheritors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/-init-/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / init init FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/-init-/#init","text":"FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/fail-test/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / failTest failTest protected fun failTest(message: String ): Unit Reports that the test has failed, with the provided message .","title":"Fail test"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/fail-test/#failtest","text":"protected fun failTest(message: String ): Unit Reports that the test has failed, with the provided message .","title":"failTest"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/on-analysis-performed/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / onAnalysisPerformed onAnalysisPerformed protected open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. The default implementation call failTest if the heapAnalysis failed or if HeapAnalysisSuccess.applicationLeaks is not empty.","title":"On analysis performed"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/on-analysis-performed/#onanalysisperformed","text":"protected open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. The default implementation call failTest if the heapAnalysis failed or if HeapAnalysisSuccess.applicationLeaks is not empty.","title":"onAnalysisPerformed"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/skip-leak-detection-reason/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / skipLeakDetectionReason skipLeakDetectionReason protected open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"Skip leak detection reason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/skip-leak-detection-reason/#skipleakdetectionreason","text":"protected open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"skipLeakDetectionReason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-assumption-failure/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testAssumptionFailure testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit","title":"Test assumption failure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-assumption-failure/#testassumptionfailure","text":"open fun testAssumptionFailure(failure: Failure): Unit","title":"testAssumptionFailure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-failure/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testFailure testFailure open fun testFailure(failure: Failure): Unit","title":"Test failure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-failure/#testfailure","text":"open fun testFailure(failure: Failure): Unit","title":"testFailure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-finished/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testFinished testFinished open fun testFinished(description: Description): Unit","title":"Test finished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-finished/#testfinished","text":"open fun testFinished(description: Description): Unit","title":"testFinished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-ignored/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testIgnored testIgnored open fun testIgnored(description: Description): Unit","title":"Test ignored"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-ignored/#testignored","text":"open fun testIgnored(description: Description): Unit","title":"testIgnored"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-finished/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testRunFinished testRunFinished open fun testRunFinished(result: Result): Unit","title":"Test run finished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-finished/#testrunfinished","text":"open fun testRunFinished(result: Result): Unit","title":"testRunFinished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-started/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testRunStarted testRunStarted open fun testRunStarted(description: Description): Unit","title":"Test run started"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-started/#testrunstarted","text":"open fun testRunStarted(description: Description): Unit","title":"testRunStarted"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-started/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testStarted testStarted open fun testStarted(description: Description): Unit","title":"Test started"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-started/#teststarted","text":"open fun testStarted(description: Description): Unit","title":"testStarted"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector InstrumentationLeakDetector class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks . Add an instrumentation test listener LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener Rationale Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained. Types Name Summary Result sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed . Constructors Name Summary init InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. Functions Name Summary detectLeaks fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis. Companion Object Functions Name Summary updateConfig fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#instrumentationleakdetector","text":"class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks .","title":"InstrumentationLeakDetector"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#add-an-instrumentation-test-listener","text":"LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener","title":"Add an instrumentation test listener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#rationale","text":"Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained.","title":"Rationale"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#types","text":"Name Summary Result sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed .","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#constructors","text":"Name Summary init InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#functions","text":"Name Summary detectLeaks fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis.","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#companion-object-functions","text":"Name Summary updateConfig fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"Companion Object Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / init init InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks . Add an instrumentation test listener LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener Rationale Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained.","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/#init","text":"InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks .","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/#add-an-instrumentation-test-listener","text":"LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener","title":"Add an instrumentation test listener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/#rationale","text":"Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained.","title":"Rationale"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/detect-leaks/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / detectLeaks detectLeaks fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis.","title":"Detect leaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/detect-leaks/#detectleaks","text":"fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis.","title":"detectLeaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/update-config/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / updateConfig updateConfig fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"Update config"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/update-config/#updateconfig","text":"fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"updateConfig"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result Result sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed . Types Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result Inheritors Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/#result","text":"sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed .","title":"Result"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/#types","text":"Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/#inheritors","text":"Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result","title":"Inheritors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-no-analysis/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / NoAnalysis NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result","title":" no analysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-no-analysis/#noanalysis","text":"object NoAnalysis : InstrumentationLeakDetector.Result","title":"NoAnalysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / AnalysisPerformed AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result Constructors Name Summary init AnalysisPerformed(heapAnalysis: HeapAnalysis) Properties Name Summary heapAnalysis val heapAnalysis: HeapAnalysis","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/#analysisperformed","text":"class AnalysisPerformed : InstrumentationLeakDetector.Result","title":"AnalysisPerformed"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/#constructors","text":"Name Summary init AnalysisPerformed(heapAnalysis: HeapAnalysis)","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/#properties","text":"Name Summary heapAnalysis val heapAnalysis: HeapAnalysis","title":"Properties"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/-init-/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / AnalysisPerformed / init init AnalysisPerformed(heapAnalysis: HeapAnalysis)","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/-init-/#init","text":"AnalysisPerformed(heapAnalysis: HeapAnalysis)","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/heap-analysis/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / AnalysisPerformed / heapAnalysis heapAnalysis val heapAnalysis: HeapAnalysis","title":"Heap analysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/heap-analysis/#heapanalysis","text":"val heapAnalysis: HeapAnalysis","title":"heapAnalysis"},{"location":"api/leakcanary-android-process/","text":"leakcanary-android-process Packages Name Summary leakcanary Index All Types","title":"Home"},{"location":"api/leakcanary-android-process/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-android-process/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-android-process/alltypes/","text":"All Types Name Summary leakcanary.LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"Home"},{"location":"api/leakcanary-android-process/alltypes/#all-types","text":"Name Summary leakcanary.LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"All Types"},{"location":"api/leakcanary-android-process/leakcanary/","text":"leakcanary-android-process / leakcanary Package leakcanary Types Name Summary LeakCanaryProcess object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"Extension: Separate process"},{"location":"api/leakcanary-android-process/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-process/leakcanary/#types","text":"Name Summary LeakCanaryProcess object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"Types"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/","text":"leakcanary-android-process / leakcanary / LeakCanaryProcess LeakCanaryProcess object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process. As such, you ll need to be careful to do any custom configuration of LeakCanary in both the main process and the analyzer process. Functions Name Summary isInAnalyzerProcess fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Home"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/#leakcanaryprocess","text":"object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process. As such, you ll need to be careful to do any custom configuration of LeakCanary in both the main process and the analyzer process.","title":"LeakCanaryProcess"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/#functions","text":"Name Summary isInAnalyzerProcess fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Functions"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process/","text":"leakcanary-android-process / leakcanary / LeakCanaryProcess / isInAnalyzerProcess isInAnalyzerProcess fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Is in analyzer process"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process/#isinanalyzerprocess","text":"fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"isInAnalyzerProcess"},{"location":"api/leakcanary-object-watcher/","text":"leakcanary-object-watcher Packages Name Summary leakcanary Index All Types","title":"Home"},{"location":"api/leakcanary-object-watcher/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-object-watcher/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-object-watcher/alltypes/","text":"All Types Name Summary leakcanary.Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. leakcanary.GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. leakcanary.KeyedWeakReference A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. leakcanary.ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. leakcanary.OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"Home"},{"location":"api/leakcanary-object-watcher/alltypes/#all-types","text":"Name Summary leakcanary.Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. leakcanary.GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. leakcanary.KeyedWeakReference A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. leakcanary.ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. leakcanary.OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"All Types"},{"location":"api/leakcanary-object-watcher/leakcanary/","text":"leakcanary-object-watcher / leakcanary Package leakcanary Types Name Summary Clock interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. GcTrigger interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. KeyedWeakReference class KeyedWeakReference : WeakReference Any A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. ObjectWatcher class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. OnObjectRetainedListener interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"Core: ObjectWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-object-watcher/leakcanary/#types","text":"Name Summary Clock interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. GcTrigger interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. KeyedWeakReference class KeyedWeakReference : WeakReference Any A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. ObjectWatcher class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. OnObjectRetainedListener interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/","text":"leakcanary-object-watcher / leakcanary / Clock Clock interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. You can create a Clock from a lambda by calling invoke . Functions Name Summary uptimeMillis abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis(). Companion Object Functions Name Summary invoke operator fun invoke(block: () - Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax.","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#clock","text":"interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. You can create a Clock from a lambda by calling invoke .","title":"Clock"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#functions","text":"Name Summary uptimeMillis abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: () - Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax.","title":"Companion Object Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/invoke/","text":"leakcanary-object-watcher / leakcanary / Clock / invoke invoke inline operator fun invoke(crossinline block: () - Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax. Usage: val clock = Clock { }","title":"Invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/invoke/#invoke","text":"inline operator fun invoke(crossinline block: () - Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax. Usage: val clock = Clock { }","title":"invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis/","text":"leakcanary-object-watcher / leakcanary / Clock / uptimeMillis uptimeMillis abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis/#uptimemillis","text":"abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"uptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/","text":"leakcanary-object-watcher / leakcanary / GcTrigger GcTrigger interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. Types Name Summary Default object Default : GcTrigger Default implementation of GcTrigger . Functions Name Summary runGc abstract fun runGc(): Unit Attempts to run garbage collection. Inheritors Name Summary Default object Default : GcTrigger Default implementation of GcTrigger .","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#gctrigger","text":"interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP.","title":"GcTrigger"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#types","text":"Name Summary Default object Default : GcTrigger Default implementation of GcTrigger .","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#functions","text":"Name Summary runGc abstract fun runGc(): Unit Attempts to run garbage collection.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#inheritors","text":"Name Summary Default object Default : GcTrigger Default implementation of GcTrigger .","title":"Inheritors"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc/","text":"leakcanary-object-watcher / leakcanary / GcTrigger / runGc runGc abstract fun runGc(): Unit Attempts to run garbage collection.","title":"Run gc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc/#rungc","text":"abstract fun runGc(): Unit Attempts to run garbage collection.","title":"runGc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/","text":"leakcanary-object-watcher / leakcanary / GcTrigger / Default Default object Default : GcTrigger Default implementation of GcTrigger . Functions Name Summary runGc fun runGc(): Unit Attempts to run garbage collection.","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/#default","text":"object Default : GcTrigger Default implementation of GcTrigger .","title":"Default"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/#functions","text":"Name Summary runGc fun runGc(): Unit Attempts to run garbage collection.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc/","text":"leakcanary-object-watcher / leakcanary / GcTrigger / Default / runGc runGc fun runGc(): Unit Overrides GcTrigger.runGc Attempts to run garbage collection.","title":"Run gc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc/#rungc","text":"fun runGc(): Unit Overrides GcTrigger.runGc Attempts to run garbage collection.","title":"runGc"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference KeyedWeakReference class KeyedWeakReference : WeakReference Any A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained. Constructors Name Summary init KeyedWeakReference(referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue Any ) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. Properties Name Summary description val description: String key val key: String retainedUptimeMillis var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn t been yet. watchUptimeMillis val watchUptimeMillis: Long Companion Object Properties Name Summary heapDumpUptimeMillis var heapDumpUptimeMillis: Long","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#keyedweakreference","text":"class KeyedWeakReference : WeakReference Any A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained.","title":"KeyedWeakReference"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#constructors","text":"Name Summary init KeyedWeakReference(referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue Any ) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet.","title":"Constructors"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#properties","text":"Name Summary description val description: String key val key: String retainedUptimeMillis var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn t been yet. watchUptimeMillis val watchUptimeMillis: Long","title":"Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#companion-object-properties","text":"Name Summary heapDumpUptimeMillis var heapDumpUptimeMillis: Long","title":"Companion Object Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-init-/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / init init KeyedWeakReference(referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue Any ) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained.","title":" init "},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-init-/#init","text":"KeyedWeakReference(referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue Any ) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained.","title":"&lt;init&gt;"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/description/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / description description val description: String","title":"Description"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/description/#description","text":"val description: String","title":"description"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/heap-dump-uptime-millis/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / heapDumpUptimeMillis heapDumpUptimeMillis @JvmStatic var heapDumpUptimeMillis: Long","title":"Heap dump uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/heap-dump-uptime-millis/#heapdumpuptimemillis","text":"@JvmStatic var heapDumpUptimeMillis: Long","title":"heapDumpUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / key key val key: String","title":"Key"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key/#key","text":"val key: String","title":"key"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / retainedUptimeMillis retainedUptimeMillis var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn t been yet.","title":"Retained uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis/#retaineduptimemillis","text":"var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn t been yet.","title":"retainedUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / watchUptimeMillis watchUptimeMillis val watchUptimeMillis: Long","title":"Watch uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis/#watchuptimemillis","text":"val watchUptimeMillis: Long","title":"watchUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher ObjectWatcher class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe. Constructors Name Summary init ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () - Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. Properties Name Summary hasRetainedObjects val hasRetainedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained. hasWatchedObjects val hasWatchedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, even if they haven t been watched for long enough to be considered retained. retainedObjectCount val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained. retainedObjects val retainedObjects: List Any Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there. Functions Name Summary addOnObjectRetainedListener fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit clearObjectsWatchedBefore fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock ) clearWatchedObjects fun clearWatchedObjects(): Unit Clears all KeyedWeakReference removeOnObjectRetainedListener fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit watch fun ~~watch~~(watchedObject: Any ): Unit Identical to watch with an empty string reference name. fun watch(watchedObject: Any , description: String ): Unit Watches the provided watchedObject .","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#objectwatcher","text":"class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe.","title":"ObjectWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#constructors","text":"Name Summary init ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () - Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread.","title":"Constructors"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#properties","text":"Name Summary hasRetainedObjects val hasRetainedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained. hasWatchedObjects val hasWatchedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, even if they haven t been watched for long enough to be considered retained. retainedObjectCount val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained. retainedObjects val retainedObjects: List Any Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#functions","text":"Name Summary addOnObjectRetainedListener fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit clearObjectsWatchedBefore fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock ) clearWatchedObjects fun clearWatchedObjects(): Unit Clears all KeyedWeakReference removeOnObjectRetainedListener fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit watch fun ~~watch~~(watchedObject: Any ): Unit Identical to watch with an empty string reference name. fun watch(watchedObject: Any , description: String ): Unit Watches the provided watchedObject .","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/-init-/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / init init ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () - Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe.","title":" init "},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/-init-/#init","text":"ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () - Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe.","title":"&lt;init&gt;"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / addOnObjectRetainedListener addOnObjectRetainedListener @Synchronized fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"Add on object retained listener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener/#addonobjectretainedlistener","text":"@Synchronized fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"addOnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / clearObjectsWatchedBefore clearObjectsWatchedBefore @Synchronized fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock )","title":"Clear objects watched before"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before/#clearobjectswatchedbefore","text":"@Synchronized fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock )","title":"clearObjectsWatchedBefore"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / clearWatchedObjects clearWatchedObjects @Synchronized fun clearWatchedObjects(): Unit Clears all KeyedWeakReference","title":"Clear watched objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects/#clearwatchedobjects","text":"@Synchronized fun clearWatchedObjects(): Unit Clears all KeyedWeakReference","title":"clearWatchedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / hasRetainedObjects hasRetainedObjects val hasRetainedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained.","title":"Has retained objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects/#hasretainedobjects","text":"val hasRetainedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained.","title":"hasRetainedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / hasWatchedObjects hasWatchedObjects val hasWatchedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, even if they haven t been watched for long enough to be considered retained.","title":"Has watched objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects/#haswatchedobjects","text":"val hasWatchedObjects: Boolean Returns true if there are watched objects that aren t weakly reachable, even if they haven t been watched for long enough to be considered retained.","title":"hasWatchedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / removeOnObjectRetainedListener removeOnObjectRetainedListener @Synchronized fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"Remove on object retained listener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener/#removeonobjectretainedlistener","text":"@Synchronized fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"removeOnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / retainedObjectCount retainedObjectCount val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained.","title":"Retained object count"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count/#retainedobjectcount","text":"val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren t weakly reachable, and have been watched for long enough to be considered retained.","title":"retainedObjectCount"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / retainedObjects retainedObjects val retainedObjects: List Any Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"Retained objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects/#retainedobjects","text":"val retainedObjects: List Any Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"retainedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/watch/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / watch watch @Synchronized fun ~~watch~~(watchedObject: Any ): Unit Deprecated: Add description parameter explaining why an object is watched to help understand leak traces. Identical to watch with an empty string reference name. @Synchronized fun watch(watchedObject: Any , description: String ): Unit Watches the provided watchedObject . Parameters description - Describes why the object is watched.","title":"Watch"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/watch/#watch","text":"@Synchronized fun ~~watch~~(watchedObject: Any ): Unit Deprecated: Add description parameter explaining why an object is watched to help understand leak traces. Identical to watch with an empty string reference name. @Synchronized fun watch(watchedObject: Any , description: String ): Unit Watches the provided watchedObject .","title":"watch"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/watch/#parameters","text":"description - Describes why the object is watched.","title":"Parameters"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/","text":"leakcanary-object-watcher / leakcanary / OnObjectRetainedListener OnObjectRetainedListener interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects. Functions Name Summary onObjectRetained abstract fun onObjectRetained(): Unit A watched object became retained. Companion Object Functions Name Summary invoke operator fun invoke(block: () - Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax.","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#onobjectretainedlistener","text":"interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"OnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#functions","text":"Name Summary onObjectRetained abstract fun onObjectRetained(): Unit A watched object became retained.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: () - Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax.","title":"Companion Object Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/invoke/","text":"leakcanary-object-watcher / leakcanary / OnObjectRetainedListener / invoke invoke inline operator fun invoke(crossinline block: () - Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax. Usage: val listener = OnObjectRetainedListener { }","title":"Invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: () - Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax. Usage: val listener = OnObjectRetainedListener { }","title":"invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained/","text":"leakcanary-object-watcher / leakcanary / OnObjectRetainedListener / onObjectRetained onObjectRetained abstract fun onObjectRetained(): Unit A watched object became retained.","title":"On object retained"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained/#onobjectretained","text":"abstract fun onObjectRetained(): Unit A watched object became retained.","title":"onObjectRetained"},{"location":"api/leakcanary-object-watcher-android/","text":"leakcanary-object-watcher-android Packages Name Summary leakcanary Index All Types","title":"Home"},{"location":"api/leakcanary-object-watcher-android/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-object-watcher-android/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-object-watcher-android/alltypes/","text":"All Types Name Summary leakcanary.AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"Home"},{"location":"api/leakcanary-object-watcher-android/alltypes/#all-types","text":"Name Summary leakcanary.AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"All Types"},{"location":"api/leakcanary-object-watcher-android/leakcanary/","text":"leakcanary-object-watcher-android / leakcanary Package leakcanary Types Name Summary AppWatcher object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"ObjectWatcher Android"},{"location":"api/leakcanary-object-watcher-android/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-object-watcher-android/leakcanary/#types","text":"Name Summary AppWatcher object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"Types"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher AppWatcher object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable. Types Name Summary Config data class Config AppWatcher configuration data class. Properties can be updated via copy . Properties Name Summary config var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: isInstalled val isInstalled: Boolean objectWatcher val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects. Functions Name Summary manualInstall fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"Home"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#appwatcher","text":"object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"AppWatcher"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#types","text":"Name Summary Config data class Config AppWatcher configuration data class. Properties can be updated via copy .","title":"Types"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#properties","text":"Name Summary config var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: isInstalled val isInstalled: Boolean objectWatcher val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects.","title":"Properties"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#functions","text":"Name Summary manualInstall fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"Functions"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / config config @JvmStatic var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false) In Java, you can use AppWatcher.Config.Builder instead: AppWatcher.Config config = AppWatcher.getConfig().newBuilder() .watchFragmentViews(false) .build(); AppWatcher.setConfig(config);","title":"Config"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/#config","text":"@JvmStatic var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false) In Java, you can use AppWatcher.Config.Builder instead: AppWatcher.Config config = AppWatcher.getConfig().newBuilder() .watchFragmentViews(false) .build(); AppWatcher.setConfig(config);","title":"config"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/is-installed/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / isInstalled isInstalled val isInstalled: Boolean See Also manualInstall","title":"Is installed"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/is-installed/#isinstalled","text":"val isInstalled: Boolean See Also manualInstall","title":"isInstalled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/manual-install/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / manualInstall manualInstall fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"Manual install"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/manual-install/#manualinstall","text":"fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"manualInstall"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / objectWatcher objectWatcher val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects.","title":"Object watcher"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/#objectwatcher","text":"val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects.","title":"objectWatcher"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config Config data class Config AppWatcher configuration data class. Properties can be updated via copy . See Also config Types Name Summary Builder class Builder Builder for Config intended to be used only from Java code. Constructors Name Summary init Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchViewModels: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5)) AppWatcher configuration data class. Properties can be updated via copy . Properties Name Summary enabled val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). watchActivities val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. watchDurationMillis val watchDurationMillis: Long How long to wait before reporting a watched object as retained. watchFragments val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. watchFragmentViews val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances. watchViewModels val watchViewModels: Boolean Whether AppWatcher should automatically watch cleared androidx.lifecycle.ViewModel instances. Functions Name Summary newBuilder (Kotlin 999.9) fun newBuilder(): AppWatcher.Config.Builder Construct a new Config via AppWatcher.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify AppWatcher.config .","title":"Home"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#config","text":"data class Config AppWatcher configuration data class. Properties can be updated via copy . See Also config","title":"Config"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#types","text":"Name Summary Builder class Builder Builder for Config intended to be used only from Java code.","title":"Types"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#constructors","text":"Name Summary init Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchViewModels: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5)) AppWatcher configuration data class. Properties can be updated via copy .","title":"Constructors"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#properties","text":"Name Summary enabled val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). watchActivities val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. watchDurationMillis val watchDurationMillis: Long How long to wait before reporting a watched object as retained. watchFragments val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. watchFragmentViews val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances. watchViewModels val watchViewModels: Boolean Whether AppWatcher should automatically watch cleared androidx.lifecycle.ViewModel instances.","title":"Properties"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#functions","text":"Name Summary newBuilder (Kotlin 999.9) fun newBuilder(): AppWatcher.Config.Builder Construct a new Config via AppWatcher.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify AppWatcher.config .","title":"Functions"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-init-/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / init init Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchViewModels: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5)) AppWatcher configuration data class. Properties can be updated via copy . See Also config","title":" init "},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-init-/#init","text":"Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchViewModels: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5)) AppWatcher configuration data class. Properties can be updated via copy . See Also config","title":"&lt;init&gt;"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/enabled/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / enabled enabled val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). Default to true in debuggable builds and false is non debuggable builds.","title":"Enabled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/enabled/#enabled","text":"val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). Default to true in debuggable builds and false is non debuggable builds.","title":"enabled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/new-builder/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / newBuilder newBuilder fun newBuilder(): AppWatcher.Config.Builder Platform and version requirements: Kotlin 999.9 Construct a new Config via AppWatcher.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify AppWatcher.config .","title":"New builder"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/new-builder/#newbuilder","text":"fun newBuilder(): AppWatcher.Config.Builder Platform and version requirements: Kotlin 999.9 Construct a new Config via AppWatcher.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify AppWatcher.config .","title":"newBuilder"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-activities/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchActivities watchActivities val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. Defaults to true.","title":"Watch activities"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-activities/#watchactivities","text":"val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. Defaults to true.","title":"watchActivities"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-duration-millis/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchDurationMillis watchDurationMillis val watchDurationMillis: Long How long to wait before reporting a watched object as retained. Default to 5 seconds.","title":"Watch duration millis"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-duration-millis/#watchdurationmillis","text":"val watchDurationMillis: Long How long to wait before reporting a watched object as retained. Default to 5 seconds.","title":"watchDurationMillis"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragment-views/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchFragmentViews watchFragmentViews val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances. Defaults to true.","title":"Watch fragment views"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragment-views/#watchfragmentviews","text":"val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances. Defaults to true.","title":"watchFragmentViews"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragments/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchFragments watchFragments val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. Defaults to true.","title":"Watch fragments"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragments/#watchfragments","text":"val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. Defaults to true.","title":"watchFragments"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-view-models/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchViewModels watchViewModels val watchViewModels: Boolean Whether AppWatcher should automatically watch cleared androidx.lifecycle.ViewModel instances. Defaults to true.","title":"Watch view models"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-view-models/#watchviewmodels","text":"val watchViewModels: Boolean Whether AppWatcher should automatically watch cleared androidx.lifecycle.ViewModel instances. Defaults to true.","title":"watchViewModels"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder Builder class Builder Builder for Config intended to be used only from Java code. Usage: AppWatcher.Config config = AppWatcher.getConfig().newBuilder() .watchFragmentViews(false) .build(); AppWatcher.setConfig(config); For idiomatic Kotlin use copy() method instead: AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false) Functions Name Summary build fun build(): AppWatcher.Config enabled fun enabled(enabled: Boolean ): AppWatcher.Config.Builder watchActivities fun watchActivities(watchActivities: Boolean ): AppWatcher.Config.Builder watchDurationMillis fun watchDurationMillis(watchDurationMillis: Long ): AppWatcher.Config.Builder watchFragments fun watchFragments(watchFragments: Boolean ): AppWatcher.Config.Builder watchFragmentViews fun watchFragmentViews(watchFragmentViews: Boolean ): AppWatcher.Config.Builder watchViewModels fun watchViewModels(watchViewModels: Boolean ): AppWatcher.Config.Builder","title":"Home"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/#builder","text":"class Builder Builder for Config intended to be used only from Java code. Usage: AppWatcher.Config config = AppWatcher.getConfig().newBuilder() .watchFragmentViews(false) .build(); AppWatcher.setConfig(config); For idiomatic Kotlin use copy() method instead: AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)","title":"Builder"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/#functions","text":"Name Summary build fun build(): AppWatcher.Config enabled fun enabled(enabled: Boolean ): AppWatcher.Config.Builder watchActivities fun watchActivities(watchActivities: Boolean ): AppWatcher.Config.Builder watchDurationMillis fun watchDurationMillis(watchDurationMillis: Long ): AppWatcher.Config.Builder watchFragments fun watchFragments(watchFragments: Boolean ): AppWatcher.Config.Builder watchFragmentViews fun watchFragmentViews(watchFragmentViews: Boolean ): AppWatcher.Config.Builder watchViewModels fun watchViewModels(watchViewModels: Boolean ): AppWatcher.Config.Builder","title":"Functions"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/build/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder / build build fun build(): AppWatcher.Config","title":"Build"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/build/#build","text":"fun build(): AppWatcher.Config","title":"build"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/enabled/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder / enabled enabled fun enabled(enabled: Boolean ): AppWatcher.Config.Builder See Also Config.enabled","title":"Enabled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/enabled/#enabled","text":"fun enabled(enabled: Boolean ): AppWatcher.Config.Builder See Also Config.enabled","title":"enabled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-activities/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder / watchActivities watchActivities fun watchActivities(watchActivities: Boolean ): AppWatcher.Config.Builder See Also Config.watchActivities","title":"Watch activities"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-activities/#watchactivities","text":"fun watchActivities(watchActivities: Boolean ): AppWatcher.Config.Builder See Also Config.watchActivities","title":"watchActivities"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-duration-millis/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder / watchDurationMillis watchDurationMillis fun watchDurationMillis(watchDurationMillis: Long ): AppWatcher.Config.Builder See Also Config.watchDurationMillis","title":"Watch duration millis"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-duration-millis/#watchdurationmillis","text":"fun watchDurationMillis(watchDurationMillis: Long ): AppWatcher.Config.Builder See Also Config.watchDurationMillis","title":"watchDurationMillis"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-fragment-views/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder / watchFragmentViews watchFragmentViews fun watchFragmentViews(watchFragmentViews: Boolean ): AppWatcher.Config.Builder See Also Config.watchFragmentViews","title":"Watch fragment views"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-fragment-views/#watchfragmentviews","text":"fun watchFragmentViews(watchFragmentViews: Boolean ): AppWatcher.Config.Builder See Also Config.watchFragmentViews","title":"watchFragmentViews"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-fragments/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder / watchFragments watchFragments fun watchFragments(watchFragments: Boolean ): AppWatcher.Config.Builder See Also Config.watchFragments","title":"Watch fragments"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-fragments/#watchfragments","text":"fun watchFragments(watchFragments: Boolean ): AppWatcher.Config.Builder See Also Config.watchFragments","title":"watchFragments"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-view-models/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / Builder / watchViewModels watchViewModels fun watchViewModels(watchViewModels: Boolean ): AppWatcher.Config.Builder See Also Config.watchViewModels","title":"Watch view models"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-builder/watch-view-models/#watchviewmodels","text":"fun watchViewModels(watchViewModels: Boolean ): AppWatcher.Config.Builder See Also Config.watchViewModels","title":"watchViewModels"},{"location":"api/shark/","text":"shark Packages Name Summary shark Index All Types","title":"Home"},{"location":"api/shark/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark/#index","text":"All Types","title":"Index"},{"location":"api/shark/alltypes/","text":"All Types Name Summary shark.ApplicationLeak A leak found by HeapAnalyzer in your application. shark.AppSingletonInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. shark.FilteringLeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter shark.HeapAnalysis The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. shark.HeapAnalysisException shark.HeapAnalysisFailure The analysis performed by HeapAnalyzer did not complete successfully. shark.HeapAnalysisSuccess The result of a successful heap analysis performed by HeapAnalyzer . shark.HeapAnalyzer Analyzes heap dumps to look for leaks. shark.IgnoredReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. shark.KeyedWeakReferenceFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. shark.Leak A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . shark.LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. shark.LeakTrace The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. shark.LeakTraceObject shark.LeakTraceReference A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . shark.LibraryLeak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. shark.LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . shark.MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . shark.ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. shark.ObjectInspectors A set of default ObjectInspector s that knows about common JDK objects. shark.ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. shark.OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. shark.ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). shark.ReferencePattern A pattern that will match references for a given ReferenceMatcher .","title":"Home"},{"location":"api/shark/alltypes/#all-types","text":"Name Summary shark.ApplicationLeak A leak found by HeapAnalyzer in your application. shark.AppSingletonInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. shark.FilteringLeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter shark.HeapAnalysis The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. shark.HeapAnalysisException shark.HeapAnalysisFailure The analysis performed by HeapAnalyzer did not complete successfully. shark.HeapAnalysisSuccess The result of a successful heap analysis performed by HeapAnalyzer . shark.HeapAnalyzer Analyzes heap dumps to look for leaks. shark.IgnoredReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. shark.KeyedWeakReferenceFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. shark.Leak A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . shark.LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. shark.LeakTrace The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. shark.LeakTraceObject shark.LeakTraceReference A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . shark.LibraryLeak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. shark.LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . shark.MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . shark.ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. shark.ObjectInspectors A set of default ObjectInspector s that knows about common JDK objects. shark.ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. shark.OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. shark.ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). shark.ReferencePattern A pattern that will match references for a given ReferenceMatcher .","title":"All Types"},{"location":"api/shark/shark/","text":"shark / shark Package shark Types Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. FilteringLeakingObjectFinder class FilteringLeakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter HeapAnalysis sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . HeapAnalyzer class HeapAnalyzer Analyzes heap dumps to look for leaks. IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. KeyedWeakReferenceFinder object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. Leak sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . LeakingObjectFinder interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. LeakTrace data class LeakTrace : Serializable The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. LeakTraceObject data class LeakTraceObject : Serializable LeakTraceReference data class LeakTraceReference : Serializable A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . MetadataExtractor interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . ObjectInspector interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. ObjectReporter class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. OnAnalysisProgressListener interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. ReferenceMatcher sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). ReferencePattern sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher . Exceptions Name Summary HeapAnalysisException class HeapAnalysisException : RuntimeException","title":"Shark"},{"location":"api/shark/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark/shark/#types","text":"Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. FilteringLeakingObjectFinder class FilteringLeakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter HeapAnalysis sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . HeapAnalyzer class HeapAnalyzer Analyzes heap dumps to look for leaks. IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. KeyedWeakReferenceFinder object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. Leak sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . LeakingObjectFinder interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. LeakTrace data class LeakTrace : Serializable The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. LeakTraceObject data class LeakTraceObject : Serializable LeakTraceReference data class LeakTraceReference : Serializable A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . MetadataExtractor interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . ObjectInspector interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. ObjectReporter class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. OnAnalysisProgressListener interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. ReferenceMatcher sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). ReferencePattern sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher .","title":"Types"},{"location":"api/shark/shark/#exceptions","text":"Name Summary HeapAnalysisException class HeapAnalysisException : RuntimeException","title":"Exceptions"},{"location":"api/shark/shark/-app-singleton-inspector/","text":"shark / shark / AppSingletonInspector AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. Constructors Name Summary init AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. Functions Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-app-singleton-inspector/#appsingletoninspector","text":"class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons.","title":"AppSingletonInspector"},{"location":"api/shark/shark/-app-singleton-inspector/#constructors","text":"Name Summary init AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons.","title":"Constructors"},{"location":"api/shark/shark/-app-singleton-inspector/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-app-singleton-inspector/-init-/","text":"shark / shark / AppSingletonInspector / init init AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons.","title":" init "},{"location":"api/shark/shark/-app-singleton-inspector/-init-/#init","text":"AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-app-singleton-inspector/inspect/","text":"shark / shark / AppSingletonInspector / inspect inspect fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-app-singleton-inspector/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-application-leak/","text":"shark / shark / ApplicationLeak ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. Constructors Name Summary init ApplicationLeak(leakTraces: List LeakTrace ) A leak found by HeapAnalyzer in your application. Properties Name Summary leakTraces val leakTraces: List LeakTrace Group of leak traces which share the same leak signature. shortDescription val shortDescription: String signature val signature: String A unique SHA1 hash that represents this group of leak traces. Inherited Properties Name Summary totalRetainedHeapByteSize val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-application-leak/#applicationleak","text":"data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application.","title":"ApplicationLeak"},{"location":"api/shark/shark/-application-leak/#constructors","text":"Name Summary init ApplicationLeak(leakTraces: List LeakTrace ) A leak found by HeapAnalyzer in your application.","title":"Constructors"},{"location":"api/shark/shark/-application-leak/#properties","text":"Name Summary leakTraces val leakTraces: List LeakTrace Group of leak traces which share the same leak signature. shortDescription val shortDescription: String signature val signature: String A unique SHA1 hash that represents this group of leak traces.","title":"Properties"},{"location":"api/shark/shark/-application-leak/#inherited-properties","text":"Name Summary totalRetainedHeapByteSize val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Inherited Properties"},{"location":"api/shark/shark/-application-leak/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-application-leak/-init-/","text":"shark / shark / ApplicationLeak / init init ApplicationLeak(leakTraces: List LeakTrace ) A leak found by HeapAnalyzer in your application.","title":" init "},{"location":"api/shark/shark/-application-leak/-init-/#init","text":"ApplicationLeak(leakTraces: List LeakTrace ) A leak found by HeapAnalyzer in your application.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-application-leak/leak-traces/","text":"shark / shark / ApplicationLeak / leakTraces leakTraces val leakTraces: List LeakTrace Overrides Leak.leakTraces Group of leak traces which share the same leak signature.","title":"Leak traces"},{"location":"api/shark/shark/-application-leak/leak-traces/#leaktraces","text":"val leakTraces: List LeakTrace Overrides Leak.leakTraces Group of leak traces which share the same leak signature.","title":"leakTraces"},{"location":"api/shark/shark/-application-leak/short-description/","text":"shark / shark / ApplicationLeak / shortDescription shortDescription val shortDescription: String Overrides Leak.shortDescription","title":"Short description"},{"location":"api/shark/shark/-application-leak/short-description/#shortdescription","text":"val shortDescription: String Overrides Leak.shortDescription","title":"shortDescription"},{"location":"api/shark/shark/-application-leak/signature/","text":"shark / shark / ApplicationLeak / signature signature val signature: String Overrides Leak.signature A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"Signature"},{"location":"api/shark/shark/-application-leak/signature/#signature","text":"val signature: String Overrides Leak.signature A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"signature"},{"location":"api/shark/shark/-application-leak/to-string/","text":"shark / shark / ApplicationLeak / toString toString fun toString(): String Overrides Leak.toString","title":"To string"},{"location":"api/shark/shark/-application-leak/to-string/#tostring","text":"fun toString(): String Overrides Leak.toString","title":"toString"},{"location":"api/shark/shark/-filtering-leaking-object-finder/","text":"shark / shark / FilteringLeakingObjectFinder FilteringLeakingObjectFinder class FilteringLeakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter Types Name Summary LeakingObjectFilter interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor. Constructors Name Summary init FilteringLeakingObjectFinder(filters: List FilteringLeakingObjectFinder.LeakingObjectFilter ) Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter Functions Name Summary findLeakingObjectIds fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Home"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#filteringleakingobjectfinder","text":"class FilteringLeakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter","title":"FilteringLeakingObjectFinder"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#types","text":"Name Summary LeakingObjectFilter interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor.","title":"Types"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#constructors","text":"Name Summary init FilteringLeakingObjectFinder(filters: List FilteringLeakingObjectFinder.LeakingObjectFilter ) Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter","title":"Constructors"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#functions","text":"Name Summary findLeakingObjectIds fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Functions"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-init-/","text":"shark / shark / FilteringLeakingObjectFinder / init init FilteringLeakingObjectFinder(filters: List FilteringLeakingObjectFinder.LeakingObjectFilter ) Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter","title":" init "},{"location":"api/shark/shark/-filtering-leaking-object-finder/-init-/#init","text":"FilteringLeakingObjectFinder(filters: List FilteringLeakingObjectFinder.LeakingObjectFilter ) Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter","title":"&lt;init&gt;"},{"location":"api/shark/shark/-filtering-leaking-object-finder/find-leaking-object-ids/","text":"shark / shark / FilteringLeakingObjectFinder / findLeakingObjectIds findLeakingObjectIds fun findLeakingObjectIds(graph: HeapGraph): Set Long Overrides LeakingObjectFinder.findLeakingObjectIds For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Find leaking object ids"},{"location":"api/shark/shark/-filtering-leaking-object-finder/find-leaking-object-ids/#findleakingobjectids","text":"fun findLeakingObjectIds(graph: HeapGraph): Set Long Overrides LeakingObjectFinder.findLeakingObjectIds For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"findLeakingObjectIds"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/","text":"shark / shark / FilteringLeakingObjectFinder / LeakingObjectFilter LeakingObjectFilter interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor. Functions Name Summary isLeakingObject abstract fun isLeakingObject(heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we re 100% sure the passed in heapObject should not be in memory anymore.","title":"Home"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/#leakingobjectfilter","text":"interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor.","title":"LeakingObjectFilter"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/#functions","text":"Name Summary isLeakingObject abstract fun isLeakingObject(heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we re 100% sure the passed in heapObject should not be in memory anymore.","title":"Functions"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/is-leaking-object/","text":"shark / shark / FilteringLeakingObjectFinder / LeakingObjectFilter / isLeakingObject isLeakingObject abstract fun isLeakingObject(heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we re 100% sure the passed in heapObject should not be in memory anymore.","title":"Is leaking object"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/is-leaking-object/#isleakingobject","text":"abstract fun isLeakingObject(heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we re 100% sure the passed in heapObject should not be in memory anymore.","title":"isLeakingObject"},{"location":"api/shark/shark/-heap-analysis/","text":"shark / shark / HeapAnalysis HeapAnalysis sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. Properties Name Summary analysisDurationMillis abstract val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile abstract val heapDumpFile: File The hprof file that was analyzed. Inheritors Name Summary HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer .","title":"Home"},{"location":"api/shark/shark/-heap-analysis/#heapanalysis","text":"sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility.","title":"HeapAnalysis"},{"location":"api/shark/shark/-heap-analysis/#properties","text":"Name Summary analysisDurationMillis abstract val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile abstract val heapDumpFile: File The hprof file that was analyzed.","title":"Properties"},{"location":"api/shark/shark/-heap-analysis/#inheritors","text":"Name Summary HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer .","title":"Inheritors"},{"location":"api/shark/shark/-heap-analysis/analysis-duration-millis/","text":"shark / shark / HeapAnalysis / analysisDurationMillis analysisDurationMillis abstract val analysisDurationMillis: Long Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis/analysis-duration-millis/#analysisdurationmillis","text":"abstract val analysisDurationMillis: Long Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis/created-at-time-millis/","text":"shark / shark / HeapAnalysis / createdAtTimeMillis createdAtTimeMillis abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis/created-at-time-millis/#createdattimemillis","text":"abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis/heap-dump-file/","text":"shark / shark / HeapAnalysis / heapDumpFile heapDumpFile abstract val heapDumpFile: File The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis/heap-dump-file/#heapdumpfile","text":"abstract val heapDumpFile: File The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-exception/","text":"shark / shark / HeapAnalysisException HeapAnalysisException class HeapAnalysisException : RuntimeException Constructors Name Summary init HeapAnalysisException(cause: Throwable ) Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-heap-analysis-exception/#heapanalysisexception","text":"class HeapAnalysisException : RuntimeException","title":"HeapAnalysisException"},{"location":"api/shark/shark/-heap-analysis-exception/#constructors","text":"Name Summary init HeapAnalysisException(cause: Throwable )","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-exception/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-exception/-init-/","text":"shark / shark / HeapAnalysisException / init init HeapAnalysisException(cause: Throwable )","title":" init "},{"location":"api/shark/shark/-heap-analysis-exception/-init-/#init","text":"HeapAnalysisException(cause: Throwable )","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analysis-exception/to-string/","text":"shark / shark / HeapAnalysisException / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-exception/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-failure/","text":"shark / shark / HeapAnalysisFailure HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. Constructors Name Summary init HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully. Properties Name Summary analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. exception val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown. heapDumpFile val heapDumpFile: File The hprof file that was analyzed. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-heap-analysis-failure/#heapanalysisfailure","text":"data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully.","title":"HeapAnalysisFailure"},{"location":"api/shark/shark/-heap-analysis-failure/#constructors","text":"Name Summary init HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully.","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-failure/#properties","text":"Name Summary analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. exception val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown. heapDumpFile val heapDumpFile: File The hprof file that was analyzed.","title":"Properties"},{"location":"api/shark/shark/-heap-analysis-failure/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-failure/-init-/","text":"shark / shark / HeapAnalysisFailure / init init HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully.","title":" init "},{"location":"api/shark/shark/-heap-analysis-failure/-init-/#init","text":"HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analysis-failure/analysis-duration-millis/","text":"shark / shark / HeapAnalysisFailure / analysisDurationMillis analysisDurationMillis val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis-failure/analysis-duration-millis/#analysisdurationmillis","text":"val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis-failure/created-at-time-millis/","text":"shark / shark / HeapAnalysisFailure / createdAtTimeMillis createdAtTimeMillis val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis-failure/created-at-time-millis/#createdattimemillis","text":"val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis-failure/exception/","text":"shark / shark / HeapAnalysisFailure / exception exception val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown.","title":"Exception"},{"location":"api/shark/shark/-heap-analysis-failure/exception/#exception","text":"val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown.","title":"exception"},{"location":"api/shark/shark/-heap-analysis-failure/heap-dump-file/","text":"shark / shark / HeapAnalysisFailure / heapDumpFile heapDumpFile val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis-failure/heap-dump-file/#heapdumpfile","text":"val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-failure/to-string/","text":"shark / shark / HeapAnalysisFailure / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-failure/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-success/","text":"shark / shark / HeapAnalysisSuccess HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . Constructors Name Summary init HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map String , String , applicationLeaks: List ApplicationLeak , libraryLeaks: List LibraryLeak ) The result of a successful heap analysis performed by HeapAnalyzer . Properties Name Summary allLeaks val allLeaks: Sequence Leak The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list. analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. applicationLeaks val applicationLeaks: List ApplicationLeak The list of ApplicationLeak found in the heap dump by HeapAnalyzer . createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile val heapDumpFile: File The hprof file that was analyzed. libraryLeaks val libraryLeaks: List LibraryLeak The list of LibraryLeak found in the heap dump by HeapAnalyzer . metadata val metadata: Map String , String Functions Name Summary toString fun toString(): String Companion Object Functions Name Summary upgradeFrom20Deserialized fun upgradeFrom20Deserialized(fromV20: HeapAnalysisSuccess ): HeapAnalysisSuccess If fromV20 was serialized in LeakCanary 2.0, you must deserialize it and call this method to create a usable HeapAnalysisSuccess instance.","title":"Home"},{"location":"api/shark/shark/-heap-analysis-success/#heapanalysissuccess","text":"data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer .","title":"HeapAnalysisSuccess"},{"location":"api/shark/shark/-heap-analysis-success/#constructors","text":"Name Summary init HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map String , String , applicationLeaks: List ApplicationLeak , libraryLeaks: List LibraryLeak ) The result of a successful heap analysis performed by HeapAnalyzer .","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-success/#properties","text":"Name Summary allLeaks val allLeaks: Sequence Leak The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list. analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. applicationLeaks val applicationLeaks: List ApplicationLeak The list of ApplicationLeak found in the heap dump by HeapAnalyzer . createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile val heapDumpFile: File The hprof file that was analyzed. libraryLeaks val libraryLeaks: List LibraryLeak The list of LibraryLeak found in the heap dump by HeapAnalyzer . metadata val metadata: Map String , String","title":"Properties"},{"location":"api/shark/shark/-heap-analysis-success/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-success/#companion-object-functions","text":"Name Summary upgradeFrom20Deserialized fun upgradeFrom20Deserialized(fromV20: HeapAnalysisSuccess ): HeapAnalysisSuccess If fromV20 was serialized in LeakCanary 2.0, you must deserialize it and call this method to create a usable HeapAnalysisSuccess instance.","title":"Companion Object Functions"},{"location":"api/shark/shark/-heap-analysis-success/-init-/","text":"shark / shark / HeapAnalysisSuccess / init init HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map String , String , applicationLeaks: List ApplicationLeak , libraryLeaks: List LibraryLeak ) The result of a successful heap analysis performed by HeapAnalyzer .","title":" init "},{"location":"api/shark/shark/-heap-analysis-success/-init-/#init","text":"HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map String , String , applicationLeaks: List ApplicationLeak , libraryLeaks: List LibraryLeak ) The result of a successful heap analysis performed by HeapAnalyzer .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analysis-success/all-leaks/","text":"shark / shark / HeapAnalysisSuccess / allLeaks allLeaks val allLeaks: Sequence Leak The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list.","title":"All leaks"},{"location":"api/shark/shark/-heap-analysis-success/all-leaks/#allleaks","text":"val allLeaks: Sequence Leak The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list.","title":"allLeaks"},{"location":"api/shark/shark/-heap-analysis-success/analysis-duration-millis/","text":"shark / shark / HeapAnalysisSuccess / analysisDurationMillis analysisDurationMillis val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis-success/analysis-duration-millis/#analysisdurationmillis","text":"val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis-success/application-leaks/","text":"shark / shark / HeapAnalysisSuccess / applicationLeaks applicationLeaks val applicationLeaks: List ApplicationLeak The list of ApplicationLeak found in the heap dump by HeapAnalyzer .","title":"Application leaks"},{"location":"api/shark/shark/-heap-analysis-success/application-leaks/#applicationleaks","text":"val applicationLeaks: List ApplicationLeak The list of ApplicationLeak found in the heap dump by HeapAnalyzer .","title":"applicationLeaks"},{"location":"api/shark/shark/-heap-analysis-success/created-at-time-millis/","text":"shark / shark / HeapAnalysisSuccess / createdAtTimeMillis createdAtTimeMillis val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis-success/created-at-time-millis/#createdattimemillis","text":"val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis-success/heap-dump-file/","text":"shark / shark / HeapAnalysisSuccess / heapDumpFile heapDumpFile val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis-success/heap-dump-file/#heapdumpfile","text":"val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-success/library-leaks/","text":"shark / shark / HeapAnalysisSuccess / libraryLeaks libraryLeaks val libraryLeaks: List LibraryLeak The list of LibraryLeak found in the heap dump by HeapAnalyzer .","title":"Library leaks"},{"location":"api/shark/shark/-heap-analysis-success/library-leaks/#libraryleaks","text":"val libraryLeaks: List LibraryLeak The list of LibraryLeak found in the heap dump by HeapAnalyzer .","title":"libraryLeaks"},{"location":"api/shark/shark/-heap-analysis-success/metadata/","text":"shark / shark / HeapAnalysisSuccess / metadata metadata val metadata: Map String , String","title":"Metadata"},{"location":"api/shark/shark/-heap-analysis-success/metadata/#metadata","text":"val metadata: Map String , String","title":"metadata"},{"location":"api/shark/shark/-heap-analysis-success/to-string/","text":"shark / shark / HeapAnalysisSuccess / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-success/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-success/upgrade-from20-deserialized/","text":"shark / shark / HeapAnalysisSuccess / upgradeFrom20Deserialized upgradeFrom20Deserialized fun upgradeFrom20Deserialized(fromV20: HeapAnalysisSuccess ): HeapAnalysisSuccess If fromV20 was serialized in LeakCanary 2.0, you must deserialize it and call this method to create a usable HeapAnalysisSuccess instance.","title":"Upgrade from20 deserialized"},{"location":"api/shark/shark/-heap-analysis-success/upgrade-from20-deserialized/#upgradefrom20deserialized","text":"fun upgradeFrom20Deserialized(fromV20: HeapAnalysisSuccess ): HeapAnalysisSuccess If fromV20 was serialized in LeakCanary 2.0, you must deserialize it and call this method to create a usable HeapAnalysisSuccess instance.","title":"upgradeFrom20Deserialized"},{"location":"api/shark/shark/-heap-analyzer/","text":"shark / shark / HeapAnalyzer HeapAnalyzer class HeapAnalyzer Analyzes heap dumps to look for leaks. Constructors Name Summary init HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks. Functions Name Summary analyze fun analyze(heapDumpFile: File , leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots. fun analyze(heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis","title":"Home"},{"location":"api/shark/shark/-heap-analyzer/#heapanalyzer","text":"class HeapAnalyzer Analyzes heap dumps to look for leaks.","title":"HeapAnalyzer"},{"location":"api/shark/shark/-heap-analyzer/#constructors","text":"Name Summary init HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks.","title":"Constructors"},{"location":"api/shark/shark/-heap-analyzer/#functions","text":"Name Summary analyze fun analyze(heapDumpFile: File , leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots. fun analyze(heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis","title":"Functions"},{"location":"api/shark/shark/-heap-analyzer/-init-/","text":"shark / shark / HeapAnalyzer / init init HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks.","title":" init "},{"location":"api/shark/shark/-heap-analyzer/-init-/#init","text":"HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analyzer/analyze/","text":"shark / shark / HeapAnalyzer / analyze analyze fun analyze(heapDumpFile: File , leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots. fun analyze(heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis","title":"Analyze"},{"location":"api/shark/shark/-heap-analyzer/analyze/#analyze","text":"fun analyze(heapDumpFile: File , leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots. fun analyze(heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List ReferenceMatcher = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List ObjectInspector = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis","title":"analyze"},{"location":"api/shark/shark/-ignored-reference-matcher/","text":"shark / shark / IgnoredReferenceMatcher IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. Constructors Name Summary init IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. Properties Name Summary pattern val pattern: ReferencePattern The pattern that references will be matched against. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-ignored-reference-matcher/#ignoredreferencematcher","text":"class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":"IgnoredReferenceMatcher"},{"location":"api/shark/shark/-ignored-reference-matcher/#constructors","text":"Name Summary init IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":"Constructors"},{"location":"api/shark/shark/-ignored-reference-matcher/#properties","text":"Name Summary pattern val pattern: ReferencePattern The pattern that references will be matched against.","title":"Properties"},{"location":"api/shark/shark/-ignored-reference-matcher/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-ignored-reference-matcher/-init-/","text":"shark / shark / IgnoredReferenceMatcher / init init IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":" init "},{"location":"api/shark/shark/-ignored-reference-matcher/-init-/#init","text":"IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-ignored-reference-matcher/pattern/","text":"shark / shark / IgnoredReferenceMatcher / pattern pattern val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-ignored-reference-matcher/pattern/#pattern","text":"val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-ignored-reference-matcher/to-string/","text":"shark / shark / IgnoredReferenceMatcher / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-ignored-reference-matcher/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-keyed-weak-reference-finder/","text":"shark / shark / KeyedWeakReferenceFinder KeyedWeakReferenceFinder object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. Functions Name Summary findLeakingObjectIds fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Home"},{"location":"api/shark/shark/-keyed-weak-reference-finder/#keyedweakreferencefinder","text":"object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch.","title":"KeyedWeakReferenceFinder"},{"location":"api/shark/shark/-keyed-weak-reference-finder/#functions","text":"Name Summary findLeakingObjectIds fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Functions"},{"location":"api/shark/shark/-keyed-weak-reference-finder/find-leaking-object-ids/","text":"shark / shark / KeyedWeakReferenceFinder / findLeakingObjectIds findLeakingObjectIds fun findLeakingObjectIds(graph: HeapGraph): Set Long Overrides LeakingObjectFinder.findLeakingObjectIds For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Find leaking object ids"},{"location":"api/shark/shark/-keyed-weak-reference-finder/find-leaking-object-ids/#findleakingobjectids","text":"fun findLeakingObjectIds(graph: HeapGraph): Set Long Overrides LeakingObjectFinder.findLeakingObjectIds For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"findLeakingObjectIds"},{"location":"api/shark/shark/-leak/","text":"shark / shark / Leak Leak sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . Properties Name Summary leakTraces abstract val leakTraces: List LeakTrace Group of leak traces which share the same leak signature. shortDescription abstract val shortDescription: String signature abstract val signature: String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. Functions Name Summary toString open fun toString(): String Inheritors Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"Home"},{"location":"api/shark/shark/-leak/#leak","text":"sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak .","title":"Leak"},{"location":"api/shark/shark/-leak/#properties","text":"Name Summary leakTraces abstract val leakTraces: List LeakTrace Group of leak traces which share the same leak signature. shortDescription abstract val shortDescription: String signature abstract val signature: String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Properties"},{"location":"api/shark/shark/-leak/#functions","text":"Name Summary toString open fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-leak/#inheritors","text":"Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"Inheritors"},{"location":"api/shark/shark/-leak/leak-traces/","text":"shark / shark / Leak / leakTraces leakTraces abstract val leakTraces: List LeakTrace Group of leak traces which share the same leak signature.","title":"Leak traces"},{"location":"api/shark/shark/-leak/leak-traces/#leaktraces","text":"abstract val leakTraces: List LeakTrace Group of leak traces which share the same leak signature.","title":"leakTraces"},{"location":"api/shark/shark/-leak/short-description/","text":"shark / shark / Leak / shortDescription shortDescription abstract val shortDescription: String","title":"Short description"},{"location":"api/shark/shark/-leak/short-description/#shortdescription","text":"abstract val shortDescription: String","title":"shortDescription"},{"location":"api/shark/shark/-leak/signature/","text":"shark / shark / Leak / signature signature abstract val signature: String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"Signature"},{"location":"api/shark/shark/-leak/signature/#signature","text":"abstract val signature: String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"signature"},{"location":"api/shark/shark/-leak/to-string/","text":"shark / shark / Leak / toString toString open fun toString(): String","title":"To string"},{"location":"api/shark/shark/-leak/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"api/shark/shark/-leak/total-retained-heap-byte-size/","text":"shark / shark / Leak / totalRetainedHeapByteSize totalRetainedHeapByteSize val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Total retained heap byte size"},{"location":"api/shark/shark/-leak/total-retained-heap-byte-size/#totalretainedheapbytesize","text":"val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed.","title":"totalRetainedHeapByteSize"},{"location":"api/shark/shark/-leak-trace/","text":"shark / shark / LeakTrace LeakTrace data class LeakTrace : Serializable The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. Types Name Summary GcRootType enum class GcRootType Constructors Name Summary init LeakTrace(gcRootType: LeakTrace.GcRootType , referencePath: List LeakTraceReference , leakingObject: LeakTraceObject , retainedHeapByteSize: Int ?) The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. Properties Name Summary gcRootType val gcRootType: LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath . leakingObject val leakingObject: LeakTraceObject referencePath val referencePath: List LeakTraceReference retainedHeapByteSize val retainedHeapByteSize: Int ? The minimum number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. signature val signature: String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. suspectReferenceSubpath val suspectReferenceSubpath: Sequence LeakTraceReference A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object. Functions Name Summary referencePathElementIsSuspect fun referencePathElementIsSuspect(index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object. toSimplePathString fun toSimplePathString(): String toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-leak-trace/#leaktrace","text":"data class LeakTrace : Serializable The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak.","title":"LeakTrace"},{"location":"api/shark/shark/-leak-trace/#types","text":"Name Summary GcRootType enum class GcRootType","title":"Types"},{"location":"api/shark/shark/-leak-trace/#constructors","text":"Name Summary init LeakTrace(gcRootType: LeakTrace.GcRootType , referencePath: List LeakTraceReference , leakingObject: LeakTraceObject , retainedHeapByteSize: Int ?) The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak.","title":"Constructors"},{"location":"api/shark/shark/-leak-trace/#properties","text":"Name Summary gcRootType val gcRootType: LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath . leakingObject val leakingObject: LeakTraceObject referencePath val referencePath: List LeakTraceReference retainedHeapByteSize val retainedHeapByteSize: Int ? The minimum number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. signature val signature: String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. suspectReferenceSubpath val suspectReferenceSubpath: Sequence LeakTraceReference A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object.","title":"Properties"},{"location":"api/shark/shark/-leak-trace/#functions","text":"Name Summary referencePathElementIsSuspect fun referencePathElementIsSuspect(index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object. toSimplePathString fun toSimplePathString(): String toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-leak-trace/-init-/","text":"shark / shark / LeakTrace / init init LeakTrace(gcRootType: LeakTrace.GcRootType , referencePath: List LeakTraceReference , leakingObject: LeakTraceObject , retainedHeapByteSize: Int ?) The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak.","title":" init "},{"location":"api/shark/shark/-leak-trace/-init-/#init","text":"LeakTrace(gcRootType: LeakTrace.GcRootType , referencePath: List LeakTraceReference , leakingObject: LeakTraceObject , retainedHeapByteSize: Int ?) The best strong reference path from a GC root to the leaking object. Best here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it s more interesting to find other paths causing leaks), then it prioritize paths that don t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-leak-trace/gc-root-type/","text":"shark / shark / LeakTrace / gcRootType gcRootType val gcRootType: LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath .","title":"Gc root type"},{"location":"api/shark/shark/-leak-trace/gc-root-type/#gcroottype","text":"val gcRootType: LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath .","title":"gcRootType"},{"location":"api/shark/shark/-leak-trace/leaking-object/","text":"shark / shark / LeakTrace / leakingObject leakingObject val leakingObject: LeakTraceObject","title":"Leaking object"},{"location":"api/shark/shark/-leak-trace/leaking-object/#leakingobject","text":"val leakingObject: LeakTraceObject","title":"leakingObject"},{"location":"api/shark/shark/-leak-trace/reference-path-element-is-suspect/","text":"shark / shark / LeakTrace / referencePathElementIsSuspect referencePathElementIsSuspect fun referencePathElementIsSuspect(index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object.","title":"Reference path element is suspect"},{"location":"api/shark/shark/-leak-trace/reference-path-element-is-suspect/#referencepathelementissuspect","text":"fun referencePathElementIsSuspect(index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object.","title":"referencePathElementIsSuspect"},{"location":"api/shark/shark/-leak-trace/reference-path/","text":"shark / shark / LeakTrace / referencePath referencePath val referencePath: List LeakTraceReference","title":"Reference path"},{"location":"api/shark/shark/-leak-trace/reference-path/#referencepath","text":"val referencePath: List LeakTraceReference","title":"referencePath"},{"location":"api/shark/shark/-leak-trace/retained-heap-byte-size/","text":"shark / shark / LeakTrace / retainedHeapByteSize retainedHeapByteSize val retainedHeapByteSize: Int ? The minimum number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"Retained heap byte size"},{"location":"api/shark/shark/-leak-trace/retained-heap-byte-size/#retainedheapbytesize","text":"val retainedHeapByteSize: Int ? The minimum number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"retainedHeapByteSize"},{"location":"api/shark/shark/-leak-trace/signature/","text":"shark / shark / LeakTrace / signature signature val signature: String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. The signature is a hash of suspectReferenceSubpath .","title":"Signature"},{"location":"api/shark/shark/-leak-trace/signature/#signature","text":"val signature: String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. The signature is a hash of suspectReferenceSubpath .","title":"signature"},{"location":"api/shark/shark/-leak-trace/suspect-reference-subpath/","text":"shark / shark / LeakTrace / suspectReferenceSubpath suspectReferenceSubpath val suspectReferenceSubpath: Sequence LeakTraceReference A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object.","title":"Suspect reference subpath"},{"location":"api/shark/shark/-leak-trace/suspect-reference-subpath/#suspectreferencesubpath","text":"val suspectReferenceSubpath: Sequence LeakTraceReference A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object.","title":"suspectReferenceSubpath"},{"location":"api/shark/shark/-leak-trace/to-simple-path-string/","text":"shark / shark / LeakTrace / toSimplePathString toSimplePathString fun toSimplePathString(): String","title":"To simple path string"},{"location":"api/shark/shark/-leak-trace/to-simple-path-string/#tosimplepathstring","text":"fun toSimplePathString(): String","title":"toSimplePathString"},{"location":"api/shark/shark/-leak-trace/to-string/","text":"shark / shark / LeakTrace / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-leak-trace/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/","text":"shark / shark / LeakTrace / GcRootType GcRootType enum class GcRootType Enum Values Name Summary JNI_GLOBAL JNI_LOCAL JAVA_FRAME NATIVE_STACK STICKY_CLASS THREAD_BLOCK MONITOR_USED THREAD_OBJECT JNI_MONITOR Properties Name Summary description val description: String Companion Object Functions Name Summary fromGcRoot fun fromGcRoot(gcRoot: GcRoot): LeakTrace.GcRootType","title":"Home"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#gcroottype","text":"enum class GcRootType","title":"GcRootType"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#enum-values","text":"Name Summary JNI_GLOBAL JNI_LOCAL JAVA_FRAME NATIVE_STACK STICKY_CLASS THREAD_BLOCK MONITOR_USED THREAD_OBJECT JNI_MONITOR","title":"Enum Values"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#properties","text":"Name Summary description val description: String","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#companion-object-functions","text":"Name Summary fromGcRoot fun fromGcRoot(gcRoot: GcRoot): LeakTrace.GcRootType","title":"Companion Object Functions"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-a-v-a_-f-r-a-m-e/","text":"shark / shark / LeakTrace / GcRootType / JAVA_FRAME JAVA_FRAME JAVA_FRAME Inherited Properties Name Summary description val description: String","title":" j a v a  f r a m e"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-a-v-a_-f-r-a-m-e/#java_frame","text":"JAVA_FRAME","title":"JAVA_FRAME"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-a-v-a_-f-r-a-m-e/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-g-l-o-b-a-l/","text":"shark / shark / LeakTrace / GcRootType / JNI_GLOBAL JNI_GLOBAL JNI_GLOBAL Inherited Properties Name Summary description val description: String","title":" j n i  g l o b a l"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-g-l-o-b-a-l/#jni_global","text":"JNI_GLOBAL","title":"JNI_GLOBAL"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-g-l-o-b-a-l/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-l-o-c-a-l/","text":"shark / shark / LeakTrace / GcRootType / JNI_LOCAL JNI_LOCAL JNI_LOCAL Inherited Properties Name Summary description val description: String","title":" j n i  l o c a l"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-l-o-c-a-l/#jni_local","text":"JNI_LOCAL","title":"JNI_LOCAL"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-l-o-c-a-l/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-m-o-n-i-t-o-r/","text":"shark / shark / LeakTrace / GcRootType / JNI_MONITOR JNI_MONITOR JNI_MONITOR Inherited Properties Name Summary description val description: String","title":" j n i  m o n i t o r"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-m-o-n-i-t-o-r/#jni_monitor","text":"JNI_MONITOR","title":"JNI_MONITOR"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-m-o-n-i-t-o-r/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-m-o-n-i-t-o-r_-u-s-e-d/","text":"shark / shark / LeakTrace / GcRootType / MONITOR_USED MONITOR_USED MONITOR_USED Inherited Properties Name Summary description val description: String","title":" m o n i t o r  u s e d"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-m-o-n-i-t-o-r_-u-s-e-d/#monitor_used","text":"MONITOR_USED","title":"MONITOR_USED"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-m-o-n-i-t-o-r_-u-s-e-d/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-n-a-t-i-v-e_-s-t-a-c-k/","text":"shark / shark / LeakTrace / GcRootType / NATIVE_STACK NATIVE_STACK NATIVE_STACK Inherited Properties Name Summary description val description: String","title":" n a t i v e  s t a c k"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-n-a-t-i-v-e_-s-t-a-c-k/#native_stack","text":"NATIVE_STACK","title":"NATIVE_STACK"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-n-a-t-i-v-e_-s-t-a-c-k/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-s-t-i-c-k-y_-c-l-a-s-s/","text":"shark / shark / LeakTrace / GcRootType / STICKY_CLASS STICKY_CLASS STICKY_CLASS Inherited Properties Name Summary description val description: String","title":" s t i c k y  c l a s s"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-s-t-i-c-k-y_-c-l-a-s-s/#sticky_class","text":"STICKY_CLASS","title":"STICKY_CLASS"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-s-t-i-c-k-y_-c-l-a-s-s/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-b-l-o-c-k/","text":"shark / shark / LeakTrace / GcRootType / THREAD_BLOCK THREAD_BLOCK THREAD_BLOCK Inherited Properties Name Summary description val description: String","title":" t h r e a d  b l o c k"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-b-l-o-c-k/#thread_block","text":"THREAD_BLOCK","title":"THREAD_BLOCK"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-b-l-o-c-k/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-o-b-j-e-c-t/","text":"shark / shark / LeakTrace / GcRootType / THREAD_OBJECT THREAD_OBJECT THREAD_OBJECT Inherited Properties Name Summary description val description: String","title":" t h r e a d  o b j e c t"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-o-b-j-e-c-t/#thread_object","text":"THREAD_OBJECT","title":"THREAD_OBJECT"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-o-b-j-e-c-t/#inherited-properties","text":"Name Summary description val description: String","title":"Inherited Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/description/","text":"shark / shark / LeakTrace / GcRootType / description description val description: String","title":"Description"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/description/#description","text":"val description: String","title":"description"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/from-gc-root/","text":"shark / shark / LeakTrace / GcRootType / fromGcRoot fromGcRoot fun fromGcRoot(gcRoot: GcRoot): LeakTrace.GcRootType","title":"From gc root"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/from-gc-root/#fromgcroot","text":"fun fromGcRoot(gcRoot: GcRoot): LeakTrace.GcRootType","title":"fromGcRoot"},{"location":"api/shark/shark/-leak-trace-object/","text":"shark / shark / LeakTraceObject LeakTraceObject data class LeakTraceObject : Serializable Types Name Summary LeakingStatus enum class LeakingStatus ObjectType enum class ObjectType Constructors Name Summary init LeakTraceObject(type: LeakTraceObject.ObjectType , className: String , labels: Set String , leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String ) Properties Name Summary className val className: String Class name of the object. The class name format is the same as what would be returned by Class.getName . classSimpleName val classSimpleName: String Returns {@link #className} without the package, ie stripped of any string content before the last period (included). labels val labels: Set String Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object. leakingStatus val leakingStatus: LeakTraceObject.LeakingStatus leakingStatusReason val leakingStatusReason: String type val type: LeakTraceObject.ObjectType typeName val typeName: String","title":"Home"},{"location":"api/shark/shark/-leak-trace-object/#leaktraceobject","text":"data class LeakTraceObject : Serializable","title":"LeakTraceObject"},{"location":"api/shark/shark/-leak-trace-object/#types","text":"Name Summary LeakingStatus enum class LeakingStatus ObjectType enum class ObjectType","title":"Types"},{"location":"api/shark/shark/-leak-trace-object/#constructors","text":"Name Summary init LeakTraceObject(type: LeakTraceObject.ObjectType , className: String , labels: Set String , leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String )","title":"Constructors"},{"location":"api/shark/shark/-leak-trace-object/#properties","text":"Name Summary className val className: String Class name of the object. The class name format is the same as what would be returned by Class.getName . classSimpleName val classSimpleName: String Returns {@link #className} without the package, ie stripped of any string content before the last period (included). labels val labels: Set String Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object. leakingStatus val leakingStatus: LeakTraceObject.LeakingStatus leakingStatusReason val leakingStatusReason: String type val type: LeakTraceObject.ObjectType typeName val typeName: String","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-init-/","text":"shark / shark / LeakTraceObject / init init LeakTraceObject(type: LeakTraceObject.ObjectType , className: String , labels: Set String , leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String )","title":" init "},{"location":"api/shark/shark/-leak-trace-object/-init-/#init","text":"LeakTraceObject(type: LeakTraceObject.ObjectType , className: String , labels: Set String , leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String )","title":"&lt;init&gt;"},{"location":"api/shark/shark/-leak-trace-object/class-name/","text":"shark / shark / LeakTraceObject / className className val className: String Class name of the object. The class name format is the same as what would be returned by Class.getName .","title":"Class name"},{"location":"api/shark/shark/-leak-trace-object/class-name/#classname","text":"val className: String Class name of the object. The class name format is the same as what would be returned by Class.getName .","title":"className"},{"location":"api/shark/shark/-leak-trace-object/class-simple-name/","text":"shark / shark / LeakTraceObject / classSimpleName classSimpleName val classSimpleName: String Returns {@link #className} without the package, ie stripped of any string content before the last period (included).","title":"Class simple name"},{"location":"api/shark/shark/-leak-trace-object/class-simple-name/#classsimplename","text":"val classSimpleName: String Returns {@link #className} without the package, ie stripped of any string content before the last period (included).","title":"classSimpleName"},{"location":"api/shark/shark/-leak-trace-object/labels/","text":"shark / shark / LeakTraceObject / labels labels val labels: Set String Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object.","title":"Labels"},{"location":"api/shark/shark/-leak-trace-object/labels/#labels","text":"val labels: Set String Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object.","title":"labels"},{"location":"api/shark/shark/-leak-trace-object/leaking-status-reason/","text":"shark / shark / LeakTraceObject / leakingStatusReason leakingStatusReason val leakingStatusReason: String","title":"Leaking status reason"},{"location":"api/shark/shark/-leak-trace-object/leaking-status-reason/#leakingstatusreason","text":"val leakingStatusReason: String","title":"leakingStatusReason"},{"location":"api/shark/shark/-leak-trace-object/leaking-status/","text":"shark / shark / LeakTraceObject / leakingStatus leakingStatus val leakingStatus: LeakTraceObject.LeakingStatus","title":"Leaking status"},{"location":"api/shark/shark/-leak-trace-object/leaking-status/#leakingstatus","text":"val leakingStatus: LeakTraceObject.LeakingStatus","title":"leakingStatus"},{"location":"api/shark/shark/-leak-trace-object/type-name/","text":"shark / shark / LeakTraceObject / typeName typeName val typeName: String","title":"Type name"},{"location":"api/shark/shark/-leak-trace-object/type-name/#typename","text":"val typeName: String","title":"typeName"},{"location":"api/shark/shark/-leak-trace-object/type/","text":"shark / shark / LeakTraceObject / type type val type: LeakTraceObject.ObjectType","title":"Type"},{"location":"api/shark/shark/-leak-trace-object/type/#type","text":"val type: LeakTraceObject.ObjectType","title":"type"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/","text":"shark / shark / LeakTraceObject / LeakingStatus LeakingStatus enum class LeakingStatus Enum Values Name Summary NOT_LEAKING The object was needed and therefore expected to be reachable. LEAKING The object was no longer needed and therefore expected to be unreachable. UNKNOWN No decision can be made about the provided object.","title":"Home"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/#leakingstatus","text":"enum class LeakingStatus","title":"LeakingStatus"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/#enum-values","text":"Name Summary NOT_LEAKING The object was needed and therefore expected to be reachable. LEAKING The object was no longer needed and therefore expected to be unreachable. UNKNOWN No decision can be made about the provided object.","title":"Enum Values"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-l-e-a-k-i-n-g/","text":"shark / shark / LeakTraceObject / LeakingStatus / LEAKING LEAKING LEAKING The object was no longer needed and therefore expected to be unreachable.","title":" l e a k i n g"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-l-e-a-k-i-n-g/#leaking","text":"LEAKING The object was no longer needed and therefore expected to be unreachable.","title":"LEAKING"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-n-o-t_-l-e-a-k-i-n-g/","text":"shark / shark / LeakTraceObject / LeakingStatus / NOT_LEAKING NOT_LEAKING NOT_LEAKING The object was needed and therefore expected to be reachable.","title":" n o t  l e a k i n g"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-n-o-t_-l-e-a-k-i-n-g/#not_leaking","text":"NOT_LEAKING The object was needed and therefore expected to be reachable.","title":"NOT_LEAKING"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-u-n-k-n-o-w-n/","text":"shark / shark / LeakTraceObject / LeakingStatus / UNKNOWN UNKNOWN UNKNOWN No decision can be made about the provided object.","title":" u n k n o w n"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-u-n-k-n-o-w-n/#unknown","text":"UNKNOWN No decision can be made about the provided object.","title":"UNKNOWN"},{"location":"api/shark/shark/-leak-trace-object/-object-type/","text":"shark / shark / LeakTraceObject / ObjectType ObjectType enum class ObjectType Enum Values Name Summary CLASS ARRAY INSTANCE","title":"Home"},{"location":"api/shark/shark/-leak-trace-object/-object-type/#objecttype","text":"enum class ObjectType","title":"ObjectType"},{"location":"api/shark/shark/-leak-trace-object/-object-type/#enum-values","text":"Name Summary CLASS ARRAY INSTANCE","title":"Enum Values"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-a-r-r-a-y/","text":"shark / shark / LeakTraceObject / ObjectType / ARRAY ARRAY ARRAY","title":" a r r a y"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-a-r-r-a-y/#array","text":"ARRAY","title":"ARRAY"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-c-l-a-s-s/","text":"shark / shark / LeakTraceObject / ObjectType / CLASS CLASS CLASS","title":" c l a s s"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-c-l-a-s-s/#class","text":"CLASS","title":"CLASS"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-i-n-s-t-a-n-c-e/","text":"shark / shark / LeakTraceObject / ObjectType / INSTANCE INSTANCE INSTANCE","title":" i n s t a n c e"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-i-n-s-t-a-n-c-e/#instance","text":"INSTANCE","title":"INSTANCE"},{"location":"api/shark/shark/-leak-trace-reference/","text":"shark / shark / LeakTraceReference LeakTraceReference data class LeakTraceReference : Serializable A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . Types Name Summary ReferenceType enum class ReferenceType Constructors Name Summary init LeakTraceReference(originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , referenceName: String ) A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . Properties Name Summary originObject val originObject: LeakTraceObject referenceDisplayName val referenceDisplayName: String referenceGenericName val referenceGenericName: String referenceName val referenceName: String referenceType val referenceType: LeakTraceReference.ReferenceType","title":"Home"},{"location":"api/shark/shark/-leak-trace-reference/#leaktracereference","text":"data class LeakTraceReference : Serializable A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath .","title":"LeakTraceReference"},{"location":"api/shark/shark/-leak-trace-reference/#types","text":"Name Summary ReferenceType enum class ReferenceType","title":"Types"},{"location":"api/shark/shark/-leak-trace-reference/#constructors","text":"Name Summary init LeakTraceReference(originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , referenceName: String ) A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath .","title":"Constructors"},{"location":"api/shark/shark/-leak-trace-reference/#properties","text":"Name Summary originObject val originObject: LeakTraceObject referenceDisplayName val referenceDisplayName: String referenceGenericName val referenceGenericName: String referenceName val referenceName: String referenceType val referenceType: LeakTraceReference.ReferenceType","title":"Properties"},{"location":"api/shark/shark/-leak-trace-reference/-init-/","text":"shark / shark / LeakTraceReference / init init LeakTraceReference(originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , referenceName: String ) A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath .","title":" init "},{"location":"api/shark/shark/-leak-trace-reference/-init-/#init","text":"LeakTraceReference(originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , referenceName: String ) A LeakTraceReference represents and origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-leak-trace-reference/origin-object/","text":"shark / shark / LeakTraceReference / originObject originObject val originObject: LeakTraceObject","title":"Origin object"},{"location":"api/shark/shark/-leak-trace-reference/origin-object/#originobject","text":"val originObject: LeakTraceObject","title":"originObject"},{"location":"api/shark/shark/-leak-trace-reference/reference-display-name/","text":"shark / shark / LeakTraceReference / referenceDisplayName referenceDisplayName val referenceDisplayName: String","title":"Reference display name"},{"location":"api/shark/shark/-leak-trace-reference/reference-display-name/#referencedisplayname","text":"val referenceDisplayName: String","title":"referenceDisplayName"},{"location":"api/shark/shark/-leak-trace-reference/reference-generic-name/","text":"shark / shark / LeakTraceReference / referenceGenericName referenceGenericName val referenceGenericName: String","title":"Reference generic name"},{"location":"api/shark/shark/-leak-trace-reference/reference-generic-name/#referencegenericname","text":"val referenceGenericName: String","title":"referenceGenericName"},{"location":"api/shark/shark/-leak-trace-reference/reference-name/","text":"shark / shark / LeakTraceReference / referenceName referenceName val referenceName: String","title":"Reference name"},{"location":"api/shark/shark/-leak-trace-reference/reference-name/#referencename","text":"val referenceName: String","title":"referenceName"},{"location":"api/shark/shark/-leak-trace-reference/reference-type/","text":"shark / shark / LeakTraceReference / referenceType referenceType val referenceType: LeakTraceReference.ReferenceType","title":"Reference type"},{"location":"api/shark/shark/-leak-trace-reference/reference-type/#referencetype","text":"val referenceType: LeakTraceReference.ReferenceType","title":"referenceType"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/","text":"shark / shark / LeakTraceReference / ReferenceType ReferenceType enum class ReferenceType Enum Values Name Summary INSTANCE_FIELD STATIC_FIELD LOCAL ARRAY_ENTRY","title":"Home"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/#referencetype","text":"enum class ReferenceType","title":"ReferenceType"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/#enum-values","text":"Name Summary INSTANCE_FIELD STATIC_FIELD LOCAL ARRAY_ENTRY","title":"Enum Values"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-a-r-r-a-y_-e-n-t-r-y/","text":"shark / shark / LeakTraceReference / ReferenceType / ARRAY_ENTRY ARRAY_ENTRY ARRAY_ENTRY","title":" a r r a y  e n t r y"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-a-r-r-a-y_-e-n-t-r-y/#array_entry","text":"ARRAY_ENTRY","title":"ARRAY_ENTRY"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d/","text":"shark / shark / LeakTraceReference / ReferenceType / INSTANCE_FIELD INSTANCE_FIELD INSTANCE_FIELD","title":" i n s t a n c e  f i e l d"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d/#instance_field","text":"INSTANCE_FIELD","title":"INSTANCE_FIELD"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-l-o-c-a-l/","text":"shark / shark / LeakTraceReference / ReferenceType / LOCAL LOCAL LOCAL","title":" l o c a l"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-l-o-c-a-l/#local","text":"LOCAL","title":"LOCAL"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-s-t-a-t-i-c_-f-i-e-l-d/","text":"shark / shark / LeakTraceReference / ReferenceType / STATIC_FIELD STATIC_FIELD STATIC_FIELD","title":" s t a t i c  f i e l d"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-s-t-a-t-i-c_-f-i-e-l-d/#static_field","text":"STATIC_FIELD","title":"STATIC_FIELD"},{"location":"api/shark/shark/-leaking-object-finder/","text":"shark / shark / LeakingObjectFinder LeakingObjectFinder interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. You can create a LeakingObjectFinder from a lambda by calling invoke . Functions Name Summary findLeakingObjectIds abstract fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking. Companion Object Functions Name Summary invoke operator fun invoke(block: (HeapGraph) - Set Long ): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax. Inheritors Name Summary FilteringLeakingObjectFinder class FilteringLeakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter KeyedWeakReferenceFinder object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch.","title":"Home"},{"location":"api/shark/shark/-leaking-object-finder/#leakingobjectfinder","text":"interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. You can create a LeakingObjectFinder from a lambda by calling invoke .","title":"LeakingObjectFinder"},{"location":"api/shark/shark/-leaking-object-finder/#functions","text":"Name Summary findLeakingObjectIds abstract fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Functions"},{"location":"api/shark/shark/-leaking-object-finder/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: (HeapGraph) - Set Long ): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax.","title":"Companion Object Functions"},{"location":"api/shark/shark/-leaking-object-finder/#inheritors","text":"Name Summary FilteringLeakingObjectFinder class FilteringLeakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter KeyedWeakReferenceFinder object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch.","title":"Inheritors"},{"location":"api/shark/shark/-leaking-object-finder/find-leaking-object-ids/","text":"shark / shark / LeakingObjectFinder / findLeakingObjectIds findLeakingObjectIds abstract fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Find leaking object ids"},{"location":"api/shark/shark/-leaking-object-finder/find-leaking-object-ids/#findleakingobjectids","text":"abstract fun findLeakingObjectIds(graph: HeapGraph): Set Long For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"findLeakingObjectIds"},{"location":"api/shark/shark/-leaking-object-finder/invoke/","text":"shark / shark / LeakingObjectFinder / invoke invoke inline operator fun invoke(crossinline block: (HeapGraph) - Set Long ): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax. Usage: val listener = LeakingObjectFinder { }","title":"Invoke"},{"location":"api/shark/shark/-leaking-object-finder/invoke/#invoke","text":"inline operator fun invoke(crossinline block: (HeapGraph) - Set Long ): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax. Usage: val listener = LeakingObjectFinder { }","title":"invoke"},{"location":"api/shark/shark/-library-leak/","text":"shark / shark / LibraryLeak LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. Constructors Name Summary init LibraryLeak(leakTraces: List LeakTrace , pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. Properties Name Summary description val description: String A description that conveys what we know about this library leak. leakTraces val leakTraces: List LeakTrace Group of leak traces which share the same leak signature. pattern val pattern: ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance. shortDescription val shortDescription: String signature val signature: String A unique SHA1 hash that represents this group of leak traces. Inherited Properties Name Summary totalRetainedHeapByteSize val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-library-leak/#libraryleak","text":"data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"LibraryLeak"},{"location":"api/shark/shark/-library-leak/#constructors","text":"Name Summary init LibraryLeak(leakTraces: List LeakTrace , pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"Constructors"},{"location":"api/shark/shark/-library-leak/#properties","text":"Name Summary description val description: String A description that conveys what we know about this library leak. leakTraces val leakTraces: List LeakTrace Group of leak traces which share the same leak signature. pattern val pattern: ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance. shortDescription val shortDescription: String signature val signature: String A unique SHA1 hash that represents this group of leak traces.","title":"Properties"},{"location":"api/shark/shark/-library-leak/#inherited-properties","text":"Name Summary totalRetainedHeapByteSize val totalRetainedHeapByteSize: Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Inherited Properties"},{"location":"api/shark/shark/-library-leak/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-library-leak/-init-/","text":"shark / shark / LibraryLeak / init init LibraryLeak(leakTraces: List LeakTrace , pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":" init "},{"location":"api/shark/shark/-library-leak/-init-/#init","text":"LibraryLeak(leakTraces: List LeakTrace , pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-library-leak/description/","text":"shark / shark / LibraryLeak / description description val description: String A description that conveys what we know about this library leak.","title":"Description"},{"location":"api/shark/shark/-library-leak/description/#description","text":"val description: String A description that conveys what we know about this library leak.","title":"description"},{"location":"api/shark/shark/-library-leak/leak-traces/","text":"shark / shark / LibraryLeak / leakTraces leakTraces val leakTraces: List LeakTrace Overrides Leak.leakTraces Group of leak traces which share the same leak signature.","title":"Leak traces"},{"location":"api/shark/shark/-library-leak/leak-traces/#leaktraces","text":"val leakTraces: List LeakTrace Overrides Leak.leakTraces Group of leak traces which share the same leak signature.","title":"leakTraces"},{"location":"api/shark/shark/-library-leak/pattern/","text":"shark / shark / LibraryLeak / pattern pattern val pattern: ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance.","title":"Pattern"},{"location":"api/shark/shark/-library-leak/pattern/#pattern","text":"val pattern: ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance.","title":"pattern"},{"location":"api/shark/shark/-library-leak/short-description/","text":"shark / shark / LibraryLeak / shortDescription shortDescription val shortDescription: String Overrides Leak.shortDescription","title":"Short description"},{"location":"api/shark/shark/-library-leak/short-description/#shortdescription","text":"val shortDescription: String Overrides Leak.shortDescription","title":"shortDescription"},{"location":"api/shark/shark/-library-leak/signature/","text":"shark / shark / LibraryLeak / signature signature val signature: String Overrides Leak.signature A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"Signature"},{"location":"api/shark/shark/-library-leak/signature/#signature","text":"val signature: String Overrides Leak.signature A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"signature"},{"location":"api/shark/shark/-library-leak/to-string/","text":"shark / shark / LibraryLeak / toString toString fun toString(): String Overrides Leak.toString","title":"To string"},{"location":"api/shark/shark/-library-leak/to-string/#tostring","text":"fun toString(): String Overrides Leak.toString","title":"toString"},{"location":"api/shark/shark/-library-leak-reference-matcher/","text":"shark / shark / LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . Constructors Name Summary init LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) - Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . Properties Name Summary description val description: String A description that conveys what we know about this library leak. pattern val pattern: ReferencePattern The pattern that references will be matched against. patternApplies val patternApplies: (HeapGraph) - Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn t have the leak, then this should return false. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-library-leak-reference-matcher/#libraryleakreferencematcher","text":"data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"LibraryLeakReferenceMatcher"},{"location":"api/shark/shark/-library-leak-reference-matcher/#constructors","text":"Name Summary init LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) - Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"Constructors"},{"location":"api/shark/shark/-library-leak-reference-matcher/#properties","text":"Name Summary description val description: String A description that conveys what we know about this library leak. pattern val pattern: ReferencePattern The pattern that references will be matched against. patternApplies val patternApplies: (HeapGraph) - Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn t have the leak, then this should return false.","title":"Properties"},{"location":"api/shark/shark/-library-leak-reference-matcher/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-library-leak-reference-matcher/-init-/","text":"shark / shark / LibraryLeakReferenceMatcher / init init LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) - Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":" init "},{"location":"api/shark/shark/-library-leak-reference-matcher/-init-/#init","text":"LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) - Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-library-leak-reference-matcher/description/","text":"shark / shark / LibraryLeakReferenceMatcher / description description val description: String A description that conveys what we know about this library leak.","title":"Description"},{"location":"api/shark/shark/-library-leak-reference-matcher/description/#description","text":"val description: String A description that conveys what we know about this library leak.","title":"description"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern-applies/","text":"shark / shark / LibraryLeakReferenceMatcher / patternApplies patternApplies val patternApplies: (HeapGraph) - Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn t have the leak, then this should return false.","title":"Pattern applies"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern-applies/#patternapplies","text":"val patternApplies: (HeapGraph) - Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn t have the leak, then this should return false.","title":"patternApplies"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern/","text":"shark / shark / LibraryLeakReferenceMatcher / pattern pattern val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern/#pattern","text":"val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-library-leak-reference-matcher/to-string/","text":"shark / shark / LibraryLeakReferenceMatcher / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-library-leak-reference-matcher/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-metadata-extractor/","text":"shark / shark / MetadataExtractor MetadataExtractor interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . You can create a MetadataExtractor from a lambda by calling invoke . Functions Name Summary extractMetadata abstract fun extractMetadata(graph: HeapGraph): Map String , String Companion Object Properties Name Summary NO_OP val NO_OP: MetadataExtractor A no-op MetadataExtractor Companion Object Functions Name Summary invoke operator fun invoke(block: (HeapGraph) - Map String , String ): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax.","title":"Home"},{"location":"api/shark/shark/-metadata-extractor/#metadataextractor","text":"interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . You can create a MetadataExtractor from a lambda by calling invoke .","title":"MetadataExtractor"},{"location":"api/shark/shark/-metadata-extractor/#functions","text":"Name Summary extractMetadata abstract fun extractMetadata(graph: HeapGraph): Map String , String","title":"Functions"},{"location":"api/shark/shark/-metadata-extractor/#companion-object-properties","text":"Name Summary NO_OP val NO_OP: MetadataExtractor A no-op MetadataExtractor","title":"Companion Object Properties"},{"location":"api/shark/shark/-metadata-extractor/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: (HeapGraph) - Map String , String ): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax.","title":"Companion Object Functions"},{"location":"api/shark/shark/-metadata-extractor/-n-o_-o-p/","text":"shark / shark / MetadataExtractor / NO_OP NO_OP val NO_OP: MetadataExtractor A no-op MetadataExtractor","title":" n o  o p"},{"location":"api/shark/shark/-metadata-extractor/-n-o_-o-p/#no_op","text":"val NO_OP: MetadataExtractor A no-op MetadataExtractor","title":"NO_OP"},{"location":"api/shark/shark/-metadata-extractor/extract-metadata/","text":"shark / shark / MetadataExtractor / extractMetadata extractMetadata abstract fun extractMetadata(graph: HeapGraph): Map String , String","title":"Extract metadata"},{"location":"api/shark/shark/-metadata-extractor/extract-metadata/#extractmetadata","text":"abstract fun extractMetadata(graph: HeapGraph): Map String , String","title":"extractMetadata"},{"location":"api/shark/shark/-metadata-extractor/invoke/","text":"shark / shark / MetadataExtractor / invoke invoke inline operator fun invoke(crossinline block: (HeapGraph) - Map String , String ): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax. Usage: val inspector = MetadataExtractor { graph - }","title":"Invoke"},{"location":"api/shark/shark/-metadata-extractor/invoke/#invoke","text":"inline operator fun invoke(crossinline block: (HeapGraph) - Map String , String ): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax. Usage: val inspector = MetadataExtractor { graph - }","title":"invoke"},{"location":"api/shark/shark/-object-inspector/","text":"shark / shark / ObjectInspector ObjectInspector interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. You can create a ObjectInspector from a lambda by calling invoke . Functions Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit Companion Object Functions Name Summary invoke operator fun invoke(block: ( ObjectReporter ) - Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Inheritors Name Summary AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects.","title":"Home"},{"location":"api/shark/shark/-object-inspector/#objectinspector","text":"interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. You can create a ObjectInspector from a lambda by calling invoke .","title":"ObjectInspector"},{"location":"api/shark/shark/-object-inspector/#functions","text":"Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspector/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: ( ObjectReporter ) - Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax.","title":"Companion Object Functions"},{"location":"api/shark/shark/-object-inspector/#inheritors","text":"Name Summary AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they re app wide singletons. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects.","title":"Inheritors"},{"location":"api/shark/shark/-object-inspector/inspect/","text":"shark / shark / ObjectInspector / inspect inspect abstract fun inspect(reporter: ObjectReporter ): Unit See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspector/inspect/#inspect","text":"abstract fun inspect(reporter: ObjectReporter ): Unit See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspector/invoke/","text":"shark / shark / ObjectInspector / invoke invoke inline operator fun invoke(crossinline block: ( ObjectReporter ) - Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val inspector = ObjectInspector { reporter - }","title":"Invoke"},{"location":"api/shark/shark/-object-inspector/invoke/#invoke","text":"inline operator fun invoke(crossinline block: ( ObjectReporter ) - Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val inspector = ObjectInspector { reporter - }","title":"invoke"},{"location":"api/shark/shark/-object-inspectors/","text":"shark / shark / ObjectInspectors ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. Enum Values Name Summary KEYED_WEAK_REFERENCE CLASSLOADER CLASS ANONYMOUS_CLASS THREAD Inherited Functions Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit Companion Object Properties Name Summary jdkDefaults val jdkDefaults: List ObjectInspector jdkLeakingObjectFilters val jdkLeakingObjectFilters: List FilteringLeakingObjectFinder.LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for common JDK projects. Companion Object Functions Name Summary createLeakingObjectFilters fun createLeakingObjectFilters(inspectors: Set ObjectInspectors ): List FilteringLeakingObjectFinder.LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors .","title":"Home"},{"location":"api/shark/shark/-object-inspectors/#objectinspectors","text":"enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects.","title":"ObjectInspectors"},{"location":"api/shark/shark/-object-inspectors/#enum-values","text":"Name Summary KEYED_WEAK_REFERENCE CLASSLOADER CLASS ANONYMOUS_CLASS THREAD","title":"Enum Values"},{"location":"api/shark/shark/-object-inspectors/#inherited-functions","text":"Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit","title":"Inherited Functions"},{"location":"api/shark/shark/-object-inspectors/#companion-object-properties","text":"Name Summary jdkDefaults val jdkDefaults: List ObjectInspector jdkLeakingObjectFilters val jdkLeakingObjectFilters: List FilteringLeakingObjectFinder.LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for common JDK projects.","title":"Companion Object Properties"},{"location":"api/shark/shark/-object-inspectors/#companion-object-functions","text":"Name Summary createLeakingObjectFilters fun createLeakingObjectFilters(inspectors: Set ObjectInspectors ): List FilteringLeakingObjectFinder.LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors .","title":"Companion Object Functions"},{"location":"api/shark/shark/-object-inspectors/create-leaking-object-filters/","text":"shark / shark / ObjectInspectors / createLeakingObjectFilters createLeakingObjectFilters fun createLeakingObjectFilters(inspectors: Set ObjectInspectors ): List FilteringLeakingObjectFinder.LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors .","title":"Create leaking object filters"},{"location":"api/shark/shark/-object-inspectors/create-leaking-object-filters/#createleakingobjectfilters","text":"fun createLeakingObjectFilters(inspectors: Set ObjectInspectors ): List FilteringLeakingObjectFinder.LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors .","title":"createLeakingObjectFilters"},{"location":"api/shark/shark/-object-inspectors/jdk-defaults/","text":"shark / shark / ObjectInspectors / jdkDefaults jdkDefaults val jdkDefaults: List ObjectInspector See Also ObjectInspectors","title":"Jdk defaults"},{"location":"api/shark/shark/-object-inspectors/jdk-defaults/#jdkdefaults","text":"val jdkDefaults: List ObjectInspector See Also ObjectInspectors","title":"jdkDefaults"},{"location":"api/shark/shark/-object-inspectors/jdk-leaking-object-filters/","text":"shark / shark / ObjectInspectors / jdkLeakingObjectFilters jdkLeakingObjectFilters val jdkLeakingObjectFilters: List FilteringLeakingObjectFinder.LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for common JDK projects.","title":"Jdk leaking object filters"},{"location":"api/shark/shark/-object-inspectors/jdk-leaking-object-filters/#jdkleakingobjectfilters","text":"val jdkLeakingObjectFilters: List FilteringLeakingObjectFinder.LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for common JDK projects.","title":"jdkLeakingObjectFilters"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/","text":"shark / shark / ObjectInspectors / ANONYMOUS_CLASS ANONYMOUS_CLASS ANONYMOUS_CLASS Functions Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/#anonymous_class","text":"ANONYMOUS_CLASS","title":"ANONYMOUS_CLASS"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect/","text":"shark / shark / ObjectInspectors / ANONYMOUS_CLASS / inspect inspect fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/","text":"shark / shark / ObjectInspectors / CLASS CLASS CLASS Functions Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/#class","text":"CLASS","title":"CLASS"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect/","text":"shark / shark / ObjectInspectors / CLASS / inspect inspect fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/","text":"shark / shark / ObjectInspectors / CLASSLOADER CLASSLOADER CLASSLOADER Functions Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/#classloader","text":"CLASSLOADER","title":"CLASSLOADER"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect/","text":"shark / shark / ObjectInspectors / CLASSLOADER / inspect inspect fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/","text":"shark / shark / ObjectInspectors / KEYED_WEAK_REFERENCE KEYED_WEAK_REFERENCE KEYED_WEAK_REFERENCE Functions Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/#keyed_weak_reference","text":"KEYED_WEAK_REFERENCE","title":"KEYED_WEAK_REFERENCE"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect/","text":"shark / shark / ObjectInspectors / KEYED_WEAK_REFERENCE / inspect inspect fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/","text":"shark / shark / ObjectInspectors / THREAD THREAD THREAD Functions Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/#thread","text":"THREAD","title":"THREAD"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect/","text":"shark / shark / ObjectInspectors / THREAD / inspect inspect fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-reporter/","text":"shark / shark / ObjectReporter ObjectReporter class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights. Constructors Name Summary init ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. Properties Name Summary heapObject val heapObject: HeapObject labels val labels: LinkedHashSet String Labels that will be visible on the corresponding heapObject in the leak trace. leakingReasons val leakingReasons: MutableSet String Reasons for which this object is expected to be unreachable (ie it s leaking). likelyLeakingReasons val ~~likelyLeakingReasons~~: MutableSet String Deprecated, use leakingReasons instead. notLeakingReasons val notLeakingReasons: MutableSet String Reasons for which this object is expected to be reachable (ie it s not leaking). Functions Name Summary whenInstanceOf fun whenInstanceOf(expectedClass: KClass out Any , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"Home"},{"location":"api/shark/shark/-object-reporter/#objectreporter","text":"class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights.","title":"ObjectReporter"},{"location":"api/shark/shark/-object-reporter/#constructors","text":"Name Summary init ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap.","title":"Constructors"},{"location":"api/shark/shark/-object-reporter/#properties","text":"Name Summary heapObject val heapObject: HeapObject labels val labels: LinkedHashSet String Labels that will be visible on the corresponding heapObject in the leak trace. leakingReasons val leakingReasons: MutableSet String Reasons for which this object is expected to be unreachable (ie it s leaking). likelyLeakingReasons val ~~likelyLeakingReasons~~: MutableSet String Deprecated, use leakingReasons instead. notLeakingReasons val notLeakingReasons: MutableSet String Reasons for which this object is expected to be reachable (ie it s not leaking).","title":"Properties"},{"location":"api/shark/shark/-object-reporter/#functions","text":"Name Summary whenInstanceOf fun whenInstanceOf(expectedClass: KClass out Any , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"Functions"},{"location":"api/shark/shark/-object-reporter/-init-/","text":"shark / shark / ObjectReporter / init init ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights.","title":" init "},{"location":"api/shark/shark/-object-reporter/-init-/#init","text":"ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-object-reporter/heap-object/","text":"shark / shark / ObjectReporter / heapObject heapObject val heapObject: HeapObject","title":"Heap object"},{"location":"api/shark/shark/-object-reporter/heap-object/#heapobject","text":"val heapObject: HeapObject","title":"heapObject"},{"location":"api/shark/shark/-object-reporter/labels/","text":"shark / shark / ObjectReporter / labels labels val labels: LinkedHashSet String Labels that will be visible on the corresponding heapObject in the leak trace.","title":"Labels"},{"location":"api/shark/shark/-object-reporter/labels/#labels","text":"val labels: LinkedHashSet String Labels that will be visible on the corresponding heapObject in the leak trace.","title":"labels"},{"location":"api/shark/shark/-object-reporter/leaking-reasons/","text":"shark / shark / ObjectReporter / leakingReasons leakingReasons val leakingReasons: MutableSet String Reasons for which this object is expected to be unreachable (ie it s leaking).","title":"Leaking reasons"},{"location":"api/shark/shark/-object-reporter/leaking-reasons/#leakingreasons","text":"val leakingReasons: MutableSet String Reasons for which this object is expected to be unreachable (ie it s leaking).","title":"leakingReasons"},{"location":"api/shark/shark/-object-reporter/likely-leaking-reasons/","text":"shark / shark / ObjectReporter / likelyLeakingReasons likelyLeakingReasons val ~~likelyLeakingReasons~~: MutableSet String Deprecated: Replace likelyLeakingReasons with leakingReasons Deprecated, use leakingReasons instead.","title":"Likely leaking reasons"},{"location":"api/shark/shark/-object-reporter/likely-leaking-reasons/#likelyleakingreasons","text":"val ~~likelyLeakingReasons~~: MutableSet String Deprecated: Replace likelyLeakingReasons with leakingReasons Deprecated, use leakingReasons instead.","title":"likelyLeakingReasons"},{"location":"api/shark/shark/-object-reporter/not-leaking-reasons/","text":"shark / shark / ObjectReporter / notLeakingReasons notLeakingReasons val notLeakingReasons: MutableSet String Reasons for which this object is expected to be reachable (ie it s not leaking).","title":"Not leaking reasons"},{"location":"api/shark/shark/-object-reporter/not-leaking-reasons/#notleakingreasons","text":"val notLeakingReasons: MutableSet String Reasons for which this object is expected to be reachable (ie it s not leaking).","title":"notLeakingReasons"},{"location":"api/shark/shark/-object-reporter/when-instance-of/","text":"shark / shark / ObjectReporter / whenInstanceOf whenInstanceOf fun whenInstanceOf(expectedClass: KClass out Any , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"When instance of"},{"location":"api/shark/shark/-object-reporter/when-instance-of/#wheninstanceof","text":"fun whenInstanceOf(expectedClass: KClass out Any , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) - Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"whenInstanceOf"},{"location":"api/shark/shark/-on-analysis-progress-listener/","text":"shark / shark / OnAnalysisProgressListener OnAnalysisProgressListener interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. Types Name Summary Step enum class Step Functions Name Summary onAnalysisProgress abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit Companion Object Properties Name Summary NO_OP val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener Companion Object Functions Name Summary invoke operator fun invoke(block: ( OnAnalysisProgressListener.Step ) - Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax.","title":"Home"},{"location":"api/shark/shark/-on-analysis-progress-listener/#onanalysisprogresslistener","text":"interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values.","title":"OnAnalysisProgressListener"},{"location":"api/shark/shark/-on-analysis-progress-listener/#types","text":"Name Summary Step enum class Step","title":"Types"},{"location":"api/shark/shark/-on-analysis-progress-listener/#functions","text":"Name Summary onAnalysisProgress abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit","title":"Functions"},{"location":"api/shark/shark/-on-analysis-progress-listener/#companion-object-properties","text":"Name Summary NO_OP val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":"Companion Object Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: ( OnAnalysisProgressListener.Step ) - Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax.","title":"Companion Object Functions"},{"location":"api/shark/shark/-on-analysis-progress-listener/-n-o_-o-p/","text":"shark / shark / OnAnalysisProgressListener / NO_OP NO_OP val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":" n o  o p"},{"location":"api/shark/shark/-on-analysis-progress-listener/-n-o_-o-p/#no_op","text":"val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":"NO_OP"},{"location":"api/shark/shark/-on-analysis-progress-listener/invoke/","text":"shark / shark / OnAnalysisProgressListener / invoke invoke inline operator fun invoke(crossinline block: ( OnAnalysisProgressListener.Step ) - Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax. Usage: val listener = OnAnalysisProgressListener { }","title":"Invoke"},{"location":"api/shark/shark/-on-analysis-progress-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: ( OnAnalysisProgressListener.Step ) - Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax. Usage: val listener = OnAnalysisProgressListener { }","title":"invoke"},{"location":"api/shark/shark/-on-analysis-progress-listener/on-analysis-progress/","text":"shark / shark / OnAnalysisProgressListener / onAnalysisProgress onAnalysisProgress abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit","title":"On analysis progress"},{"location":"api/shark/shark/-on-analysis-progress-listener/on-analysis-progress/#onanalysisprogress","text":"abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit","title":"onAnalysisProgress"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/","text":"shark / shark / OnAnalysisProgressListener / Step Step enum class Step Enum Values Name Summary PARSING_HEAP_DUMP EXTRACTING_METADATA FINDING_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_DOMINATORS COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_RETAINED_SIZE BUILDING_LEAK_TRACES REPORTING_HEAP_ANALYSIS","title":"Home"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/#step","text":"enum class Step","title":"Step"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/#enum-values","text":"Name Summary PARSING_HEAP_DUMP EXTRACTING_METADATA FINDING_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_DOMINATORS COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_RETAINED_SIZE BUILDING_LEAK_TRACES REPORTING_HEAP_ANALYSIS","title":"Enum Values"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s/","text":"shark / shark / OnAnalysisProgressListener / Step / BUILDING_LEAK_TRACES BUILDING_LEAK_TRACES BUILDING_LEAK_TRACES","title":" b u i l d i n g  l e a k  t r a c e s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s/#building_leak_traces","text":"BUILDING_LEAK_TRACES","title":"BUILDING_LEAK_TRACES"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e/","text":"shark / shark / OnAnalysisProgressListener / Step / COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_NATIVE_RETAINED_SIZE","title":" c o m p u t i n g  n a t i v e  r e t a i n e d  s i z e"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e/#computing_native_retained_size","text":"COMPUTING_NATIVE_RETAINED_SIZE","title":"COMPUTING_NATIVE_RETAINED_SIZE"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e/","text":"shark / shark / OnAnalysisProgressListener / Step / COMPUTING_RETAINED_SIZE COMPUTING_RETAINED_SIZE COMPUTING_RETAINED_SIZE","title":" c o m p u t i n g  r e t a i n e d  s i z e"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e/#computing_retained_size","text":"COMPUTING_RETAINED_SIZE","title":"COMPUTING_RETAINED_SIZE"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-e-x-t-r-a-c-t-i-n-g_-m-e-t-a-d-a-t-a/","text":"shark / shark / OnAnalysisProgressListener / Step / EXTRACTING_METADATA EXTRACTING_METADATA EXTRACTING_METADATA","title":" e x t r a c t i n g  m e t a d a t a"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-e-x-t-r-a-c-t-i-n-g_-m-e-t-a-d-a-t-a/#extracting_metadata","text":"EXTRACTING_METADATA","title":"EXTRACTING_METADATA"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s/","text":"shark / shark / OnAnalysisProgressListener / Step / FINDING_DOMINATORS FINDING_DOMINATORS FINDING_DOMINATORS","title":" f i n d i n g  d o m i n a t o r s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s/#finding_dominators","text":"FINDING_DOMINATORS","title":"FINDING_DOMINATORS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/","text":"shark / shark / OnAnalysisProgressListener / Step / FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS","title":" f i n d i n g  p a t h s  t o  r e t a i n e d  o b j e c t s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#finding_paths_to_retained_objects","text":"FINDING_PATHS_TO_RETAINED_OBJECTS","title":"FINDING_PATHS_TO_RETAINED_OBJECTS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/","text":"shark / shark / OnAnalysisProgressListener / Step / FINDING_RETAINED_OBJECTS FINDING_RETAINED_OBJECTS FINDING_RETAINED_OBJECTS","title":" f i n d i n g  r e t a i n e d  o b j e c t s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#finding_retained_objects","text":"FINDING_RETAINED_OBJECTS","title":"FINDING_RETAINED_OBJECTS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p/","text":"shark / shark / OnAnalysisProgressListener / Step / PARSING_HEAP_DUMP PARSING_HEAP_DUMP PARSING_HEAP_DUMP","title":" p a r s i n g  h e a p  d u m p"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p/#parsing_heap_dump","text":"PARSING_HEAP_DUMP","title":"PARSING_HEAP_DUMP"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-r-e-p-o-r-t-i-n-g_-h-e-a-p_-a-n-a-l-y-s-i-s/","text":"shark / shark / OnAnalysisProgressListener / Step / REPORTING_HEAP_ANALYSIS REPORTING_HEAP_ANALYSIS REPORTING_HEAP_ANALYSIS","title":" r e p o r t i n g  h e a p  a n a l y s i s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-r-e-p-o-r-t-i-n-g_-h-e-a-p_-a-n-a-l-y-s-i-s/#reporting_heap_analysis","text":"REPORTING_HEAP_ANALYSIS","title":"REPORTING_HEAP_ANALYSIS"},{"location":"api/shark/shark/-reference-matcher/","text":"shark / shark / ReferenceMatcher ReferenceMatcher sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). Properties Name Summary pattern abstract val pattern: ReferencePattern The pattern that references will be matched against. Inheritors Name Summary IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"Home"},{"location":"api/shark/shark/-reference-matcher/#referencematcher","text":"sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ).","title":"ReferenceMatcher"},{"location":"api/shark/shark/-reference-matcher/#properties","text":"Name Summary pattern abstract val pattern: ReferencePattern The pattern that references will be matched against.","title":"Properties"},{"location":"api/shark/shark/-reference-matcher/#inheritors","text":"Name Summary IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"Inheritors"},{"location":"api/shark/shark/-reference-matcher/pattern/","text":"shark / shark / ReferenceMatcher / pattern pattern abstract val pattern: ReferencePattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-reference-matcher/pattern/#pattern","text":"abstract val pattern: ReferencePattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-reference-pattern/","text":"shark / shark / ReferencePattern ReferencePattern sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher . Types Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName . Inheritors Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"Home"},{"location":"api/shark/shark/-reference-pattern/#referencepattern","text":"sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher .","title":"ReferencePattern"},{"location":"api/shark/shark/-reference-pattern/#types","text":"Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"Types"},{"location":"api/shark/shark/-reference-pattern/#inheritors","text":"Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"Inheritors"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/","text":"shark / shark / ReferencePattern / InstanceFieldPattern InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins. Constructors Name Summary init InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName . Properties Name Summary className val className: String fieldName val fieldName: String Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#instancefieldpattern","text":"data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins.","title":"InstanceFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#constructors","text":"Name Summary init InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName .","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#properties","text":"Name Summary className val className: String fieldName val fieldName: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-init-/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / init init InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins.","title":" init "},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-init-/#init","text":"InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/class-name/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / className className val className: String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/class-name/#classname","text":"val className: String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/field-name/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / fieldName fieldName val fieldName: String","title":"Field name"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/field-name/#fieldname","text":"val fieldName: String","title":"fieldName"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/to-string/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/","text":"shark / shark / ReferencePattern / JavaLocalPattern JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. Constructors Name Summary init JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name. Properties Name Summary threadName val threadName: String Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#javalocalpattern","text":"data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name.","title":"JavaLocalPattern"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#constructors","text":"Name Summary init JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name.","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#properties","text":"Name Summary threadName val threadName: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-init-/","text":"shark / shark / ReferencePattern / JavaLocalPattern / init init JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name.","title":" init "},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-init-/#init","text":"JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/thread-name/","text":"shark / shark / ReferencePattern / JavaLocalPattern / threadName threadName val threadName: String","title":"Thread name"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/thread-name/#threadname","text":"val threadName: String","title":"threadName"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/to-string/","text":"shark / shark / ReferencePattern / JavaLocalPattern / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. Constructors Name Summary init NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. Properties Name Summary className val className: String Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#nativeglobalvariablepattern","text":"data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":"NativeGlobalVariablePattern"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#constructors","text":"Name Summary init NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#properties","text":"Name Summary className val className: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-init-/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern / init init NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":" init "},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-init-/#init","text":"NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/class-name/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern / className className val className: String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/class-name/#classname","text":"val className: String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/to-string/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/","text":"shark / shark / ReferencePattern / StaticFieldPattern StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName . Constructors Name Summary init StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName . Properties Name Summary className val className: String fieldName val fieldName: String Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#staticfieldpattern","text":"data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"StaticFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#constructors","text":"Name Summary init StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName .","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#properties","text":"Name Summary className val className: String fieldName val fieldName: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-init-/","text":"shark / shark / ReferencePattern / StaticFieldPattern / init init StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName .","title":" init "},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-init-/#init","text":"StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/class-name/","text":"shark / shark / ReferencePattern / StaticFieldPattern / className className val className: String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/class-name/#classname","text":"val className: String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/field-name/","text":"shark / shark / ReferencePattern / StaticFieldPattern / fieldName fieldName val fieldName: String","title":"Field name"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/field-name/#fieldname","text":"val fieldName: String","title":"fieldName"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/to-string/","text":"shark / shark / ReferencePattern / StaticFieldPattern / toString toString fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-android/","text":"shark-android Packages Name Summary shark Index All Types","title":"Home"},{"location":"api/shark-android/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-android/#index","text":"All Types","title":"Index"},{"location":"api/shark-android/alltypes/","text":"All Types Name Summary shark.AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . shark.AndroidMetadataExtractor shark.AndroidObjectInspectors A set of default ObjectInspector s that knows about common AOSP and library classes. shark.AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . shark.AndroidResourceIdNames","title":"Home"},{"location":"api/shark-android/alltypes/#all-types","text":"Name Summary shark.AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . shark.AndroidMetadataExtractor shark.AndroidObjectInspectors A set of default ObjectInspector s that knows about common AOSP and library classes. shark.AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . shark.AndroidResourceIdNames","title":"All Types"},{"location":"api/shark-android/shark/","text":"shark-android / shark Package shark Types Name Summary AndroidBuildMirror class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . AndroidMetadataExtractor object AndroidMetadataExtractor : MetadataExtractor AndroidObjectInspectors enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. AndroidReferenceMatchers enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . AndroidResourceIdNames class AndroidResourceIdNames","title":"Extension: Shark Android"},{"location":"api/shark-android/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-android/shark/#types","text":"Name Summary AndroidBuildMirror class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . AndroidMetadataExtractor object AndroidMetadataExtractor : MetadataExtractor AndroidObjectInspectors enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. AndroidReferenceMatchers enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . AndroidResourceIdNames class AndroidResourceIdNames","title":"Types"},{"location":"api/shark-android/shark/-android-build-mirror/","text":"shark-android / shark / AndroidBuildMirror AndroidBuildMirror class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . Constructors Name Summary init AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . Properties Name Summary manufacturer val manufacturer: String Value of android.os.Build.MANUFACTURER sdkInt val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT Companion Object Functions Name Summary fromHeapGraph fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror","title":"Home"},{"location":"api/shark-android/shark/-android-build-mirror/#androidbuildmirror","text":"class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":"AndroidBuildMirror"},{"location":"api/shark-android/shark/-android-build-mirror/#constructors","text":"Name Summary init AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":"Constructors"},{"location":"api/shark-android/shark/-android-build-mirror/#properties","text":"Name Summary manufacturer val manufacturer: String Value of android.os.Build.MANUFACTURER sdkInt val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT","title":"Properties"},{"location":"api/shark-android/shark/-android-build-mirror/#companion-object-functions","text":"Name Summary fromHeapGraph fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror","title":"Companion Object Functions"},{"location":"api/shark-android/shark/-android-build-mirror/-init-/","text":"shark-android / shark / AndroidBuildMirror / init init AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":" init "},{"location":"api/shark-android/shark/-android-build-mirror/-init-/#init","text":"AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":"&lt;init&gt;"},{"location":"api/shark-android/shark/-android-build-mirror/from-heap-graph/","text":"shark-android / shark / AndroidBuildMirror / fromHeapGraph fromHeapGraph fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror See Also AndroidBuildMirror","title":"From heap graph"},{"location":"api/shark-android/shark/-android-build-mirror/from-heap-graph/#fromheapgraph","text":"fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror See Also AndroidBuildMirror","title":"fromHeapGraph"},{"location":"api/shark-android/shark/-android-build-mirror/manufacturer/","text":"shark-android / shark / AndroidBuildMirror / manufacturer manufacturer val manufacturer: String Value of android.os.Build.MANUFACTURER","title":"Manufacturer"},{"location":"api/shark-android/shark/-android-build-mirror/manufacturer/#manufacturer","text":"val manufacturer: String Value of android.os.Build.MANUFACTURER","title":"manufacturer"},{"location":"api/shark-android/shark/-android-build-mirror/sdk-int/","text":"shark-android / shark / AndroidBuildMirror / sdkInt sdkInt val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT","title":"Sdk int"},{"location":"api/shark-android/shark/-android-build-mirror/sdk-int/#sdkint","text":"val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT","title":"sdkInt"},{"location":"api/shark-android/shark/-android-metadata-extractor/","text":"shark-android / shark / AndroidMetadataExtractor AndroidMetadataExtractor object AndroidMetadataExtractor : MetadataExtractor Functions Name Summary extractMetadata fun extractMetadata(graph: HeapGraph): Map String , String","title":"Home"},{"location":"api/shark-android/shark/-android-metadata-extractor/#androidmetadataextractor","text":"object AndroidMetadataExtractor : MetadataExtractor","title":"AndroidMetadataExtractor"},{"location":"api/shark-android/shark/-android-metadata-extractor/#functions","text":"Name Summary extractMetadata fun extractMetadata(graph: HeapGraph): Map String , String","title":"Functions"},{"location":"api/shark-android/shark/-android-metadata-extractor/extract-metadata/","text":"shark-android / shark / AndroidMetadataExtractor / extractMetadata extractMetadata fun extractMetadata(graph: HeapGraph): Map String , String","title":"Extract metadata"},{"location":"api/shark-android/shark/-android-metadata-extractor/extract-metadata/#extractmetadata","text":"fun extractMetadata(graph: HeapGraph): Map String , String","title":"extractMetadata"},{"location":"api/shark-android/shark/-android-object-inspectors/","text":"shark-android / shark / AndroidObjectInspectors AndroidObjectInspectors enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. These are heuristics based on our experience and knowledge of AOSP and various library internals. We only make a decision if we re reasonably sure the state of an object is unlikely to be the result of a programmer mistake. For example, no matter how many mistakes we make in our code, the value of Activity.mDestroy will not be influenced by those mistakes. Most developers should use the entire set of default ObjectInspector by calling appDefaults , unless there s a bug and you temporarily want to remove an inspector. Enum Values Name Summary VIEW EDITOR ACTIVITY CONTEXT_WRAPPER DIALOG APPLICATION INPUT_METHOD_MANAGER FRAGMENT SUPPORT_FRAGMENT ANDROIDX_FRAGMENT MESSAGE_QUEUE MORTAR_PRESENTER MORTAR_SCOPE COORDINATOR MAIN_THREAD VIEW_ROOT_IMPL WINDOW TOAST Companion Object Properties Name Summary appDefaults val appDefaults: List ObjectInspector appLeakingObjectFilters val appLeakingObjectFilters: List LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for apps. Companion Object Functions Name Summary createLeakingObjectFilters fun createLeakingObjectFilters(inspectors: Set AndroidObjectInspectors ): List LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors .","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/#androidobjectinspectors","text":"enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. These are heuristics based on our experience and knowledge of AOSP and various library internals. We only make a decision if we re reasonably sure the state of an object is unlikely to be the result of a programmer mistake. For example, no matter how many mistakes we make in our code, the value of Activity.mDestroy will not be influenced by those mistakes. Most developers should use the entire set of default ObjectInspector by calling appDefaults , unless there s a bug and you temporarily want to remove an inspector.","title":"AndroidObjectInspectors"},{"location":"api/shark-android/shark/-android-object-inspectors/#enum-values","text":"Name Summary VIEW EDITOR ACTIVITY CONTEXT_WRAPPER DIALOG APPLICATION INPUT_METHOD_MANAGER FRAGMENT SUPPORT_FRAGMENT ANDROIDX_FRAGMENT MESSAGE_QUEUE MORTAR_PRESENTER MORTAR_SCOPE COORDINATOR MAIN_THREAD VIEW_ROOT_IMPL WINDOW TOAST","title":"Enum Values"},{"location":"api/shark-android/shark/-android-object-inspectors/#companion-object-properties","text":"Name Summary appDefaults val appDefaults: List ObjectInspector appLeakingObjectFilters val appLeakingObjectFilters: List LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for apps.","title":"Companion Object Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/#companion-object-functions","text":"Name Summary createLeakingObjectFilters fun createLeakingObjectFilters(inspectors: Set AndroidObjectInspectors ): List LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors .","title":"Companion Object Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/app-defaults/","text":"shark-android / shark / AndroidObjectInspectors / appDefaults appDefaults val appDefaults: List ObjectInspector See Also AndroidObjectInspectors","title":"App defaults"},{"location":"api/shark-android/shark/-android-object-inspectors/app-defaults/#appdefaults","text":"val appDefaults: List ObjectInspector See Also AndroidObjectInspectors","title":"appDefaults"},{"location":"api/shark-android/shark/-android-object-inspectors/app-leaking-object-filters/","text":"shark-android / shark / AndroidObjectInspectors / appLeakingObjectFilters appLeakingObjectFilters val appLeakingObjectFilters: List LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for apps.","title":"App leaking object filters"},{"location":"api/shark-android/shark/-android-object-inspectors/app-leaking-object-filters/#appleakingobjectfilters","text":"val appLeakingObjectFilters: List LeakingObjectFilter Returns a list of LeakingObjectFilter suitable for apps.","title":"appLeakingObjectFilters"},{"location":"api/shark-android/shark/-android-object-inspectors/create-leaking-object-filters/","text":"shark-android / shark / AndroidObjectInspectors / createLeakingObjectFilters createLeakingObjectFilters fun createLeakingObjectFilters(inspectors: Set AndroidObjectInspectors ): List LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors .","title":"Create leaking object filters"},{"location":"api/shark-android/shark/-android-object-inspectors/create-leaking-object-filters/#createleakingobjectfilters","text":"fun createLeakingObjectFilters(inspectors: Set AndroidObjectInspectors ): List LeakingObjectFilter Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors .","title":"createLeakingObjectFilters"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/","text":"shark-android / shark / AndroidObjectInspectors / ACTIVITY ACTIVITY ACTIVITY Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/#activity","text":"ACTIVITY","title":"ACTIVITY"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect/","text":"shark-android / shark / AndroidObjectInspectors / ACTIVITY / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/","text":"shark-android / shark / AndroidObjectInspectors / ANDROIDX_FRAGMENT ANDROIDX_FRAGMENT ANDROIDX_FRAGMENT Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/#androidx_fragment","text":"ANDROIDX_FRAGMENT","title":"ANDROIDX_FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / ANDROIDX_FRAGMENT / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/","text":"shark-android / shark / AndroidObjectInspectors / APPLICATION APPLICATION APPLICATION Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/#application","text":"APPLICATION","title":"APPLICATION"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect/","text":"shark-android / shark / AndroidObjectInspectors / APPLICATION / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/","text":"shark-android / shark / AndroidObjectInspectors / CONTEXT_WRAPPER CONTEXT_WRAPPER CONTEXT_WRAPPER Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/#context_wrapper","text":"CONTEXT_WRAPPER","title":"CONTEXT_WRAPPER"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / CONTEXT_WRAPPER / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/","text":"shark-android / shark / AndroidObjectInspectors / COORDINATOR COORDINATOR COORDINATOR Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/#coordinator","text":"COORDINATOR","title":"COORDINATOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / COORDINATOR / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/","text":"shark-android / shark / AndroidObjectInspectors / DIALOG DIALOG DIALOG Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/#dialog","text":"DIALOG","title":"DIALOG"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect/","text":"shark-android / shark / AndroidObjectInspectors / DIALOG / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/","text":"shark-android / shark / AndroidObjectInspectors / EDITOR EDITOR EDITOR Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/#editor","text":"EDITOR","title":"EDITOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / EDITOR / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/","text":"shark-android / shark / AndroidObjectInspectors / FRAGMENT FRAGMENT FRAGMENT Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/#fragment","text":"FRAGMENT","title":"FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / FRAGMENT / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidObjectInspectors / INPUT_METHOD_MANAGER INPUT_METHOD_MANAGER INPUT_METHOD_MANAGER Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/#input_method_manager","text":"INPUT_METHOD_MANAGER","title":"INPUT_METHOD_MANAGER"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / INPUT_METHOD_MANAGER / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/","text":"shark-android / shark / AndroidObjectInspectors / MAIN_THREAD MAIN_THREAD MAIN_THREAD Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/#main_thread","text":"MAIN_THREAD","title":"MAIN_THREAD"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MAIN_THREAD / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/","text":"shark-android / shark / AndroidObjectInspectors / MESSAGE_QUEUE MESSAGE_QUEUE MESSAGE_QUEUE Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/#message_queue","text":"MESSAGE_QUEUE","title":"MESSAGE_QUEUE"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MESSAGE_QUEUE / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_PRESENTER MORTAR_PRESENTER MORTAR_PRESENTER Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/#mortar_presenter","text":"MORTAR_PRESENTER","title":"MORTAR_PRESENTER"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_PRESENTER / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_SCOPE MORTAR_SCOPE MORTAR_SCOPE Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/#mortar_scope","text":"MORTAR_SCOPE","title":"MORTAR_SCOPE"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_SCOPE / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/","text":"shark-android / shark / AndroidObjectInspectors / SUPPORT_FRAGMENT SUPPORT_FRAGMENT SUPPORT_FRAGMENT Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/#support_fragment","text":"SUPPORT_FRAGMENT","title":"SUPPORT_FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / SUPPORT_FRAGMENT / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/","text":"shark-android / shark / AndroidObjectInspectors / TOAST TOAST TOAST Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/#toast","text":"TOAST","title":"TOAST"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / TOAST / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/","text":"shark-android / shark / AndroidObjectInspectors / VIEW VIEW VIEW Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/#view","text":"VIEW","title":"VIEW"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect/","text":"shark-android / shark / AndroidObjectInspectors / VIEW / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/","text":"shark-android / shark / AndroidObjectInspectors / VIEW_ROOT_IMPL VIEW_ROOT_IMPL VIEW_ROOT_IMPL Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/#view_root_impl","text":"VIEW_ROOT_IMPL","title":"VIEW_ROOT_IMPL"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect/","text":"shark-android / shark / AndroidObjectInspectors / VIEW_ROOT_IMPL / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/","text":"shark-android / shark / AndroidObjectInspectors / WINDOW WINDOW WINDOW Functions Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/#window","text":"WINDOW","title":"WINDOW"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect/","text":"shark-android / shark / AndroidObjectInspectors / WINDOW / inspect inspect fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-reference-matchers/","text":"shark-android / shark / AndroidReferenceMatchers AndroidReferenceMatchers enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . AndroidReferenceMatchers is used to build the list of known references that cannot ever create leaks (via IgnoredReferenceMatcher ) as well as the list of known leaks in the Android Framework and in manufacturer specific Android implementations. This class is a work in progress. You can help by reporting leak traces that seem to be caused by the Android SDK, here: https://github.com/square/leakcanary/issues/new We filter on SDK versions and Manufacturers because many of those leaks are specific to a given manufacturer implementation, they usually share their builds across multiple models, and the leaks eventually get fixed in newer versions. Most app developers should use appDefaults . However, you can also use a subset of AndroidReferenceMatchers by creating an EnumSet that matches your needs and calling buildKnownReferences . Enum Values Name Summary IREQUEST_FINISH_CALLBACK ACTIVITY_CLIENT_RECORD__NEXT_IDLE SPAN_CONTROLLER MEDIA_SESSION_LEGACY_HELPER__SINSTANCE TEXT_LINE__SCACHED BLOCKING_QUEUE INPUT_METHOD_MANAGER_IS_TERRIBLE LAYOUT_TRANSITION SPELL_CHECKER_SESSION SPELL_CHECKER ACTIVITY_CHOOSE_MODEL MEDIA_PROJECTION_CALLBACK SPEECH_RECOGNIZER ACCOUNT_MANAGER MEDIA_SCANNER_CONNECTION USER_MANAGER__SINSTANCE APP_WIDGET_HOST_CALLBACKS AUDIO_MANAGER EDITTEXT_BLINK_MESSAGEQUEUE CONNECTIVITY_MANAGER__SINSTANCE ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ASSIST_STRUCTURE ACCESSIBILITY_ITERATORS BIOMETRIC_PROMPT MAGNIFIER BACKDROP_FRAME_RENDERER__MDECORVIEW VIEWLOCATIONHOLDER_ROOT ACCESSIBILITY_NODE_ID_MANAGER TEXT_TO_SPEECH WINDOW_MANAGER_GLOBAL CONTROLLED_INPUT_CONNECTION_WRAPPER TOAST_TN SPEN_GESTURE_MANAGER CLIPBOARD_UI_MANAGER__SINSTANCE SEM_CLIPBOARD_MANAGER__MCONTEXT CLIPBOARD_EX_MANAGER SEM_EMERGENCY_MANAGER__MCONTEXT SEM_PERSONA_MANAGER SEM_APP_ICON_SOLUTION AW_RESOURCE__SRESOURCES TEXT_VIEW__MLAST_HOVERED_VIEW PERSONA_MANAGER RESOURCES__MCONTEXT VIEW_CONFIGURATION__MCONTEXT AUDIO_MANAGER__MCONTEXT_STATIC ACTIVITY_MANAGER_MCONTEXT STATIC_MTARGET_VIEW GESTURE_BOOST_MANAGER BUBBLE_POPUP_HELPER__SHELPER LGCONTEXT__MCONTEXT SMART_COVER_MANAGER MAPPER_CLIENT SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL INSTRUMENTATION_RECOMMEND_ACTIVITY DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER EXTENDED_STATUS_BAR_MANAGER OEM_SCENE_CALL_BLOCKER REFERENCES FINALIZER_WATCHDOG_DAEMON MAIN LEAK_CANARY_THREAD LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_INTERNAL EVENT_RECEIVER__MMESSAGE_QUEUE Companion Object Properties Name Summary appDefaults val appDefaults: List ReferenceMatcher HUAWEI const val HUAWEI: String ignoredReferencesOnly val ignoredReferencesOnly: List ReferenceMatcher Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher . LENOVO const val LENOVO: String LG const val LG: String MEIZU const val MEIZU: String MOTOROLA const val MOTOROLA: String NVIDIA const val NVIDIA: String ONE_PLUS const val ONE_PLUS: String SAMSUNG const val SAMSUNG: String SHARP const val SHARP: String VIVO const val VIVO: String Companion Object Functions Name Summary buildKnownReferences fun buildKnownReferences(referenceMatchers: Set AndroidReferenceMatchers ): List ReferenceMatcher Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers . ignoredInstanceField fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern . ignoredJavaLocal fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern . instanceFieldLeak fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak. nativeGlobalVariableLeak fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher staticFieldLeak fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"Home"},{"location":"api/shark-android/shark/-android-reference-matchers/#androidreferencematchers","text":"enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . AndroidReferenceMatchers is used to build the list of known references that cannot ever create leaks (via IgnoredReferenceMatcher ) as well as the list of known leaks in the Android Framework and in manufacturer specific Android implementations. This class is a work in progress. You can help by reporting leak traces that seem to be caused by the Android SDK, here: https://github.com/square/leakcanary/issues/new We filter on SDK versions and Manufacturers because many of those leaks are specific to a given manufacturer implementation, they usually share their builds across multiple models, and the leaks eventually get fixed in newer versions. Most app developers should use appDefaults . However, you can also use a subset of AndroidReferenceMatchers by creating an EnumSet that matches your needs and calling buildKnownReferences .","title":"AndroidReferenceMatchers"},{"location":"api/shark-android/shark/-android-reference-matchers/#enum-values","text":"Name Summary IREQUEST_FINISH_CALLBACK ACTIVITY_CLIENT_RECORD__NEXT_IDLE SPAN_CONTROLLER MEDIA_SESSION_LEGACY_HELPER__SINSTANCE TEXT_LINE__SCACHED BLOCKING_QUEUE INPUT_METHOD_MANAGER_IS_TERRIBLE LAYOUT_TRANSITION SPELL_CHECKER_SESSION SPELL_CHECKER ACTIVITY_CHOOSE_MODEL MEDIA_PROJECTION_CALLBACK SPEECH_RECOGNIZER ACCOUNT_MANAGER MEDIA_SCANNER_CONNECTION USER_MANAGER__SINSTANCE APP_WIDGET_HOST_CALLBACKS AUDIO_MANAGER EDITTEXT_BLINK_MESSAGEQUEUE CONNECTIVITY_MANAGER__SINSTANCE ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ASSIST_STRUCTURE ACCESSIBILITY_ITERATORS BIOMETRIC_PROMPT MAGNIFIER BACKDROP_FRAME_RENDERER__MDECORVIEW VIEWLOCATIONHOLDER_ROOT ACCESSIBILITY_NODE_ID_MANAGER TEXT_TO_SPEECH WINDOW_MANAGER_GLOBAL CONTROLLED_INPUT_CONNECTION_WRAPPER TOAST_TN SPEN_GESTURE_MANAGER CLIPBOARD_UI_MANAGER__SINSTANCE SEM_CLIPBOARD_MANAGER__MCONTEXT CLIPBOARD_EX_MANAGER SEM_EMERGENCY_MANAGER__MCONTEXT SEM_PERSONA_MANAGER SEM_APP_ICON_SOLUTION AW_RESOURCE__SRESOURCES TEXT_VIEW__MLAST_HOVERED_VIEW PERSONA_MANAGER RESOURCES__MCONTEXT VIEW_CONFIGURATION__MCONTEXT AUDIO_MANAGER__MCONTEXT_STATIC ACTIVITY_MANAGER_MCONTEXT STATIC_MTARGET_VIEW GESTURE_BOOST_MANAGER BUBBLE_POPUP_HELPER__SHELPER LGCONTEXT__MCONTEXT SMART_COVER_MANAGER MAPPER_CLIENT SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL INSTRUMENTATION_RECOMMEND_ACTIVITY DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER EXTENDED_STATUS_BAR_MANAGER OEM_SCENE_CALL_BLOCKER REFERENCES FINALIZER_WATCHDOG_DAEMON MAIN LEAK_CANARY_THREAD LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_INTERNAL EVENT_RECEIVER__MMESSAGE_QUEUE","title":"Enum Values"},{"location":"api/shark-android/shark/-android-reference-matchers/#companion-object-properties","text":"Name Summary appDefaults val appDefaults: List ReferenceMatcher HUAWEI const val HUAWEI: String ignoredReferencesOnly val ignoredReferencesOnly: List ReferenceMatcher Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher . LENOVO const val LENOVO: String LG const val LG: String MEIZU const val MEIZU: String MOTOROLA const val MOTOROLA: String NVIDIA const val NVIDIA: String ONE_PLUS const val ONE_PLUS: String SAMSUNG const val SAMSUNG: String SHARP const val SHARP: String VIVO const val VIVO: String","title":"Companion Object Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/#companion-object-functions","text":"Name Summary buildKnownReferences fun buildKnownReferences(referenceMatchers: Set AndroidReferenceMatchers ): List ReferenceMatcher Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers . ignoredInstanceField fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern . ignoredJavaLocal fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern . instanceFieldLeak fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak. nativeGlobalVariableLeak fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher staticFieldLeak fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"Companion Object Functions"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-i-t-e-r-a-t-o-r-s/","text":"shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_ITERATORS ACCESSIBILITY_ITERATORS ACCESSIBILITY_ITERATORS","title":" a c c e s s i b i l i t y  i t e r a t o r s"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-i-t-e-r-a-t-o-r-s/#accessibility_iterators","text":"ACCESSIBILITY_ITERATORS","title":"ACCESSIBILITY_ITERATORS"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_NODE_ID_MANAGER ACCESSIBILITY_NODE_ID_MANAGER ACCESSIBILITY_NODE_ID_MANAGER","title":" a c c e s s i b i l i t y  n o d e  i d  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r/#accessibility_node_id_manager","text":"ACCESSIBILITY_NODE_ID_MANAGER","title":"ACCESSIBILITY_NODE_ID_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ACCESSIBILITY_NODE_INFO__MORIGINALTEXT","title":" a c c e s s i b i l i t y  n o d e  i n f o   m o r i g i n a l t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t/#accessibility_node_info__moriginaltext","text":"ACCESSIBILITY_NODE_INFO__MORIGINALTEXT","title":"ACCESSIBILITY_NODE_INFO__MORIGINALTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / ACCOUNT_MANAGER ACCOUNT_MANAGER ACCOUNT_MANAGER","title":" a c c o u n t  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r/#account_manager","text":"ACCOUNT_MANAGER","title":"ACCOUNT_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l/","text":"shark-android / shark / AndroidReferenceMatchers / ACTIVITY_CHOOSE_MODEL ACTIVITY_CHOOSE_MODEL ACTIVITY_CHOOSE_MODEL","title":" a c t i v i t y  c h o o s e  m o d e l"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l/#activity_choose_model","text":"ACTIVITY_CHOOSE_MODEL","title":"ACTIVITY_CHOOSE_MODEL"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e/","text":"shark-android / shark / AndroidReferenceMatchers / ACTIVITY_CLIENT_RECORD__NEXT_IDLE ACTIVITY_CLIENT_RECORD__NEXT_IDLE ACTIVITY_CLIENT_RECORD__NEXT_IDLE","title":" a c t i v i t y  c l i e n t  r e c o r d   n e x t  i d l e"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e/#activity_client_record__next_idle","text":"ACTIVITY_CLIENT_RECORD__NEXT_IDLE","title":"ACTIVITY_CLIENT_RECORD__NEXT_IDLE"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / ACTIVITY_MANAGER_MCONTEXT ACTIVITY_MANAGER_MCONTEXT ACTIVITY_MANAGER_MCONTEXT","title":" a c t i v i t y  m a n a g e r  m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t/#activity_manager_mcontext","text":"ACTIVITY_MANAGER_MCONTEXT","title":"ACTIVITY_MANAGER_MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s/","text":"shark-android / shark / AndroidReferenceMatchers / APP_WIDGET_HOST_CALLBACKS APP_WIDGET_HOST_CALLBACKS APP_WIDGET_HOST_CALLBACKS","title":" a p p  w i d g e t  h o s t  c a l l b a c k s"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s/#app_widget_host_callbacks","text":"APP_WIDGET_HOST_CALLBACKS","title":"APP_WIDGET_HOST_CALLBACKS"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-s-s-i-s-t_-s-t-r-u-c-t-u-r-e/","text":"shark-android / shark / AndroidReferenceMatchers / ASSIST_STRUCTURE ASSIST_STRUCTURE ASSIST_STRUCTURE","title":" a s s i s t  s t r u c t u r e"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-s-s-i-s-t_-s-t-r-u-c-t-u-r-e/#assist_structure","text":"ASSIST_STRUCTURE","title":"ASSIST_STRUCTURE"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / AUDIO_MANAGER AUDIO_MANAGER AUDIO_MANAGER","title":" a u d i o  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r/#audio_manager","text":"AUDIO_MANAGER","title":"AUDIO_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c/","text":"shark-android / shark / AndroidReferenceMatchers / AUDIO_MANAGER__MCONTEXT_STATIC AUDIO_MANAGER__MCONTEXT_STATIC AUDIO_MANAGER__MCONTEXT_STATIC","title":" a u d i o  m a n a g e r   m c o n t e x t  s t a t i c"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c/#audio_manager__mcontext_static","text":"AUDIO_MANAGER__MCONTEXT_STATIC","title":"AUDIO_MANAGER__MCONTEXT_STATIC"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s/","text":"shark-android / shark / AndroidReferenceMatchers / AW_RESOURCE__SRESOURCES AW_RESOURCE__SRESOURCES AW_RESOURCE__SRESOURCES","title":" a w  r e s o u r c e   s r e s o u r c e s"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s/#aw_resource__sresources","text":"AW_RESOURCE__SRESOURCES","title":"AW_RESOURCE__SRESOURCES"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w/","text":"shark-android / shark / AndroidReferenceMatchers / BACKDROP_FRAME_RENDERER__MDECORVIEW BACKDROP_FRAME_RENDERER__MDECORVIEW BACKDROP_FRAME_RENDERER__MDECORVIEW","title":" b a c k d r o p  f r a m e  r e n d e r e r   m d e c o r v i e w"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w/#backdrop_frame_renderer__mdecorview","text":"BACKDROP_FRAME_RENDERER__MDECORVIEW","title":"BACKDROP_FRAME_RENDERER__MDECORVIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t/","text":"shark-android / shark / AndroidReferenceMatchers / BIOMETRIC_PROMPT BIOMETRIC_PROMPT BIOMETRIC_PROMPT","title":" b i o m e t r i c  p r o m p t"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t/#biometric_prompt","text":"BIOMETRIC_PROMPT","title":"BIOMETRIC_PROMPT"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e/","text":"shark-android / shark / AndroidReferenceMatchers / BLOCKING_QUEUE BLOCKING_QUEUE BLOCKING_QUEUE","title":" b l o c k i n g  q u e u e"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e/#blocking_queue","text":"BLOCKING_QUEUE","title":"BLOCKING_QUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / BUBBLE_POPUP_HELPER__SHELPER BUBBLE_POPUP_HELPER__SHELPER BUBBLE_POPUP_HELPER__SHELPER","title":" b u b b l e  p o p u p  h e l p e r   s h e l p e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r/#bubble_popup_helper__shelper","text":"BUBBLE_POPUP_HELPER__SHELPER","title":"BUBBLE_POPUP_HELPER__SHELPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / CLIPBOARD_EX_MANAGER CLIPBOARD_EX_MANAGER CLIPBOARD_EX_MANAGER","title":" c l i p b o a r d  e x  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r/#clipboard_ex_manager","text":"CLIPBOARD_EX_MANAGER","title":"CLIPBOARD_EX_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / CLIPBOARD_UI_MANAGER__SINSTANCE CLIPBOARD_UI_MANAGER__SINSTANCE CLIPBOARD_UI_MANAGER__SINSTANCE","title":" c l i p b o a r d  u i  m a n a g e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#clipboard_ui_manager__sinstance","text":"CLIPBOARD_UI_MANAGER__SINSTANCE","title":"CLIPBOARD_UI_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / CONNECTIVITY_MANAGER__SINSTANCE CONNECTIVITY_MANAGER__SINSTANCE CONNECTIVITY_MANAGER__SINSTANCE","title":" c o n n e c t i v i t y  m a n a g e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#connectivity_manager__sinstance","text":"CONNECTIVITY_MANAGER__SINSTANCE","title":"CONNECTIVITY_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-t-r-o-l-l-e-d_-i-n-p-u-t_-c-o-n-n-e-c-t-i-o-n_-w-r-a-p-p-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / CONTROLLED_INPUT_CONNECTION_WRAPPER CONTROLLED_INPUT_CONNECTION_WRAPPER CONTROLLED_INPUT_CONNECTION_WRAPPER","title":" c o n t r o l l e d  i n p u t  c o n n e c t i o n  w r a p p e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-t-r-o-l-l-e-d_-i-n-p-u-t_-c-o-n-n-e-c-t-i-o-n_-w-r-a-p-p-e-r/#controlled_input_connection_wrapper","text":"CONTROLLED_INPUT_CONNECTION_WRAPPER","title":"CONTROLLED_INPUT_CONNECTION_WRAPPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER","title":" d e v i c e  p o l i c y  m a n a g e r   s e t t i n g s  o b s e r v e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r/#device_policy_manager__settings_observer","text":"DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER","title":"DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e/","text":"shark-android / shark / AndroidReferenceMatchers / EDITTEXT_BLINK_MESSAGEQUEUE EDITTEXT_BLINK_MESSAGEQUEUE EDITTEXT_BLINK_MESSAGEQUEUE","title":" e d i t t e x t  b l i n k  m e s s a g e q u e u e"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e/#edittext_blink_messagequeue","text":"EDITTEXT_BLINK_MESSAGEQUEUE","title":"EDITTEXT_BLINK_MESSAGEQUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e/","text":"shark-android / shark / AndroidReferenceMatchers / EVENT_RECEIVER__MMESSAGE_QUEUE EVENT_RECEIVER__MMESSAGE_QUEUE EVENT_RECEIVER__MMESSAGE_QUEUE","title":" e v e n t  r e c e i v e r   m m e s s a g e  q u e u e"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e/#event_receiver__mmessage_queue","text":"EVENT_RECEIVER__MMESSAGE_QUEUE","title":"EVENT_RECEIVER__MMESSAGE_QUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-x-t-e-n-d-e-d_-s-t-a-t-u-s_-b-a-r_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / EXTENDED_STATUS_BAR_MANAGER EXTENDED_STATUS_BAR_MANAGER EXTENDED_STATUS_BAR_MANAGER","title":" e x t e n d e d  s t a t u s  b a r  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-x-t-e-n-d-e-d_-s-t-a-t-u-s_-b-a-r_-m-a-n-a-g-e-r/#extended_status_bar_manager","text":"EXTENDED_STATUS_BAR_MANAGER","title":"EXTENDED_STATUS_BAR_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / FINALIZER_WATCHDOG_DAEMON FINALIZER_WATCHDOG_DAEMON FINALIZER_WATCHDOG_DAEMON","title":" f i n a l i z e r  w a t c h d o g  d a e m o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n/#finalizer_watchdog_daemon","text":"FINALIZER_WATCHDOG_DAEMON","title":"FINALIZER_WATCHDOG_DAEMON"},{"location":"api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / GESTURE_BOOST_MANAGER GESTURE_BOOST_MANAGER GESTURE_BOOST_MANAGER","title":" g e s t u r e  b o o s t  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r/#gesture_boost_manager","text":"GESTURE_BOOST_MANAGER","title":"GESTURE_BOOST_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-h-u-a-w-e-i/","text":"shark-android / shark / AndroidReferenceMatchers / HUAWEI HUAWEI const val HUAWEI: String","title":" h u a w e i"},{"location":"api/shark-android/shark/-android-reference-matchers/-h-u-a-w-e-i/#huawei","text":"const val HUAWEI: String","title":"HUAWEI"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e/","text":"shark-android / shark / AndroidReferenceMatchers / INPUT_METHOD_MANAGER_IS_TERRIBLE INPUT_METHOD_MANAGER_IS_TERRIBLE INPUT_METHOD_MANAGER_IS_TERRIBLE","title":" i n p u t  m e t h o d  m a n a g e r  i s  t e r r i b l e"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e/#input_method_manager_is_terrible","text":"INPUT_METHOD_MANAGER_IS_TERRIBLE","title":"INPUT_METHOD_MANAGER_IS_TERRIBLE"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y/","text":"shark-android / shark / AndroidReferenceMatchers / INSTRUMENTATION_RECOMMEND_ACTIVITY INSTRUMENTATION_RECOMMEND_ACTIVITY INSTRUMENTATION_RECOMMEND_ACTIVITY","title":" i n s t r u m e n t a t i o n  r e c o m m e n d  a c t i v i t y"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y/#instrumentation_recommend_activity","text":"INSTRUMENTATION_RECOMMEND_ACTIVITY","title":"INSTRUMENTATION_RECOMMEND_ACTIVITY"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-r-e-q-u-e-s-t_-f-i-n-i-s-h_-c-a-l-l-b-a-c-k/","text":"shark-android / shark / AndroidReferenceMatchers / IREQUEST_FINISH_CALLBACK IREQUEST_FINISH_CALLBACK IREQUEST_FINISH_CALLBACK","title":" i r e q u e s t  f i n i s h  c a l l b a c k"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-r-e-q-u-e-s-t_-f-i-n-i-s-h_-c-a-l-l-b-a-c-k/#irequest_finish_callback","text":"IREQUEST_FINISH_CALLBACK","title":"IREQUEST_FINISH_CALLBACK"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / LAYOUT_TRANSITION LAYOUT_TRANSITION LAYOUT_TRANSITION","title":" l a y o u t  t r a n s i t i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n/#layout_transition","text":"LAYOUT_TRANSITION","title":"LAYOUT_TRANSITION"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_HEAP_DUMPER","title":" l e a k  c a n a r y  h e a p  d u m p e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r/#leak_canary_heap_dumper","text":"LEAK_CANARY_HEAP_DUMPER","title":"LEAK_CANARY_HEAP_DUMPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l/","text":"shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_INTERNAL LEAK_CANARY_INTERNAL LEAK_CANARY_INTERNAL","title":" l e a k  c a n a r y  i n t e r n a l"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l/#leak_canary_internal","text":"LEAK_CANARY_INTERNAL","title":"LEAK_CANARY_INTERNAL"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d/","text":"shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_THREAD LEAK_CANARY_THREAD LEAK_CANARY_THREAD","title":" l e a k  c a n a r y  t h r e a d"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d/#leak_canary_thread","text":"LEAK_CANARY_THREAD","title":"LEAK_CANARY_THREAD"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-n-o-v-o/","text":"shark-android / shark / AndroidReferenceMatchers / LENOVO LENOVO const val LENOVO: String","title":" l e n o v o"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-n-o-v-o/#lenovo","text":"const val LENOVO: String","title":"LENOVO"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / LGCONTEXT__MCONTEXT LGCONTEXT__MCONTEXT LGCONTEXT__MCONTEXT","title":" l g c o n t e x t   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t/#lgcontext__mcontext","text":"LGCONTEXT__MCONTEXT","title":"LGCONTEXT__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g/","text":"shark-android / shark / AndroidReferenceMatchers / LG LG const val LG: String","title":" l g"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g/#lg","text":"const val LG: String","title":"LG"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / MAGNIFIER MAGNIFIER MAGNIFIER","title":" m a g n i f i e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r/#magnifier","text":"MAGNIFIER","title":"MAGNIFIER"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-i-n/","text":"shark-android / shark / AndroidReferenceMatchers / MAIN MAIN MAIN","title":" m a i n"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-i-n/#main","text":"MAIN","title":"MAIN"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t/","text":"shark-android / shark / AndroidReferenceMatchers / MAPPER_CLIENT MAPPER_CLIENT MAPPER_CLIENT","title":" m a p p e r  c l i e n t"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t/#mapper_client","text":"MAPPER_CLIENT","title":"MAPPER_CLIENT"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k/","text":"shark-android / shark / AndroidReferenceMatchers / MEDIA_PROJECTION_CALLBACK MEDIA_PROJECTION_CALLBACK MEDIA_PROJECTION_CALLBACK","title":" m e d i a  p r o j e c t i o n  c a l l b a c k"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k/#media_projection_callback","text":"MEDIA_PROJECTION_CALLBACK","title":"MEDIA_PROJECTION_CALLBACK"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / MEDIA_SCANNER_CONNECTION MEDIA_SCANNER_CONNECTION MEDIA_SCANNER_CONNECTION","title":" m e d i a  s c a n n e r  c o n n e c t i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n/#media_scanner_connection","text":"MEDIA_SCANNER_CONNECTION","title":"MEDIA_SCANNER_CONNECTION"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / MEDIA_SESSION_LEGACY_HELPER__SINSTANCE MEDIA_SESSION_LEGACY_HELPER__SINSTANCE MEDIA_SESSION_LEGACY_HELPER__SINSTANCE","title":" m e d i a  s e s s i o n  l e g a c y  h e l p e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e/#media_session_legacy_helper__sinstance","text":"MEDIA_SESSION_LEGACY_HELPER__SINSTANCE","title":"MEDIA_SESSION_LEGACY_HELPER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-i-z-u/","text":"shark-android / shark / AndroidReferenceMatchers / MEIZU MEIZU const val MEIZU: String","title":" m e i z u"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-i-z-u/#meizu","text":"const val MEIZU: String","title":"MEIZU"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-o-t-o-r-o-l-a/","text":"shark-android / shark / AndroidReferenceMatchers / MOTOROLA MOTOROLA const val MOTOROLA: String","title":" m o t o r o l a"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-o-t-o-r-o-l-a/#motorola","text":"const val MOTOROLA: String","title":"MOTOROLA"},{"location":"api/shark-android/shark/-android-reference-matchers/-n-v-i-d-i-a/","text":"shark-android / shark / AndroidReferenceMatchers / NVIDIA NVIDIA const val NVIDIA: String","title":" n v i d i a"},{"location":"api/shark-android/shark/-android-reference-matchers/-n-v-i-d-i-a/#nvidia","text":"const val NVIDIA: String","title":"NVIDIA"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-e-m_-s-c-e-n-e_-c-a-l-l_-b-l-o-c-k-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / OEM_SCENE_CALL_BLOCKER OEM_SCENE_CALL_BLOCKER OEM_SCENE_CALL_BLOCKER","title":" o e m  s c e n e  c a l l  b l o c k e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-e-m_-s-c-e-n-e_-c-a-l-l_-b-l-o-c-k-e-r/#oem_scene_call_blocker","text":"OEM_SCENE_CALL_BLOCKER","title":"OEM_SCENE_CALL_BLOCKER"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-n-e_-p-l-u-s/","text":"shark-android / shark / AndroidReferenceMatchers / ONE_PLUS ONE_PLUS const val ONE_PLUS: String","title":" o n e  p l u s"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-n-e_-p-l-u-s/#one_plus","text":"const val ONE_PLUS: String","title":"ONE_PLUS"},{"location":"api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / PERSONA_MANAGER PERSONA_MANAGER PERSONA_MANAGER","title":" p e r s o n a  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#persona_manager","text":"PERSONA_MANAGER","title":"PERSONA_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s/","text":"shark-android / shark / AndroidReferenceMatchers / REFERENCES REFERENCES REFERENCES","title":" r e f e r e n c e s"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s/#references","text":"REFERENCES","title":"REFERENCES"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / RESOURCES__MCONTEXT RESOURCES__MCONTEXT RESOURCES__MCONTEXT","title":" r e s o u r c e s   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t/#resources__mcontext","text":"RESOURCES__MCONTEXT","title":"RESOURCES__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-a-m-s-u-n-g/","text":"shark-android / shark / AndroidReferenceMatchers / SAMSUNG SAMSUNG const val SAMSUNG: String","title":" s a m s u n g"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-a-m-s-u-n-g/#samsung","text":"const val SAMSUNG: String","title":"SAMSUNG"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_APP_ICON_SOLUTION SEM_APP_ICON_SOLUTION SEM_APP_ICON_SOLUTION","title":" s e m  a p p  i c o n  s o l u t i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n/#sem_app_icon_solution","text":"SEM_APP_ICON_SOLUTION","title":"SEM_APP_ICON_SOLUTION"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_CLIPBOARD_MANAGER__MCONTEXT SEM_CLIPBOARD_MANAGER__MCONTEXT SEM_CLIPBOARD_MANAGER__MCONTEXT","title":" s e m  c l i p b o a r d  m a n a g e r   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#sem_clipboard_manager__mcontext","text":"SEM_CLIPBOARD_MANAGER__MCONTEXT","title":"SEM_CLIPBOARD_MANAGER__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_EMERGENCY_MANAGER__MCONTEXT SEM_EMERGENCY_MANAGER__MCONTEXT SEM_EMERGENCY_MANAGER__MCONTEXT","title":" s e m  e m e r g e n c y  m a n a g e r   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#sem_emergency_manager__mcontext","text":"SEM_EMERGENCY_MANAGER__MCONTEXT","title":"SEM_EMERGENCY_MANAGER__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_PERSONA_MANAGER SEM_PERSONA_MANAGER SEM_PERSONA_MANAGER","title":" s e m  p e r s o n a  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#sem_persona_manager","text":"SEM_PERSONA_MANAGER","title":"SEM_PERSONA_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-h-a-r-p/","text":"shark-android / shark / AndroidReferenceMatchers / SHARP SHARP const val SHARP: String","title":" s h a r p"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-h-a-r-p/#sharp","text":"const val SHARP: String","title":"SHARP"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SMART_COVER_MANAGER SMART_COVER_MANAGER SMART_COVER_MANAGER","title":" s m a r t  c o v e r  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r/#smart_cover_manager","text":"SMART_COVER_MANAGER","title":"SMART_COVER_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPAN_CONTROLLER SPAN_CONTROLLER SPAN_CONTROLLER","title":" s p a n  c o n t r o l l e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r/#span_controller","text":"SPAN_CONTROLLER","title":"SPAN_CONTROLLER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPEECH_RECOGNIZER SPEECH_RECOGNIZER SPEECH_RECOGNIZER","title":" s p e e c h  r e c o g n i z e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r/#speech_recognizer","text":"SPEECH_RECOGNIZER","title":"SPEECH_RECOGNIZER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPELL_CHECKER SPELL_CHECKER SPELL_CHECKER","title":" s p e l l  c h e c k e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r/#spell_checker","text":"SPELL_CHECKER","title":"SPELL_CHECKER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / SPELL_CHECKER_SESSION SPELL_CHECKER_SESSION SPELL_CHECKER_SESSION","title":" s p e l l  c h e c k e r  s e s s i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n/#spell_checker_session","text":"SPELL_CHECKER_SESSION","title":"SPELL_CHECKER_SESSION"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPEN_GESTURE_MANAGER SPEN_GESTURE_MANAGER SPEN_GESTURE_MANAGER","title":" s p e n  g e s t u r e  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r/#spen_gesture_manager","text":"SPEN_GESTURE_MANAGER","title":"SPEN_GESTURE_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-t-a-t-i-c_-m-t-a-r-g-e-t_-v-i-e-w/","text":"shark-android / shark / AndroidReferenceMatchers / STATIC_MTARGET_VIEW STATIC_MTARGET_VIEW STATIC_MTARGET_VIEW","title":" s t a t i c  m t a r g e t  v i e w"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-t-a-t-i-c_-m-t-a-r-g-e-t_-v-i-e-w/#static_mtarget_view","text":"STATIC_MTARGET_VIEW","title":"STATIC_MTARGET_VIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l/","text":"shark-android / shark / AndroidReferenceMatchers / SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL","title":" s y s t e m  s e n s o r  m a n a g e r   m a p p c o n t e x t i m p l"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l/#system_sensor_manager__mappcontextimpl","text":"SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL","title":"SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d/","text":"shark-android / shark / AndroidReferenceMatchers / TEXT_LINE__SCACHED TEXT_LINE__SCACHED TEXT_LINE__SCACHED","title":" t e x t  l i n e   s c a c h e d"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d/#text_line__scached","text":"TEXT_LINE__SCACHED","title":"TEXT_LINE__SCACHED"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h/","text":"shark-android / shark / AndroidReferenceMatchers / TEXT_TO_SPEECH TEXT_TO_SPEECH TEXT_TO_SPEECH","title":" t e x t  t o  s p e e c h"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h/#text_to_speech","text":"TEXT_TO_SPEECH","title":"TEXT_TO_SPEECH"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/","text":"shark-android / shark / AndroidReferenceMatchers / TEXT_VIEW__MLAST_HOVERED_VIEW TEXT_VIEW__MLAST_HOVERED_VIEW TEXT_VIEW__MLAST_HOVERED_VIEW","title":" t e x t  v i e w   m l a s t  h o v e r e d  v i e w"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/#text_view__mlast_hovered_view","text":"TEXT_VIEW__MLAST_HOVERED_VIEW","title":"TEXT_VIEW__MLAST_HOVERED_VIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-o-a-s-t_-t-n/","text":"shark-android / shark / AndroidReferenceMatchers / TOAST_TN TOAST_TN TOAST_TN","title":" t o a s t  t n"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-o-a-s-t_-t-n/#toast_tn","text":"TOAST_TN","title":"TOAST_TN"},{"location":"api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / USER_MANAGER__SINSTANCE USER_MANAGER__SINSTANCE USER_MANAGER__SINSTANCE","title":" u s e r  m a n a g e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#user_manager__sinstance","text":"USER_MANAGER__SINSTANCE","title":"USER_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t/","text":"shark-android / shark / AndroidReferenceMatchers / VIEWLOCATIONHOLDER_ROOT VIEWLOCATIONHOLDER_ROOT VIEWLOCATIONHOLDER_ROOT","title":" v i e w l o c a t i o n h o l d e r  r o o t"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t/#viewlocationholder_root","text":"VIEWLOCATIONHOLDER_ROOT","title":"VIEWLOCATIONHOLDER_ROOT"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / VIEW_CONFIGURATION__MCONTEXT VIEW_CONFIGURATION__MCONTEXT VIEW_CONFIGURATION__MCONTEXT","title":" v i e w  c o n f i g u r a t i o n   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t/#view_configuration__mcontext","text":"VIEW_CONFIGURATION__MCONTEXT","title":"VIEW_CONFIGURATION__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-v-o/","text":"shark-android / shark / AndroidReferenceMatchers / VIVO VIVO const val VIVO: String","title":" v i v o"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-v-o/#vivo","text":"const val VIVO: String","title":"VIVO"},{"location":"api/shark-android/shark/-android-reference-matchers/-w-i-n-d-o-w_-m-a-n-a-g-e-r_-g-l-o-b-a-l/","text":"shark-android / shark / AndroidReferenceMatchers / WINDOW_MANAGER_GLOBAL WINDOW_MANAGER_GLOBAL WINDOW_MANAGER_GLOBAL","title":" w i n d o w  m a n a g e r  g l o b a l"},{"location":"api/shark-android/shark/-android-reference-matchers/-w-i-n-d-o-w_-m-a-n-a-g-e-r_-g-l-o-b-a-l/#window_manager_global","text":"WINDOW_MANAGER_GLOBAL","title":"WINDOW_MANAGER_GLOBAL"},{"location":"api/shark-android/shark/-android-reference-matchers/app-defaults/","text":"shark-android / shark / AndroidReferenceMatchers / appDefaults appDefaults val appDefaults: List ReferenceMatcher See Also AndroidReferenceMatchers","title":"App defaults"},{"location":"api/shark-android/shark/-android-reference-matchers/app-defaults/#appdefaults","text":"val appDefaults: List ReferenceMatcher See Also AndroidReferenceMatchers","title":"appDefaults"},{"location":"api/shark-android/shark/-android-reference-matchers/build-known-references/","text":"shark-android / shark / AndroidReferenceMatchers / buildKnownReferences buildKnownReferences fun buildKnownReferences(referenceMatchers: Set AndroidReferenceMatchers ): List ReferenceMatcher Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers .","title":"Build known references"},{"location":"api/shark-android/shark/-android-reference-matchers/build-known-references/#buildknownreferences","text":"fun buildKnownReferences(referenceMatchers: Set AndroidReferenceMatchers ): List ReferenceMatcher Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers .","title":"buildKnownReferences"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-instance-field/","text":"shark-android / shark / AndroidReferenceMatchers / ignoredInstanceField ignoredInstanceField fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern .","title":"Ignored instance field"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-instance-field/#ignoredinstancefield","text":"fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern .","title":"ignoredInstanceField"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-java-local/","text":"shark-android / shark / AndroidReferenceMatchers / ignoredJavaLocal ignoredJavaLocal fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern .","title":"Ignored java local"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-java-local/#ignoredjavalocal","text":"fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern .","title":"ignoredJavaLocal"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-references-only/","text":"shark-android / shark / AndroidReferenceMatchers / ignoredReferencesOnly ignoredReferencesOnly val ignoredReferencesOnly: List ReferenceMatcher Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher .","title":"Ignored references only"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-references-only/#ignoredreferencesonly","text":"val ignoredReferencesOnly: List ReferenceMatcher Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher .","title":"ignoredReferencesOnly"},{"location":"api/shark-android/shark/-android-reference-matchers/instance-field-leak/","text":"shark-android / shark / AndroidReferenceMatchers / instanceFieldLeak instanceFieldLeak fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak.","title":"Instance field leak"},{"location":"api/shark-android/shark/-android-reference-matchers/instance-field-leak/#instancefieldleak","text":"fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak.","title":"instanceFieldLeak"},{"location":"api/shark-android/shark/-android-reference-matchers/native-global-variable-leak/","text":"shark-android / shark / AndroidReferenceMatchers / nativeGlobalVariableLeak nativeGlobalVariableLeak fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher","title":"Native global variable leak"},{"location":"api/shark-android/shark/-android-reference-matchers/native-global-variable-leak/#nativeglobalvariableleak","text":"fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher","title":"nativeGlobalVariableLeak"},{"location":"api/shark-android/shark/-android-reference-matchers/static-field-leak/","text":"shark-android / shark / AndroidReferenceMatchers / staticFieldLeak staticFieldLeak fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"Static field leak"},{"location":"api/shark-android/shark/-android-reference-matchers/static-field-leak/#staticfieldleak","text":"fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() - Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"staticFieldLeak"},{"location":"api/shark-android/shark/-android-resource-id-names/","text":"shark-android / shark / AndroidResourceIdNames AndroidResourceIdNames class AndroidResourceIdNames Functions Name Summary get operator fun get(id: Int ): String ? Companion Object Functions Name Summary readFromHeap fun readFromHeap(graph: HeapGraph): AndroidResourceIdNames ? saveToMemory fun saveToMemory(getResourceTypeName: ( Int ) - String ?, getResourceEntryName: ( Int ) - String ?): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-resource-id-names/#androidresourceidnames","text":"class AndroidResourceIdNames","title":"AndroidResourceIdNames"},{"location":"api/shark-android/shark/-android-resource-id-names/#functions","text":"Name Summary get operator fun get(id: Int ): String ?","title":"Functions"},{"location":"api/shark-android/shark/-android-resource-id-names/#companion-object-functions","text":"Name Summary readFromHeap fun readFromHeap(graph: HeapGraph): AndroidResourceIdNames ? saveToMemory fun saveToMemory(getResourceTypeName: ( Int ) - String ?, getResourceEntryName: ( Int ) - String ?): Unit","title":"Companion Object Functions"},{"location":"api/shark-android/shark/-android-resource-id-names/get/","text":"shark-android / shark / AndroidResourceIdNames / get get operator fun get(id: Int ): String ?","title":"Get"},{"location":"api/shark-android/shark/-android-resource-id-names/get/#get","text":"operator fun get(id: Int ): String ?","title":"get"},{"location":"api/shark-android/shark/-android-resource-id-names/read-from-heap/","text":"shark-android / shark / AndroidResourceIdNames / readFromHeap readFromHeap fun readFromHeap(graph: HeapGraph): AndroidResourceIdNames ?","title":"Read from heap"},{"location":"api/shark-android/shark/-android-resource-id-names/read-from-heap/#readfromheap","text":"fun readFromHeap(graph: HeapGraph): AndroidResourceIdNames ?","title":"readFromHeap"},{"location":"api/shark-android/shark/-android-resource-id-names/save-to-memory/","text":"shark-android / shark / AndroidResourceIdNames / saveToMemory saveToMemory @Synchronized fun saveToMemory(getResourceTypeName: ( Int ) - String ?, getResourceEntryName: ( Int ) - String ?): Unit Parameters getResourceTypeName - a function that delegates to Android Resources.getResourceTypeName but returns null when the name isn t found instead of throwing an exception. getResourceEntryName - a function that delegates to Android Resources.getResourceEntryName but returns null when the name isn t found instead of throwing an exception.","title":"Save to memory"},{"location":"api/shark-android/shark/-android-resource-id-names/save-to-memory/#savetomemory","text":"@Synchronized fun saveToMemory(getResourceTypeName: ( Int ) - String ?, getResourceEntryName: ( Int ) - String ?): Unit","title":"saveToMemory"},{"location":"api/shark-android/shark/-android-resource-id-names/save-to-memory/#parameters","text":"getResourceTypeName - a function that delegates to Android Resources.getResourceTypeName but returns null when the name isn t found instead of throwing an exception. getResourceEntryName - a function that delegates to Android Resources.getResourceEntryName but returns null when the name isn t found instead of throwing an exception.","title":"Parameters"},{"location":"api/shark-graph/","text":"shark-graph Packages Name Summary shark Index All Types","title":"Home"},{"location":"api/shark-graph/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-graph/#index","text":"All Types","title":"Index"},{"location":"api/shark-graph/alltypes/","text":"All Types Name Summary shark.GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. shark.HeapField Represents a static field or an instance field. shark.HeapGraph Enables navigation through the heap graph of objects. shark.HeapObject An object in the heap dump. shark.HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. shark.HprofHeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . shark.ProguardMapping shark.ProguardMappingReader","title":"Home"},{"location":"api/shark-graph/alltypes/#all-types","text":"Name Summary shark.GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. shark.HeapField Represents a static field or an instance field. shark.HeapGraph Enables navigation through the heap graph of objects. shark.HeapObject An object in the heap dump. shark.HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. shark.HprofHeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . shark.ProguardMapping shark.ProguardMappingReader","title":"All Types"},{"location":"api/shark-graph/shark/","text":"shark-graph / shark Package shark Types Name Summary GraphContext class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. HeapField class HeapField Represents a static field or an instance field. HeapGraph interface HeapGraph Enables navigation through the heap graph of objects. HeapObject sealed class HeapObject An object in the heap dump. HeapValue class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . ProguardMapping class ProguardMapping ProguardMappingReader class ProguardMappingReader","title":"Core: Graph"},{"location":"api/shark-graph/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-graph/shark/#types","text":"Name Summary GraphContext class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. HeapField class HeapField Represents a static field or an instance field. HeapGraph interface HeapGraph Enables navigation through the heap graph of objects. HeapObject sealed class HeapObject An object in the heap dump. HeapValue class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . ProguardMapping class ProguardMapping ProguardMappingReader class ProguardMappingReader","title":"Types"},{"location":"api/shark-graph/shark/-graph-context/","text":"shark-graph / shark / GraphContext GraphContext class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. Constructors Name Summary init GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. Functions Name Summary contains operator fun contains(key: String ): Boolean get operator fun T get(key: String ): T ? getOrPut fun T getOrPut(key: String , defaultValue: () - T ): T minusAssign operator fun minusAssign(key: String ): Unit set operator fun T set(key: String , value: T ): Unit","title":"Home"},{"location":"api/shark-graph/shark/-graph-context/#graphcontext","text":"class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":"GraphContext"},{"location":"api/shark-graph/shark/-graph-context/#constructors","text":"Name Summary init GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":"Constructors"},{"location":"api/shark-graph/shark/-graph-context/#functions","text":"Name Summary contains operator fun contains(key: String ): Boolean get operator fun T get(key: String ): T ? getOrPut fun T getOrPut(key: String , defaultValue: () - T ): T minusAssign operator fun minusAssign(key: String ): Unit set operator fun T set(key: String , value: T ): Unit","title":"Functions"},{"location":"api/shark-graph/shark/-graph-context/-init-/","text":"shark-graph / shark / GraphContext / init init GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":" init "},{"location":"api/shark-graph/shark/-graph-context/-init-/#init","text":"GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-graph-context/contains/","text":"shark-graph / shark / GraphContext / contains contains operator fun contains(key: String ): Boolean See Also MutableMap.containsKey","title":"Contains"},{"location":"api/shark-graph/shark/-graph-context/contains/#contains","text":"operator fun contains(key: String ): Boolean See Also MutableMap.containsKey","title":"contains"},{"location":"api/shark-graph/shark/-graph-context/get-or-put/","text":"shark-graph / shark / GraphContext / getOrPut getOrPut fun T getOrPut(key: String , defaultValue: () - T ): T See Also MutableMap.getOrPut","title":"Get or put"},{"location":"api/shark-graph/shark/-graph-context/get-or-put/#getorput","text":"fun T getOrPut(key: String , defaultValue: () - T ): T See Also MutableMap.getOrPut","title":"getOrPut"},{"location":"api/shark-graph/shark/-graph-context/get/","text":"shark-graph / shark / GraphContext / get get operator fun T get(key: String ): T ?","title":"Get"},{"location":"api/shark-graph/shark/-graph-context/get/#get","text":"operator fun T get(key: String ): T ?","title":"get"},{"location":"api/shark-graph/shark/-graph-context/minus-assign/","text":"shark-graph / shark / GraphContext / minusAssign minusAssign operator fun minusAssign(key: String ): Unit See Also MutableMap.remove","title":"Minus assign"},{"location":"api/shark-graph/shark/-graph-context/minus-assign/#minusassign","text":"operator fun minusAssign(key: String ): Unit See Also MutableMap.remove","title":"minusAssign"},{"location":"api/shark-graph/shark/-graph-context/set/","text":"shark-graph / shark / GraphContext / set set operator fun T set(key: String , value: T ): Unit See Also MutableMap.set","title":"Set"},{"location":"api/shark-graph/shark/-graph-context/set/#set","text":"operator fun T set(key: String , value: T ): Unit See Also MutableMap.set","title":"set"},{"location":"api/shark-graph/shark/-heap-field/","text":"shark-graph / shark / HeapField HeapField class HeapField Represents a static field or an instance field. Constructors Name Summary init HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field. Properties Name Summary declaringClass val declaringClass: HeapObject.HeapClass The class this field was declared in. name val name: String Name of the field value val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray . valueAsClass val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise. valueAsInstance val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise. valueAsObjectArray val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise. valueAsPrimitiveArray val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Home"},{"location":"api/shark-graph/shark/-heap-field/#heapfield","text":"class HeapField Represents a static field or an instance field.","title":"HeapField"},{"location":"api/shark-graph/shark/-heap-field/#constructors","text":"Name Summary init HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field.","title":"Constructors"},{"location":"api/shark-graph/shark/-heap-field/#properties","text":"Name Summary declaringClass val declaringClass: HeapObject.HeapClass The class this field was declared in. name val name: String Name of the field value val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray . valueAsClass val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise. valueAsInstance val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise. valueAsObjectArray val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise. valueAsPrimitiveArray val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-field/-init-/","text":"shark-graph / shark / HeapField / init init HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field.","title":" init "},{"location":"api/shark-graph/shark/-heap-field/-init-/#init","text":"HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field.","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-heap-field/declaring-class/","text":"shark-graph / shark / HeapField / declaringClass declaringClass val declaringClass: HeapObject.HeapClass The class this field was declared in.","title":"Declaring class"},{"location":"api/shark-graph/shark/-heap-field/declaring-class/#declaringclass","text":"val declaringClass: HeapObject.HeapClass The class this field was declared in.","title":"declaringClass"},{"location":"api/shark-graph/shark/-heap-field/name/","text":"shark-graph / shark / HeapField / name name val name: String Name of the field","title":"Name"},{"location":"api/shark-graph/shark/-heap-field/name/#name","text":"val name: String Name of the field","title":"name"},{"location":"api/shark-graph/shark/-heap-field/value-as-class/","text":"shark-graph / shark / HeapField / valueAsClass valueAsClass val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise.","title":"Value as class"},{"location":"api/shark-graph/shark/-heap-field/value-as-class/#valueasclass","text":"val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise.","title":"valueAsClass"},{"location":"api/shark-graph/shark/-heap-field/value-as-instance/","text":"shark-graph / shark / HeapField / valueAsInstance valueAsInstance val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise.","title":"Value as instance"},{"location":"api/shark-graph/shark/-heap-field/value-as-instance/#valueasinstance","text":"val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise.","title":"valueAsInstance"},{"location":"api/shark-graph/shark/-heap-field/value-as-object-array/","text":"shark-graph / shark / HeapField / valueAsObjectArray valueAsObjectArray val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise.","title":"Value as object array"},{"location":"api/shark-graph/shark/-heap-field/value-as-object-array/#valueasobjectarray","text":"val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise.","title":"valueAsObjectArray"},{"location":"api/shark-graph/shark/-heap-field/value-as-primitive-array/","text":"shark-graph / shark / HeapField / valueAsPrimitiveArray valueAsPrimitiveArray val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Value as primitive array"},{"location":"api/shark-graph/shark/-heap-field/value-as-primitive-array/#valueasprimitivearray","text":"val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"valueAsPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-field/value/","text":"shark-graph / shark / HeapField / value value val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray .","title":"Value"},{"location":"api/shark-graph/shark/-heap-field/value/#value","text":"val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray .","title":"value"},{"location":"api/shark-graph/shark/-heap-graph/","text":"shark-graph / shark / HeapGraph HeapGraph interface HeapGraph Enables navigation through the heap graph of objects. Properties Name Summary classes abstract val classes: Sequence HeapObject.HeapClass Sequence of all classes in the heap dump. context abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots abstract val gcRoots: List GcRoot All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump. identifierByteSize abstract val identifierByteSize: Int instances abstract val instances: Sequence HeapObject.HeapInstance Sequence of all instances in the heap dump. objectArrays abstract val objectArrays: Sequence HeapObject.HeapObjectArray Sequence of all object arrays in the heap dump. objects abstract val objects: Sequence HeapObject Sequence of all objects in the heap dump. primitiveArrays abstract val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Sequence of all primitive arrays in the heap dump. Functions Name Summary findClassByName abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump. Inheritors Name Summary HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof .","title":"Home"},{"location":"api/shark-graph/shark/-heap-graph/#heapgraph","text":"interface HeapGraph Enables navigation through the heap graph of objects.","title":"HeapGraph"},{"location":"api/shark-graph/shark/-heap-graph/#properties","text":"Name Summary classes abstract val classes: Sequence HeapObject.HeapClass Sequence of all classes in the heap dump. context abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots abstract val gcRoots: List GcRoot All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump. identifierByteSize abstract val identifierByteSize: Int instances abstract val instances: Sequence HeapObject.HeapInstance Sequence of all instances in the heap dump. objectArrays abstract val objectArrays: Sequence HeapObject.HeapObjectArray Sequence of all object arrays in the heap dump. objects abstract val objects: Sequence HeapObject Sequence of all objects in the heap dump. primitiveArrays abstract val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Sequence of all primitive arrays in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-graph/#functions","text":"Name Summary findClassByName abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Functions"},{"location":"api/shark-graph/shark/-heap-graph/#inheritors","text":"Name Summary HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof .","title":"Inheritors"},{"location":"api/shark-graph/shark/-heap-graph/classes/","text":"shark-graph / shark / HeapGraph / classes classes abstract val classes: Sequence HeapObject.HeapClass Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"Classes"},{"location":"api/shark-graph/shark/-heap-graph/classes/#classes","text":"abstract val classes: Sequence HeapObject.HeapClass Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"classes"},{"location":"api/shark-graph/shark/-heap-graph/context/","text":"shark-graph / shark / HeapGraph / context context abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"Context"},{"location":"api/shark-graph/shark/-heap-graph/context/#context","text":"abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"context"},{"location":"api/shark-graph/shark/-heap-graph/find-class-by-name/","text":"shark-graph / shark / HeapGraph / findClassByName findClassByName abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"Find class by name"},{"location":"api/shark-graph/shark/-heap-graph/find-class-by-name/#findclassbyname","text":"abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"findClassByName"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id-or-null/","text":"shark-graph / shark / HeapGraph / findObjectByIdOrNull findObjectByIdOrNull abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"Find object by id or null"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id-or-null/#findobjectbyidornull","text":"abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"findObjectByIdOrNull"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id/","text":"shark-graph / shark / HeapGraph / findObjectById findObjectById abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"Find object by id"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id/#findobjectbyid","text":"abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"findObjectById"},{"location":"api/shark-graph/shark/-heap-graph/gc-roots/","text":"shark-graph / shark / HeapGraph / gcRoots gcRoots abstract val gcRoots: List GcRoot All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump.","title":"Gc roots"},{"location":"api/shark-graph/shark/-heap-graph/gc-roots/#gcroots","text":"abstract val gcRoots: List GcRoot All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump.","title":"gcRoots"},{"location":"api/shark-graph/shark/-heap-graph/identifier-byte-size/","text":"shark-graph / shark / HeapGraph / identifierByteSize identifierByteSize abstract val identifierByteSize: Int","title":"Identifier byte size"},{"location":"api/shark-graph/shark/-heap-graph/identifier-byte-size/#identifierbytesize","text":"abstract val identifierByteSize: Int","title":"identifierByteSize"},{"location":"api/shark-graph/shark/-heap-graph/instances/","text":"shark-graph / shark / HeapGraph / instances instances abstract val instances: Sequence HeapObject.HeapInstance Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"Instances"},{"location":"api/shark-graph/shark/-heap-graph/instances/#instances","text":"abstract val instances: Sequence HeapObject.HeapInstance Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"instances"},{"location":"api/shark-graph/shark/-heap-graph/object-arrays/","text":"shark-graph / shark / HeapGraph / objectArrays objectArrays abstract val objectArrays: Sequence HeapObject.HeapObjectArray Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Object arrays"},{"location":"api/shark-graph/shark/-heap-graph/object-arrays/#objectarrays","text":"abstract val objectArrays: Sequence HeapObject.HeapObjectArray Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"objectArrays"},{"location":"api/shark-graph/shark/-heap-graph/object-exists/","text":"shark-graph / shark / HeapGraph / objectExists objectExists abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Object exists"},{"location":"api/shark-graph/shark/-heap-graph/object-exists/#objectexists","text":"abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"objectExists"},{"location":"api/shark-graph/shark/-heap-graph/objects/","text":"shark-graph / shark / HeapGraph / objects objects abstract val objects: Sequence HeapObject Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"Objects"},{"location":"api/shark-graph/shark/-heap-graph/objects/#objects","text":"abstract val objects: Sequence HeapObject Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"objects"},{"location":"api/shark-graph/shark/-heap-graph/primitive-arrays/","text":"shark-graph / shark / HeapGraph / primitiveArrays primitiveArrays abstract val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Primitive arrays"},{"location":"api/shark-graph/shark/-heap-graph/primitive-arrays/#primitivearrays","text":"abstract val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"primitiveArrays"},{"location":"api/shark-graph/shark/-heap-object/","text":"shark-graph / shark / HeapObject HeapObject sealed class HeapObject An object in the heap dump. Types Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump. Properties Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId abstract val objectId: Long The heap identifier of this object. Functions Name Summary readRecord abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord . Inheritors Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/#heapobject","text":"sealed class HeapObject An object in the heap dump.","title":"HeapObject"},{"location":"api/shark-graph/shark/-heap-object/#types","text":"Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"Types"},{"location":"api/shark-graph/shark/-heap-object/#properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId abstract val objectId: Long The heap identifier of this object.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/#functions","text":"Name Summary readRecord abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord .","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/#inheritors","text":"Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"Inheritors"},{"location":"api/shark-graph/shark/-heap-object/as-class/","text":"shark-graph / shark / HeapObject / asClass asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise","title":"As class"},{"location":"api/shark-graph/shark/-heap-object/as-class/#asclass","text":"val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise","title":"asClass"},{"location":"api/shark-graph/shark/-heap-object/as-instance/","text":"shark-graph / shark / HeapObject / asInstance asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise","title":"As instance"},{"location":"api/shark-graph/shark/-heap-object/as-instance/#asinstance","text":"val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise","title":"asInstance"},{"location":"api/shark-graph/shark/-heap-object/as-object-array/","text":"shark-graph / shark / HeapObject / asObjectArray asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise","title":"As object array"},{"location":"api/shark-graph/shark/-heap-object/as-object-array/#asobjectarray","text":"val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise","title":"asObjectArray"},{"location":"api/shark-graph/shark/-heap-object/as-primitive-array/","text":"shark-graph / shark / HeapObject / asPrimitiveArray asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"As primitive array"},{"location":"api/shark-graph/shark/-heap-object/as-primitive-array/#asprimitivearray","text":"val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"asPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-object/graph/","text":"shark-graph / shark / HeapObject / graph graph abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/graph/#graph","text":"abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/object-id/","text":"shark-graph / shark / HeapObject / objectId objectId abstract val objectId: Long The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/object-id/#objectid","text":"abstract val objectId: Long The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/read-record/","text":"shark-graph / shark / HeapObject / readRecord readRecord abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/read-record/#readrecord","text":"abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/","text":"shark-graph / shark / HeapObject / HeapClass HeapClass class HeapClass : HeapObject A class in the heap dump. Properties Name Summary classHierarchy val classHierarchy: Sequence HeapObject.HeapClass The class hierarchy starting at this class (included) and ending at the Object class (included). directInstances val directInstances: Sequence HeapObject.HeapInstance All direct instances of this class, ie excluding any instance of subclasses of this class. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceByteSize val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. instances val instances: Sequence HeapObject.HeapInstance All instances of this class, including instances of subclasses of this class. isArrayClass val isArrayClass: Boolean Returns true if this class is an array class, and false otherwise. isObjectArrayClass val isObjectArrayClass: Boolean isPrimitiveArrayClass val isPrimitiveArrayClass: Boolean name val name: String The name of this class, identical to Class.getName . objectArrayInstances val objectArrayInstances: Sequence HeapObject.HeapObjectArray objectId val objectId: Long The heap identifier of this object. primitiveArrayInstances val primitiveArrayInstances: Sequence HeapObject.HeapPrimitiveArray simpleName val simpleName: String Returns name stripped of any string content before the last period (included). subclasses val subclasses: Sequence HeapObject.HeapClass All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump. superclass val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned. Inherited Properties Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions Name Summary get operator fun get(fieldName: String ): HeapField ? readFieldsByteSize fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. readRecord fun readRecord(): ClassDumpRecord Reads and returns the underlying ClassDumpRecord . readStaticField fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. readStaticFields fun readStaticFields(): Sequence HeapField The static fields of this class, as a sequence of HeapField . subclassOf infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass . superclassOf infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#heapclass","text":"class HeapClass : HeapObject A class in the heap dump.","title":"HeapClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#properties","text":"Name Summary classHierarchy val classHierarchy: Sequence HeapObject.HeapClass The class hierarchy starting at this class (included) and ending at the Object class (included). directInstances val directInstances: Sequence HeapObject.HeapInstance All direct instances of this class, ie excluding any instance of subclasses of this class. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceByteSize val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. instances val instances: Sequence HeapObject.HeapInstance All instances of this class, including instances of subclasses of this class. isArrayClass val isArrayClass: Boolean Returns true if this class is an array class, and false otherwise. isObjectArrayClass val isObjectArrayClass: Boolean isPrimitiveArrayClass val isPrimitiveArrayClass: Boolean name val name: String The name of this class, identical to Class.getName . objectArrayInstances val objectArrayInstances: Sequence HeapObject.HeapObjectArray objectId val objectId: Long The heap identifier of this object. primitiveArrayInstances val primitiveArrayInstances: Sequence HeapObject.HeapPrimitiveArray simpleName val simpleName: String Returns name stripped of any string content before the last period (included). subclasses val subclasses: Sequence HeapObject.HeapClass All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump. superclass val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#functions","text":"Name Summary get operator fun get(fieldName: String ): HeapField ? readFieldsByteSize fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. readRecord fun readRecord(): ClassDumpRecord Reads and returns the underlying ClassDumpRecord . readStaticField fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. readStaticFields fun readStaticFields(): Sequence HeapField The static fields of this class, as a sequence of HeapField . subclassOf infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass . superclassOf infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy/","text":"shark-graph / shark / HeapObject / HeapClass / classHierarchy classHierarchy val classHierarchy: Sequence HeapObject.HeapClass The class hierarchy starting at this class (included) and ending at the Object class (included).","title":"Class hierarchy"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy/#classhierarchy","text":"val classHierarchy: Sequence HeapObject.HeapClass The class hierarchy starting at this class (included) and ending at the Object class (included).","title":"classHierarchy"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/direct-instances/","text":"shark-graph / shark / HeapObject / HeapClass / directInstances directInstances val directInstances: Sequence HeapObject.HeapInstance All direct instances of this class, ie excluding any instance of subclasses of this class.","title":"Direct instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/direct-instances/#directinstances","text":"val directInstances: Sequence HeapObject.HeapInstance All direct instances of this class, ie excluding any instance of subclasses of this class.","title":"directInstances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/get/","text":"shark-graph / shark / HeapObject / HeapClass / get get operator fun get(fieldName: String ): HeapField ? See Also readStaticField","title":"Get"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/get/#get","text":"operator fun get(fieldName: String ): HeapField ? See Also readStaticField","title":"get"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/graph/","text":"shark-graph / shark / HeapObject / HeapClass / graph graph val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size/","text":"shark-graph / shark / HeapObject / HeapClass / instanceByteSize instanceByteSize val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. See Also readFieldsByteSize","title":"Instance byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size/#instancebytesize","text":"val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. See Also readFieldsByteSize","title":"instanceByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instances/","text":"shark-graph / shark / HeapObject / HeapClass / instances instances val instances: Sequence HeapObject.HeapInstance All instances of this class, including instances of subclasses of this class.","title":"Instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instances/#instances","text":"val instances: Sequence HeapObject.HeapInstance All instances of this class, including instances of subclasses of this class.","title":"instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-array-class/","text":"shark-graph / shark / HeapObject / HeapClass / isArrayClass isArrayClass val isArrayClass: Boolean Returns true if this class is an array class, and false otherwise.","title":"Is array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-array-class/#isarrayclass","text":"val isArrayClass: Boolean Returns true if this class is an array class, and false otherwise.","title":"isArrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-object-array-class/","text":"shark-graph / shark / HeapObject / HeapClass / isObjectArrayClass isObjectArrayClass val isObjectArrayClass: Boolean","title":"Is object array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-object-array-class/#isobjectarrayclass","text":"val isObjectArrayClass: Boolean","title":"isObjectArrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-primitive-array-class/","text":"shark-graph / shark / HeapObject / HeapClass / isPrimitiveArrayClass isPrimitiveArrayClass val isPrimitiveArrayClass: Boolean","title":"Is primitive array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-primitive-array-class/#isprimitivearrayclass","text":"val isPrimitiveArrayClass: Boolean","title":"isPrimitiveArrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/name/","text":"shark-graph / shark / HeapObject / HeapClass / name name val name: String The name of this class, identical to Class.getName .","title":"Name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/name/#name","text":"val name: String The name of this class, identical to Class.getName .","title":"name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-array-instances/","text":"shark-graph / shark / HeapObject / HeapClass / objectArrayInstances objectArrayInstances val objectArrayInstances: Sequence HeapObject.HeapObjectArray","title":"Object array instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-array-instances/#objectarrayinstances","text":"val objectArrayInstances: Sequence HeapObject.HeapObjectArray","title":"objectArrayInstances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-id/","text":"shark-graph / shark / HeapObject / HeapClass / objectId objectId val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/primitive-array-instances/","text":"shark-graph / shark / HeapObject / HeapClass / primitiveArrayInstances primitiveArrayInstances val primitiveArrayInstances: Sequence HeapObject.HeapPrimitiveArray","title":"Primitive array instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/primitive-array-instances/#primitivearrayinstances","text":"val primitiveArrayInstances: Sequence HeapObject.HeapPrimitiveArray","title":"primitiveArrayInstances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size/","text":"shark-graph / shark / HeapObject / HeapClass / readFieldsByteSize readFieldsByteSize fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. This may trigger IO reads. See Also instanceByteSize","title":"Read fields byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size/#readfieldsbytesize","text":"fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. This may trigger IO reads. See Also instanceByteSize","title":"readFieldsByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record/","text":"shark-graph / shark / HeapObject / HeapClass / readRecord readRecord fun readRecord(): ClassDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ClassDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record/#readrecord","text":"fun readRecord(): ClassDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ClassDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-field/","text":"shark-graph / shark / HeapObject / HeapClass / readStaticField readStaticField fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"Read static field"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-field/#readstaticfield","text":"fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"readStaticField"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-fields/","text":"shark-graph / shark / HeapObject / HeapClass / readStaticFields readStaticFields fun readStaticFields(): Sequence HeapField The static fields of this class, as a sequence of HeapField . This may trigger IO reads.","title":"Read static fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-fields/#readstaticfields","text":"fun readStaticFields(): Sequence HeapField The static fields of this class, as a sequence of HeapField . This may trigger IO reads.","title":"readStaticFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/simple-name/","text":"shark-graph / shark / HeapObject / HeapClass / simpleName simpleName val simpleName: String Returns name stripped of any string content before the last period (included).","title":"Simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/simple-name/#simplename","text":"val simpleName: String Returns name stripped of any string content before the last period (included).","title":"simpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclass-of/","text":"shark-graph / shark / HeapObject / HeapClass / subclassOf subclassOf infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass .","title":"Subclass of"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclass-of/#subclassof","text":"infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass .","title":"subclassOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclasses/","text":"shark-graph / shark / HeapObject / HeapClass / subclasses subclasses val subclasses: Sequence HeapObject.HeapClass All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump.","title":"Subclasses"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclasses/#subclasses","text":"val subclasses: Sequence HeapObject.HeapClass All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump.","title":"subclasses"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass-of/","text":"shark-graph / shark / HeapObject / HeapClass / superclassOf superclassOf infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass .","title":"Superclass of"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass-of/#superclassof","text":"infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass .","title":"superclassOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass/","text":"shark-graph / shark / HeapObject / HeapClass / superclass superclass val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"Superclass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass/#superclass","text":"val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"superclass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/to-string/","text":"shark-graph / shark / HeapObject / HeapClass / toString toString fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/","text":"shark-graph / shark / HeapObject / HeapInstance HeapInstance class HeapInstance : HeapObject An instance in the heap dump. Properties Name Summary byteSize val byteSize: Int graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceClass val instanceClass: HeapObject.HeapClass The class of this instance. instanceClassName val instanceClassName: String The name of the class of this instance, identical to Class.getName . instanceClassSimpleName val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included). isPrimitiveWrapper val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type. objectId val objectId: Long The heap identifier of this object. Inherited Properties Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions Name Summary get operator fun get(declaringClass: KClass out Any , fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? instanceOf infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass * ): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class. readAsJavaString fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. readField fun readField(declaringClass: KClass out Any , fieldName: String ): HeapField ?``fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. readFields fun readFields(): Sequence HeapField The fields of this instance, as a sequence of HeapField . readRecord fun readRecord(): InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#heapinstance","text":"class HeapInstance : HeapObject An instance in the heap dump.","title":"HeapInstance"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#properties","text":"Name Summary byteSize val byteSize: Int graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceClass val instanceClass: HeapObject.HeapClass The class of this instance. instanceClassName val instanceClassName: String The name of the class of this instance, identical to Class.getName . instanceClassSimpleName val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included). isPrimitiveWrapper val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type. objectId val objectId: Long The heap identifier of this object.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#functions","text":"Name Summary get operator fun get(declaringClass: KClass out Any , fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? instanceOf infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass * ): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class. readAsJavaString fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. readField fun readField(declaringClass: KClass out Any , fieldName: String ): HeapField ?``fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. readFields fun readFields(): Sequence HeapField The fields of this instance, as a sequence of HeapField . readRecord fun readRecord(): InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/byte-size/","text":"shark-graph / shark / HeapObject / HeapInstance / byteSize byteSize val byteSize: Int See Also HeapClass.instanceByteSize","title":"Byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/byte-size/#bytesize","text":"val byteSize: Int See Also HeapClass.instanceByteSize","title":"byteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/get/","text":"shark-graph / shark / HeapObject / HeapInstance / get get operator fun get(declaringClass: KClass out Any , fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? See Also readField","title":"Get"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/get/#get","text":"operator fun get(declaringClass: KClass out Any , fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? See Also readField","title":"get"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/graph/","text":"shark-graph / shark / HeapObject / HeapInstance / graph graph val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceClassName instanceClassName val instanceClassName: String The name of the class of this instance, identical to Class.getName .","title":"Instance class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name/#instanceclassname","text":"val instanceClassName: String The name of the class of this instance, identical to Class.getName .","title":"instanceClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceClassSimpleName instanceClassSimpleName val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included).","title":"Instance class simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name/#instanceclasssimplename","text":"val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included).","title":"instanceClassSimpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceClass instanceClass val instanceClass: HeapObject.HeapClass The class of this instance.","title":"Instance class"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class/#instanceclass","text":"val instanceClass: HeapObject.HeapClass The class of this instance.","title":"instanceClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-of/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceOf instanceOf infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass * ): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class.","title":"Instance of"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-of/#instanceof","text":"infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass * ): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class.","title":"instanceOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper/","text":"shark-graph / shark / HeapObject / HeapInstance / isPrimitiveWrapper isPrimitiveWrapper val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type.","title":"Is primitive wrapper"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper/#isprimitivewrapper","text":"val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type.","title":"isPrimitiveWrapper"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-id/","text":"shark-graph / shark / HeapObject / HeapInstance / objectId objectId val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string/","text":"shark-graph / shark / HeapObject / HeapInstance / readAsJavaString readAsJavaString fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"Read as java string"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string/#readasjavastring","text":"fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"readAsJavaString"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-field/","text":"shark-graph / shark / HeapObject / HeapInstance / readField readField fun readField(declaringClass: KClass out Any , fieldName: String ): HeapField ? See Also readField fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"Read field"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-field/#readfield","text":"fun readField(declaringClass: KClass out Any , fieldName: String ): HeapField ? See Also readField fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"readField"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-fields/","text":"shark-graph / shark / HeapObject / HeapInstance / readFields readFields fun readFields(): Sequence HeapField The fields of this instance, as a sequence of HeapField . This may trigger IO reads.","title":"Read fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-fields/#readfields","text":"fun readFields(): Sequence HeapField The fields of this instance, as a sequence of HeapField . This may trigger IO reads.","title":"readFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-record/","text":"shark-graph / shark / HeapObject / HeapInstance / readRecord readRecord fun readRecord(): InstanceDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying InstanceDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-record/#readrecord","text":"fun readRecord(): InstanceDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying InstanceDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/to-string/","text":"shark-graph / shark / HeapObject / HeapInstance / toString toString fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/","text":"shark-graph / shark / HeapObject / HeapObjectArray HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. Properties Name Summary arrayClass val arrayClass: HeapObject.HeapClass The class of this array. arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . arrayClassSimpleName val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included). graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. isPrimitiveWrapperArray val isPrimitiveWrapperArray: Boolean objectId val objectId: Long The heap identifier of this object. Inherited Properties Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readElements fun readElements(): Sequence HeapValue The elements in this array, as a sequence of HeapValue . readRecord fun readRecord(): ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#heapobjectarray","text":"class HeapObjectArray : HeapObject An object array in the heap dump.","title":"HeapObjectArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#properties","text":"Name Summary arrayClass val arrayClass: HeapObject.HeapClass The class of this array. arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . arrayClassSimpleName val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included). graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. isPrimitiveWrapperArray val isPrimitiveWrapperArray: Boolean objectId val objectId: Long The heap identifier of this object.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#functions","text":"Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readElements fun readElements(): Sequence HeapValue The elements in this array, as a sequence of HeapValue . readRecord fun readRecord(): ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name/","text":"shark-graph / shark / HeapObject / HeapObjectArray / arrayClassName arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"Array class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name/#arrayclassname","text":"val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"arrayClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name/","text":"shark-graph / shark / HeapObject / HeapObjectArray / arrayClassSimpleName arrayClassSimpleName val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included).","title":"Array class simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name/#arrayclasssimplename","text":"val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included).","title":"arrayClassSimpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class/","text":"shark-graph / shark / HeapObject / HeapObjectArray / arrayClass arrayClass val arrayClass: HeapObject.HeapClass The class of this array.","title":"Array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class/#arrayclass","text":"val arrayClass: HeapObject.HeapClass The class of this array.","title":"arrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/graph/","text":"shark-graph / shark / HeapObject / HeapObjectArray / graph graph val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/is-primitive-wrapper-array/","text":"shark-graph / shark / HeapObject / HeapObjectArray / isPrimitiveWrapperArray isPrimitiveWrapperArray val isPrimitiveWrapperArray: Boolean","title":"Is primitive wrapper array"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/is-primitive-wrapper-array/#isprimitivewrapperarray","text":"val isPrimitiveWrapperArray: Boolean","title":"isPrimitiveWrapperArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-id/","text":"shark-graph / shark / HeapObject / HeapObjectArray / objectId objectId val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size/","text":"shark-graph / shark / HeapObject / HeapObjectArray / readByteSize readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"Read byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size/#readbytesize","text":"fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"readByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-elements/","text":"shark-graph / shark / HeapObject / HeapObjectArray / readElements readElements fun readElements(): Sequence HeapValue The elements in this array, as a sequence of HeapValue . This may trigger IO reads.","title":"Read elements"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-elements/#readelements","text":"fun readElements(): Sequence HeapValue The elements in this array, as a sequence of HeapValue . This may trigger IO reads.","title":"readElements"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-record/","text":"shark-graph / shark / HeapObject / HeapObjectArray / readRecord readRecord fun readRecord(): ObjectArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ObjectArrayDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-record/#readrecord","text":"fun readRecord(): ObjectArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ObjectArrayDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/to-string/","text":"shark-graph / shark / HeapObject / HeapObjectArray / toString toString fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump. Properties Name Summary arrayClass val arrayClass: HeapObject.HeapClass The class of this array. arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId val objectId: Long The heap identifier of this object. primitiveType val primitiveType: PrimitiveType The PrimitiveType of elements in this array. Inherited Properties Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readRecord fun readRecord(): PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#heapprimitivearray","text":"class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"HeapPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#properties","text":"Name Summary arrayClass val arrayClass: HeapObject.HeapClass The class of this array. arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId val objectId: Long The heap identifier of this object. primitiveType val primitiveType: PrimitiveType The PrimitiveType of elements in this array.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#functions","text":"Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readRecord fun readRecord(): PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / arrayClassName arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"Array class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name/#arrayclassname","text":"val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"arrayClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / arrayClass arrayClass val arrayClass: HeapObject.HeapClass The class of this array.","title":"Array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class/#arrayclass","text":"val arrayClass: HeapObject.HeapClass The class of this array.","title":"arrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/graph/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / graph graph val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / objectId objectId val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / primitiveType primitiveType val primitiveType: PrimitiveType The PrimitiveType of elements in this array.","title":"Primitive type"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type/#primitivetype","text":"val primitiveType: PrimitiveType The PrimitiveType of elements in this array.","title":"primitiveType"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / readByteSize readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"Read byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size/#readbytesize","text":"fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"readByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / readRecord readRecord fun readRecord(): PrimitiveArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying PrimitiveArrayDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record/#readrecord","text":"fun readRecord(): PrimitiveArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying PrimitiveArrayDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / toString toString fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-value/","text":"shark-graph / shark / HeapValue HeapValue class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. Constructors Name Summary init HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type. Properties Name Summary asBoolean val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise. asByte val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise. asChar val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise. asDouble val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise. asFloat val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise. asInt val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise. asLong val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise. asNonNullObjectId val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise. asObject val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise. asObjectId val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise. asShort val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. holder val holder: ValueHolder Holds the actual value that this HeapValue represents. isNonNullReference val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise. isNullReference val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise. Functions Name Summary readAsJavaString fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null.","title":"Home"},{"location":"api/shark-graph/shark/-heap-value/#heapvalue","text":"class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type.","title":"HeapValue"},{"location":"api/shark-graph/shark/-heap-value/#constructors","text":"Name Summary init HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type.","title":"Constructors"},{"location":"api/shark-graph/shark/-heap-value/#properties","text":"Name Summary asBoolean val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise. asByte val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise. asChar val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise. asDouble val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise. asFloat val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise. asInt val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise. asLong val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise. asNonNullObjectId val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise. asObject val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise. asObjectId val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise. asShort val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. holder val holder: ValueHolder Holds the actual value that this HeapValue represents. isNonNullReference val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise. isNullReference val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-value/#functions","text":"Name Summary readAsJavaString fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null.","title":"Functions"},{"location":"api/shark-graph/shark/-heap-value/-init-/","text":"shark-graph / shark / HeapValue / init init HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type.","title":" init "},{"location":"api/shark-graph/shark/-heap-value/-init-/#init","text":"HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type.","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-heap-value/as-boolean/","text":"shark-graph / shark / HeapValue / asBoolean asBoolean val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise.","title":"As boolean"},{"location":"api/shark-graph/shark/-heap-value/as-boolean/#asboolean","text":"val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise.","title":"asBoolean"},{"location":"api/shark-graph/shark/-heap-value/as-byte/","text":"shark-graph / shark / HeapValue / asByte asByte val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise.","title":"As byte"},{"location":"api/shark-graph/shark/-heap-value/as-byte/#asbyte","text":"val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise.","title":"asByte"},{"location":"api/shark-graph/shark/-heap-value/as-char/","text":"shark-graph / shark / HeapValue / asChar asChar val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise.","title":"As char"},{"location":"api/shark-graph/shark/-heap-value/as-char/#aschar","text":"val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise.","title":"asChar"},{"location":"api/shark-graph/shark/-heap-value/as-double/","text":"shark-graph / shark / HeapValue / asDouble asDouble val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise.","title":"As double"},{"location":"api/shark-graph/shark/-heap-value/as-double/#asdouble","text":"val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise.","title":"asDouble"},{"location":"api/shark-graph/shark/-heap-value/as-float/","text":"shark-graph / shark / HeapValue / asFloat asFloat val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise.","title":"As float"},{"location":"api/shark-graph/shark/-heap-value/as-float/#asfloat","text":"val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise.","title":"asFloat"},{"location":"api/shark-graph/shark/-heap-value/as-int/","text":"shark-graph / shark / HeapValue / asInt asInt val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise.","title":"As int"},{"location":"api/shark-graph/shark/-heap-value/as-int/#asint","text":"val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise.","title":"asInt"},{"location":"api/shark-graph/shark/-heap-value/as-long/","text":"shark-graph / shark / HeapValue / asLong asLong val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise.","title":"As long"},{"location":"api/shark-graph/shark/-heap-value/as-long/#aslong","text":"val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise.","title":"asLong"},{"location":"api/shark-graph/shark/-heap-value/as-non-null-object-id/","text":"shark-graph / shark / HeapValue / asNonNullObjectId asNonNullObjectId val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise.","title":"As non null object id"},{"location":"api/shark-graph/shark/-heap-value/as-non-null-object-id/#asnonnullobjectid","text":"val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise.","title":"asNonNullObjectId"},{"location":"api/shark-graph/shark/-heap-value/as-object-id/","text":"shark-graph / shark / HeapValue / asObjectId asObjectId val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise.","title":"As object id"},{"location":"api/shark-graph/shark/-heap-value/as-object-id/#asobjectid","text":"val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise.","title":"asObjectId"},{"location":"api/shark-graph/shark/-heap-value/as-object/","text":"shark-graph / shark / HeapValue / asObject asObject val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise.","title":"As object"},{"location":"api/shark-graph/shark/-heap-value/as-object/#asobject","text":"val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise.","title":"asObject"},{"location":"api/shark-graph/shark/-heap-value/as-short/","text":"shark-graph / shark / HeapValue / asShort asShort val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise.","title":"As short"},{"location":"api/shark-graph/shark/-heap-value/as-short/#asshort","text":"val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise.","title":"asShort"},{"location":"api/shark-graph/shark/-heap-value/graph/","text":"shark-graph / shark / HeapValue / graph graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-value/graph/#graph","text":"val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-value/holder/","text":"shark-graph / shark / HeapValue / holder holder val holder: ValueHolder Holds the actual value that this HeapValue represents.","title":"Holder"},{"location":"api/shark-graph/shark/-heap-value/holder/#holder","text":"val holder: ValueHolder Holds the actual value that this HeapValue represents.","title":"holder"},{"location":"api/shark-graph/shark/-heap-value/is-non-null-reference/","text":"shark-graph / shark / HeapValue / isNonNullReference isNonNullReference val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise.","title":"Is non null reference"},{"location":"api/shark-graph/shark/-heap-value/is-non-null-reference/#isnonnullreference","text":"val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise.","title":"isNonNullReference"},{"location":"api/shark-graph/shark/-heap-value/is-null-reference/","text":"shark-graph / shark / HeapValue / isNullReference isNullReference val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"Is null reference"},{"location":"api/shark-graph/shark/-heap-value/is-null-reference/#isnullreference","text":"val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"isNullReference"},{"location":"api/shark-graph/shark/-heap-value/read-as-java-string/","text":"shark-graph / shark / HeapValue / readAsJavaString readAsJavaString fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"Read as java string"},{"location":"api/shark-graph/shark/-heap-value/read-as-java-string/#readasjavastring","text":"fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"readAsJavaString"},{"location":"api/shark-graph/shark/-hprof-heap-graph/","text":"shark-graph / shark / HprofHeapGraph HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . Properties Name Summary classes val classes: Sequence HeapObject.HeapClass Sequence of all classes in the heap dump. context val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots val gcRoots: List GcRoot All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump. identifierByteSize val identifierByteSize: Int instances val instances: Sequence HeapObject.HeapInstance Sequence of all instances in the heap dump. objectArrays val objectArrays: Sequence HeapObject.HeapObjectArray Sequence of all object arrays in the heap dump. objects val objects: Sequence HeapObject Sequence of all objects in the heap dump. primitiveArrays val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Sequence of all primitive arrays in the heap dump. Functions Name Summary findClassByName fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump. Companion Object Functions Name Summary indexHprof fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null, indexedGcRootTypes: Set KClass ` = setOf( JniGlobal::class, JavaFrame::class, JniLocal::class, MonitorUsed::class, NativeStack::class, StickyClass::class, ThreadBlock::class, // ThreadObject points to threads, which we need to find the thread that a JavaLocalPattern // belongs to ThreadObject::class, JniMonitor::class /* Not included here: VmInternal: Ignoring because we ve got 150K of it, but is this the right thing to do? What s VmInternal exactly? History does not go further than https://android.googlesource.com/platform/dalvik2/+/refs/heads/master/hit/src/com/android/hit/HprofParser.java#77 We should log to figure out what objects VmInternal points to. ReferenceCleanup: We used to keep it, but the name doesn t seem like it should create a leak. Unknown: it s unknown, should we care? We definitely don t care about those for leak finding: InternedString, Finalizing, Debugger, Unreachable */ )): `[`HeapGraph`](../-heap-graph/index.md) |","title":"Home"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#hprofheapgraph","text":"class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof .","title":"HprofHeapGraph"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#properties","text":"Name Summary classes val classes: Sequence HeapObject.HeapClass Sequence of all classes in the heap dump. context val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots val gcRoots: List GcRoot All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump. identifierByteSize val identifierByteSize: Int instances val instances: Sequence HeapObject.HeapInstance Sequence of all instances in the heap dump. objectArrays val objectArrays: Sequence HeapObject.HeapObjectArray Sequence of all object arrays in the heap dump. objects val objects: Sequence HeapObject Sequence of all objects in the heap dump. primitiveArrays val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Sequence of all primitive arrays in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#functions","text":"Name Summary findClassByName fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Functions"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#companion-object-functions","text":"Name Summary indexHprof fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null, indexedGcRootTypes: Set KClass ` = setOf( JniGlobal::class, JavaFrame::class, JniLocal::class, MonitorUsed::class, NativeStack::class, StickyClass::class, ThreadBlock::class, // ThreadObject points to threads, which we need to find the thread that a JavaLocalPattern // belongs to ThreadObject::class, JniMonitor::class /* Not included here: VmInternal: Ignoring because we ve got 150K of it, but is this the right thing to do? What s VmInternal exactly? History does not go further than https://android.googlesource.com/platform/dalvik2/+/refs/heads/master/hit/src/com/android/hit/HprofParser.java#77 We should log to figure out what objects VmInternal points to. ReferenceCleanup: We used to keep it, but the name doesn t seem like it should create a leak. Unknown: it s unknown, should we care? We definitely don t care about those for leak finding: InternedString, Finalizing, Debugger, Unreachable */ )): `[`HeapGraph`](../-heap-graph/index.md) |","title":"Companion Object Functions"},{"location":"api/shark-graph/shark/-hprof-heap-graph/classes/","text":"shark-graph / shark / HprofHeapGraph / classes classes val classes: Sequence HeapObject.HeapClass Overrides HeapGraph.classes Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"Classes"},{"location":"api/shark-graph/shark/-hprof-heap-graph/classes/#classes","text":"val classes: Sequence HeapObject.HeapClass Overrides HeapGraph.classes Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"classes"},{"location":"api/shark-graph/shark/-hprof-heap-graph/context/","text":"shark-graph / shark / HprofHeapGraph / context context val context: GraphContext Overrides HeapGraph.context In memory store that can be used to store objects this HeapGraph instance.","title":"Context"},{"location":"api/shark-graph/shark/-hprof-heap-graph/context/#context","text":"val context: GraphContext Overrides HeapGraph.context In memory store that can be used to store objects this HeapGraph instance.","title":"context"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-class-by-name/","text":"shark-graph / shark / HprofHeapGraph / findClassByName findClassByName fun findClassByName(className: String ): HeapObject.HeapClass ? Overrides HeapGraph.findClassByName Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"Find class by name"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-class-by-name/#findclassbyname","text":"fun findClassByName(className: String ): HeapObject.HeapClass ? Overrides HeapGraph.findClassByName Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"findClassByName"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id-or-null/","text":"shark-graph / shark / HprofHeapGraph / findObjectByIdOrNull findObjectByIdOrNull fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Overrides HeapGraph.findObjectByIdOrNull Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"Find object by id or null"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id-or-null/#findobjectbyidornull","text":"fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Overrides HeapGraph.findObjectByIdOrNull Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"findObjectByIdOrNull"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id/","text":"shark-graph / shark / HprofHeapGraph / findObjectById findObjectById fun findObjectById(objectId: Long ): HeapObject Overrides HeapGraph.findObjectById Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"Find object by id"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id/#findobjectbyid","text":"fun findObjectById(objectId: Long ): HeapObject Overrides HeapGraph.findObjectById Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"findObjectById"},{"location":"api/shark-graph/shark/-hprof-heap-graph/gc-roots/","text":"shark-graph / shark / HprofHeapGraph / gcRoots gcRoots val gcRoots: List GcRoot Overrides HeapGraph.gcRoots All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump.","title":"Gc roots"},{"location":"api/shark-graph/shark/-hprof-heap-graph/gc-roots/#gcroots","text":"val gcRoots: List GcRoot Overrides HeapGraph.gcRoots All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don t exist in the heap dump.","title":"gcRoots"},{"location":"api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size/","text":"shark-graph / shark / HprofHeapGraph / identifierByteSize identifierByteSize val identifierByteSize: Int Overrides HeapGraph.identifierByteSize","title":"Identifier byte size"},{"location":"api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size/#identifierbytesize","text":"val identifierByteSize: Int Overrides HeapGraph.identifierByteSize","title":"identifierByteSize"},{"location":"api/shark-graph/shark/-hprof-heap-graph/index-hprof/","text":"shark-graph / shark / HprofHeapGraph / indexHprof indexHprof fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null, indexedGcRootTypes: Set KClass ` = setOf( JniGlobal::class, JavaFrame::class, JniLocal::class, MonitorUsed::class, NativeStack::class, StickyClass::class, ThreadBlock::class, // ThreadObject points to threads, which we need to find the thread that a JavaLocalPattern // belongs to ThreadObject::class, JniMonitor::class /* Not included here: VmInternal: Ignoring because we ve got 150K of it, but is this the right thing to do? What s VmInternal exactly? History does not go further than https://android.googlesource.com/platform/dalvik2/+/refs/heads/master/hit/src/com/android/hit/HprofParser.java#77 We should log to figure out what objects VmInternal points to. ReferenceCleanup: We used to keep it, but the name doesn t seem like it should create a leak. Unknown: it s unknown, should we care? We definitely don t care about those for leak finding: InternedString, Finalizing, Debugger, Unreachable */ )): `[`HeapGraph`](../-heap-graph/index.md)","title":"Index hprof"},{"location":"api/shark-graph/shark/-hprof-heap-graph/index-hprof/#indexhprof","text":"fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null, indexedGcRootTypes: Set KClass ` = setOf( JniGlobal::class, JavaFrame::class, JniLocal::class, MonitorUsed::class, NativeStack::class, StickyClass::class, ThreadBlock::class, // ThreadObject points to threads, which we need to find the thread that a JavaLocalPattern // belongs to ThreadObject::class, JniMonitor::class /* Not included here: VmInternal: Ignoring because we ve got 150K of it, but is this the right thing to do? What s VmInternal exactly? History does not go further than https://android.googlesource.com/platform/dalvik2/+/refs/heads/master/hit/src/com/android/hit/HprofParser.java#77 We should log to figure out what objects VmInternal points to. ReferenceCleanup: We used to keep it, but the name doesn t seem like it should create a leak. Unknown: it s unknown, should we care? We definitely don t care about those for leak finding: InternedString, Finalizing, Debugger, Unreachable */ )): `[`HeapGraph`](../-heap-graph/index.md)","title":"indexHprof"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instances/","text":"shark-graph / shark / HprofHeapGraph / instances instances val instances: Sequence HeapObject.HeapInstance Overrides HeapGraph.instances Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"Instances"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instances/#instances","text":"val instances: Sequence HeapObject.HeapInstance Overrides HeapGraph.instances Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"instances"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-arrays/","text":"shark-graph / shark / HprofHeapGraph / objectArrays objectArrays val objectArrays: Sequence HeapObject.HeapObjectArray Overrides HeapGraph.objectArrays Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Object arrays"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-arrays/#objectarrays","text":"val objectArrays: Sequence HeapObject.HeapObjectArray Overrides HeapGraph.objectArrays Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"objectArrays"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-exists/","text":"shark-graph / shark / HprofHeapGraph / objectExists objectExists fun objectExists(objectId: Long ): Boolean Overrides HeapGraph.objectExists Returns true if the provided objectId exists in the heap dump.","title":"Object exists"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-exists/#objectexists","text":"fun objectExists(objectId: Long ): Boolean Overrides HeapGraph.objectExists Returns true if the provided objectId exists in the heap dump.","title":"objectExists"},{"location":"api/shark-graph/shark/-hprof-heap-graph/objects/","text":"shark-graph / shark / HprofHeapGraph / objects objects val objects: Sequence HeapObject Overrides HeapGraph.objects Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"Objects"},{"location":"api/shark-graph/shark/-hprof-heap-graph/objects/#objects","text":"val objects: Sequence HeapObject Overrides HeapGraph.objects Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"objects"},{"location":"api/shark-graph/shark/-hprof-heap-graph/primitive-arrays/","text":"shark-graph / shark / HprofHeapGraph / primitiveArrays primitiveArrays val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Overrides HeapGraph.primitiveArrays Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Primitive arrays"},{"location":"api/shark-graph/shark/-hprof-heap-graph/primitive-arrays/#primitivearrays","text":"val primitiveArrays: Sequence HeapObject.HeapPrimitiveArray Overrides HeapGraph.primitiveArrays Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"primitiveArrays"},{"location":"api/shark-graph/shark/-proguard-mapping/","text":"shark-graph / shark / ProguardMapping ProguardMapping class ProguardMapping Constructors Name Summary init ProguardMapping() Functions Name Summary addMapping fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map. deobfuscateClassName fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name. deobfuscateFieldName fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Home"},{"location":"api/shark-graph/shark/-proguard-mapping/#proguardmapping","text":"class ProguardMapping","title":"ProguardMapping"},{"location":"api/shark-graph/shark/-proguard-mapping/#constructors","text":"Name Summary init ProguardMapping()","title":"Constructors"},{"location":"api/shark-graph/shark/-proguard-mapping/#functions","text":"Name Summary addMapping fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map. deobfuscateClassName fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name. deobfuscateFieldName fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Functions"},{"location":"api/shark-graph/shark/-proguard-mapping/-init-/","text":"shark-graph / shark / ProguardMapping / init init ProguardMapping()","title":" init "},{"location":"api/shark-graph/shark/-proguard-mapping/-init-/#init","text":"ProguardMapping()","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-proguard-mapping/add-mapping/","text":"shark-graph / shark / ProguardMapping / addMapping addMapping fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map.","title":"Add mapping"},{"location":"api/shark-graph/shark/-proguard-mapping/add-mapping/#addmapping","text":"fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map.","title":"addMapping"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-class-name/","text":"shark-graph / shark / ProguardMapping / deobfuscateClassName deobfuscateClassName fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name.","title":"Deobfuscate class name"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-class-name/#deobfuscateclassname","text":"fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name.","title":"deobfuscateClassName"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-field-name/","text":"shark-graph / shark / ProguardMapping / deobfuscateFieldName deobfuscateFieldName fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Deobfuscate field name"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-field-name/#deobfuscatefieldname","text":"fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"deobfuscateFieldName"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/","text":"shark-graph / shark / ProguardMappingReader ProguardMappingReader class ProguardMappingReader Constructors Name Summary init ProguardMappingReader(proguardMappingInputStream: InputStream ) Functions Name Summary readProguardMapping fun readProguardMapping(): ProguardMapping","title":"Home"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/#proguardmappingreader","text":"class ProguardMappingReader","title":"ProguardMappingReader"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/#constructors","text":"Name Summary init ProguardMappingReader(proguardMappingInputStream: InputStream )","title":"Constructors"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/#functions","text":"Name Summary readProguardMapping fun readProguardMapping(): ProguardMapping","title":"Functions"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/-init-/","text":"shark-graph / shark / ProguardMappingReader / init init ProguardMappingReader(proguardMappingInputStream: InputStream )","title":" init "},{"location":"api/shark-graph/shark/-proguard-mapping-reader/-init-/#init","text":"ProguardMappingReader(proguardMappingInputStream: InputStream )","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/read-proguard-mapping/","text":"shark-graph / shark / ProguardMappingReader / readProguardMapping readProguardMapping fun readProguardMapping(): ProguardMapping","title":"Read proguard mapping"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/read-proguard-mapping/#readproguardmapping","text":"fun readProguardMapping(): ProguardMapping","title":"readProguardMapping"},{"location":"api/shark-hprof/","text":"shark-hprof Packages Name Summary shark Index All Types","title":"Home"},{"location":"api/shark-hprof/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-hprof/#index","text":"All Types","title":"Index"},{"location":"api/shark-hprof/alltypes/","text":"All Types Name Summary shark.GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. shark.Hprof An opened Hprof file which can be read via reader . Open a new hprof with open , and don t forget to call close once done. shark.HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? . shark.HprofReader Reads hprof content from an Okio BufferedSource . shark.HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. shark.HprofWriter Generates Hprof files. shark.OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . shark.PrimitiveType A primitive type in the prof. shark.ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Home"},{"location":"api/shark-hprof/alltypes/#all-types","text":"Name Summary shark.GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. shark.Hprof An opened Hprof file which can be read via reader . Open a new hprof with open , and don t forget to call close once done. shark.HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? . shark.HprofReader Reads hprof content from an Okio BufferedSource . shark.HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. shark.HprofWriter Generates Hprof files. shark.OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . shark.PrimitiveType A primitive type in the prof. shark.ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"All Types"},{"location":"api/shark-hprof/shark/","text":"shark-hprof / shark Package shark Types Name Summary GcRoot sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. Hprof class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don t forget to call close once done. HprofPrimitiveArrayStripper class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? . HprofReader class HprofReader Reads hprof content from an Okio BufferedSource . HprofRecord sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. HprofWriter class HprofWriter : Closeable Generates Hprof files. OnHprofRecordListener interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . PrimitiveType enum class PrimitiveType A primitive type in the prof. ValueHolder sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Core: Hprof"},{"location":"api/shark-hprof/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-hprof/shark/#types","text":"Name Summary GcRoot sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. Hprof class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don t forget to call close once done. HprofPrimitiveArrayStripper class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? . HprofReader class HprofReader Reads hprof content from an Okio BufferedSource . HprofRecord sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. HprofWriter class HprofWriter : Closeable Generates Hprof files. OnHprofRecordListener interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . PrimitiveType enum class PrimitiveType A primitive type in the prof. ValueHolder sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Types"},{"location":"api/shark-hprof/shark/-gc-root/","text":"shark-hprof / shark / GcRoot GcRoot sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. Types Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It s unclear what this is, documentation welcome. Properties Name Summary id abstract val id: Long The object id of the object that this gc root references. Inheritors Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It s unclear what this is, documentation welcome.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/#gcroot","text":"sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump.","title":"GcRoot"},{"location":"api/shark-hprof/shark/-gc-root/#types","text":"Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It s unclear what this is, documentation welcome.","title":"Types"},{"location":"api/shark-hprof/shark/-gc-root/#properties","text":"Name Summary id abstract val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/#inheritors","text":"Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It s unclear what this is, documentation welcome.","title":"Inheritors"},{"location":"api/shark-hprof/shark/-gc-root/id/","text":"shark-hprof / shark / GcRoot / id id abstract val id: Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/id/#id","text":"abstract val id: Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/","text":"shark-hprof / shark / GcRoot / Debugger Debugger class Debugger : GcRoot An object held by a connected debugger Constructors Name Summary init Debugger(id: Long ) An object held by a connected debugger Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#debugger","text":"class Debugger : GcRoot An object held by a connected debugger","title":"Debugger"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#constructors","text":"Name Summary init Debugger(id: Long ) An object held by a connected debugger","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/-init-/","text":"shark-hprof / shark / GcRoot / Debugger / init init Debugger(id: Long ) An object held by a connected debugger","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-debugger/-init-/#init","text":"Debugger(id: Long ) An object held by a connected debugger","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/id/","text":"shark-hprof / shark / GcRoot / Debugger / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/","text":"shark-hprof / shark / GcRoot / Finalizing Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. Constructors Name Summary init Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run. Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#finalizing","text":"class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run.","title":"Finalizing"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#constructors","text":"Name Summary init Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/-init-/","text":"shark-hprof / shark / GcRoot / Finalizing / init init Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/-init-/#init","text":"Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/id/","text":"shark-hprof / shark / GcRoot / Finalizing / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/","text":"shark-hprof / shark / GcRoot / InternedString InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . Constructors Name Summary init InternedString(id: Long ) An interned string, see java.lang.String.intern . Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#internedstring","text":"class InternedString : GcRoot An interned string, see java.lang.String.intern .","title":"InternedString"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#constructors","text":"Name Summary init InternedString(id: Long ) An interned string, see java.lang.String.intern .","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/-init-/","text":"shark-hprof / shark / GcRoot / InternedString / init init InternedString(id: Long ) An interned string, see java.lang.String.intern .","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/-init-/#init","text":"InternedString(id: Long ) An interned string, see java.lang.String.intern .","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/id/","text":"shark-hprof / shark / GcRoot / InternedString / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/","text":"shark-hprof / shark / GcRoot / JavaFrame JavaFrame class JavaFrame : GcRoot A java local variable Constructors Name Summary init JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable Properties Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#javaframe","text":"class JavaFrame : GcRoot A java local variable","title":"JavaFrame"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#constructors","text":"Name Summary init JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#properties","text":"Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/-init-/","text":"shark-hprof / shark / GcRoot / JavaFrame / init init JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/-init-/#init","text":"JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/frame-number/","text":"shark-hprof / shark / GcRoot / JavaFrame / frameNumber frameNumber val frameNumber: Int frame number in stack trace (-1 for empty)","title":"Frame number"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/frame-number/#framenumber","text":"val frameNumber: Int frame number in stack trace (-1 for empty)","title":"frameNumber"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/id/","text":"shark-hprof / shark / GcRoot / JavaFrame / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number/","text":"shark-hprof / shark / GcRoot / JavaFrame / threadSerialNumber threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/","text":"shark-hprof / shark / GcRoot / JniGlobal JniGlobal class JniGlobal : GcRoot A global variable in native code. Constructors Name Summary init JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code. Properties Name Summary id val id: Long The object id of the object that this gc root references. jniGlobalRefId val jniGlobalRefId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#jniglobal","text":"class JniGlobal : GcRoot A global variable in native code.","title":"JniGlobal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#constructors","text":"Name Summary init JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. jniGlobalRefId val jniGlobalRefId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/-init-/","text":"shark-hprof / shark / GcRoot / JniGlobal / init init JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/-init-/#init","text":"JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/id/","text":"shark-hprof / shark / GcRoot / JniGlobal / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id/","text":"shark-hprof / shark / GcRoot / JniGlobal / jniGlobalRefId jniGlobalRefId val jniGlobalRefId: Long","title":"Jni global ref id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id/#jniglobalrefid","text":"val jniGlobalRefId: Long","title":"jniGlobalRefId"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/","text":"shark-hprof / shark / GcRoot / JniLocal JniLocal class JniLocal : GcRoot A local variable in native code. Constructors Name Summary init JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code. Properties Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#jnilocal","text":"class JniLocal : GcRoot A local variable in native code.","title":"JniLocal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#constructors","text":"Name Summary init JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#properties","text":"Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/-init-/","text":"shark-hprof / shark / GcRoot / JniLocal / init init JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/-init-/#init","text":"JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/frame-number/","text":"shark-hprof / shark / GcRoot / JniLocal / frameNumber frameNumber val frameNumber: Int frame number in stack trace (-1 for empty)","title":"Frame number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/frame-number/#framenumber","text":"val frameNumber: Int frame number in stack trace (-1 for empty)","title":"frameNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/id/","text":"shark-hprof / shark / GcRoot / JniLocal / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number/","text":"shark-hprof / shark / GcRoot / JniLocal / threadSerialNumber threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/","text":"shark-hprof / shark / GcRoot / JniMonitor JniMonitor class JniMonitor : GcRoot It s unclear what this is, documentation welcome. Constructors Name Summary init JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It s unclear what this is, documentation welcome. Properties Name Summary id val id: Long The object id of the object that this gc root references. stackDepth val stackDepth: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#jnimonitor","text":"class JniMonitor : GcRoot It s unclear what this is, documentation welcome.","title":"JniMonitor"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#constructors","text":"Name Summary init JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It s unclear what this is, documentation welcome.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. stackDepth val stackDepth: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/-init-/","text":"shark-hprof / shark / GcRoot / JniMonitor / init init JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It s unclear what this is, documentation welcome.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/-init-/#init","text":"JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It s unclear what this is, documentation welcome.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/id/","text":"shark-hprof / shark / GcRoot / JniMonitor / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth/","text":"shark-hprof / shark / GcRoot / JniMonitor / stackDepth stackDepth val stackDepth: Int","title":"Stack depth"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth/#stackdepth","text":"val stackDepth: Int","title":"stackDepth"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number/","text":"shark-hprof / shark / GcRoot / JniMonitor / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/","text":"shark-hprof / shark / GcRoot / MonitorUsed MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. Constructors Name Summary init MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized. Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#monitorused","text":"class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized.","title":"MonitorUsed"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#constructors","text":"Name Summary init MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/-init-/","text":"shark-hprof / shark / GcRoot / MonitorUsed / init init MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/-init-/#init","text":"MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/id/","text":"shark-hprof / shark / GcRoot / MonitorUsed / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/","text":"shark-hprof / shark / GcRoot / NativeStack NativeStack class NativeStack : GcRoot Input or output parameters in native code Constructors Name Summary init NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code Properties Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#nativestack","text":"class NativeStack : GcRoot Input or output parameters in native code","title":"NativeStack"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#constructors","text":"Name Summary init NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/-init-/","text":"shark-hprof / shark / GcRoot / NativeStack / init init NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/-init-/#init","text":"NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/id/","text":"shark-hprof / shark / GcRoot / NativeStack / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number/","text":"shark-hprof / shark / GcRoot / NativeStack / threadSerialNumber threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/","text":"shark-hprof / shark / GcRoot / ReferenceCleanup ReferenceCleanup class ReferenceCleanup : GcRoot It s unclear what this is, documentation welcome. Constructors Name Summary init ReferenceCleanup(id: Long ) It s unclear what this is, documentation welcome. Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#referencecleanup","text":"class ReferenceCleanup : GcRoot It s unclear what this is, documentation welcome.","title":"ReferenceCleanup"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#constructors","text":"Name Summary init ReferenceCleanup(id: Long ) It s unclear what this is, documentation welcome.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/-init-/","text":"shark-hprof / shark / GcRoot / ReferenceCleanup / init init ReferenceCleanup(id: Long ) It s unclear what this is, documentation welcome.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/-init-/#init","text":"ReferenceCleanup(id: Long ) It s unclear what this is, documentation welcome.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/id/","text":"shark-hprof / shark / GcRoot / ReferenceCleanup / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/","text":"shark-hprof / shark / GcRoot / StickyClass StickyClass class StickyClass : GcRoot A system class Constructors Name Summary init StickyClass(id: Long ) A system class Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#stickyclass","text":"class StickyClass : GcRoot A system class","title":"StickyClass"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#constructors","text":"Name Summary init StickyClass(id: Long ) A system class","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/-init-/","text":"shark-hprof / shark / GcRoot / StickyClass / init init StickyClass(id: Long ) A system class","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/-init-/#init","text":"StickyClass(id: Long ) A system class","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/id/","text":"shark-hprof / shark / GcRoot / StickyClass / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/","text":"shark-hprof / shark / GcRoot / ThreadBlock ThreadBlock class ThreadBlock : GcRoot Constructors Name Summary init ThreadBlock(id: Long , threadSerialNumber: Int ) Properties Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#threadblock","text":"class ThreadBlock : GcRoot","title":"ThreadBlock"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#constructors","text":"Name Summary init ThreadBlock(id: Long , threadSerialNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/-init-/","text":"shark-hprof / shark / GcRoot / ThreadBlock / init init ThreadBlock(id: Long , threadSerialNumber: Int )","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/-init-/#init","text":"ThreadBlock(id: Long , threadSerialNumber: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/id/","text":"shark-hprof / shark / GcRoot / ThreadBlock / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number/","text":"shark-hprof / shark / GcRoot / ThreadBlock / threadSerialNumber threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/","text":"shark-hprof / shark / GcRoot / ThreadObject ThreadObject class ThreadObject : GcRoot A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c Constructors Name Summary init ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread. Properties Name Summary id val id: Long The object id of the object that this gc root references. stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#threadobject","text":"class ThreadObject : GcRoot A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c","title":"ThreadObject"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#constructors","text":"Name Summary init ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/-init-/","text":"shark-hprof / shark / GcRoot / ThreadObject / init init ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/-init-/#init","text":"ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/id/","text":"shark-hprof / shark / GcRoot / ThreadObject / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number/","text":"shark-hprof / shark / GcRoot / ThreadObject / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number/","text":"shark-hprof / shark / GcRoot / ThreadObject / threadSerialNumber threadSerialNumber val threadSerialNumber: Int","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/","text":"shark-hprof / shark / GcRoot / Unknown Unknown class Unknown : GcRoot An unknown gc root. Constructors Name Summary init Unknown(id: Long ) An unknown gc root. Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#unknown","text":"class Unknown : GcRoot An unknown gc root.","title":"Unknown"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#constructors","text":"Name Summary init Unknown(id: Long ) An unknown gc root.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/-init-/","text":"shark-hprof / shark / GcRoot / Unknown / init init Unknown(id: Long ) An unknown gc root.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-unknown/-init-/#init","text":"Unknown(id: Long ) An unknown gc root.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/id/","text":"shark-hprof / shark / GcRoot / Unknown / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/","text":"shark-hprof / shark / GcRoot / Unreachable Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. Constructors Name Summary init Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself. Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#unreachable","text":"class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself.","title":"Unreachable"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#constructors","text":"Name Summary init Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/-init-/","text":"shark-hprof / shark / GcRoot / Unreachable / init init Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/-init-/#init","text":"Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/id/","text":"shark-hprof / shark / GcRoot / Unreachable / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/","text":"shark-hprof / shark / GcRoot / VmInternal VmInternal class VmInternal : GcRoot It s unclear what this is, documentation welcome. Constructors Name Summary init VmInternal(id: Long ) It s unclear what this is, documentation welcome. Properties Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#vminternal","text":"class VmInternal : GcRoot It s unclear what this is, documentation welcome.","title":"VmInternal"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#constructors","text":"Name Summary init VmInternal(id: Long ) It s unclear what this is, documentation welcome.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/-init-/","text":"shark-hprof / shark / GcRoot / VmInternal / init init VmInternal(id: Long ) It s unclear what this is, documentation welcome.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/-init-/#init","text":"VmInternal(id: Long ) It s unclear what this is, documentation welcome.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/id/","text":"shark-hprof / shark / GcRoot / VmInternal / id id val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-hprof/","text":"shark-hprof / shark / Hprof Hprof class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don t forget to call close once done. Types Name Summary HprofVersion enum class HprofVersion Supported hprof versions Properties Name Summary fileLength val fileLength: Long Length of the hprof file, in bytes. heapDumpTimestamp val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped. hprofVersion val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped. reader val reader: HprofReader Functions Name Summary close fun close(): Unit moveReaderTo fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position . Companion Object Functions Name Summary open fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don t forget to call close once done.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof/#hprof","text":"class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don t forget to call close once done.","title":"Hprof"},{"location":"api/shark-hprof/shark/-hprof/#types","text":"Name Summary HprofVersion enum class HprofVersion Supported hprof versions","title":"Types"},{"location":"api/shark-hprof/shark/-hprof/#properties","text":"Name Summary fileLength val fileLength: Long Length of the hprof file, in bytes. heapDumpTimestamp val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped. hprofVersion val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped. reader val reader: HprofReader","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof/#functions","text":"Name Summary close fun close(): Unit moveReaderTo fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position .","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof/#companion-object-functions","text":"Name Summary open fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don t forget to call close once done.","title":"Companion Object Functions"},{"location":"api/shark-hprof/shark/-hprof/close/","text":"shark-hprof / shark / Hprof / close close fun close(): Unit","title":"Close"},{"location":"api/shark-hprof/shark/-hprof/close/#close","text":"fun close(): Unit","title":"close"},{"location":"api/shark-hprof/shark/-hprof/file-length/","text":"shark-hprof / shark / Hprof / fileLength fileLength val fileLength: Long Length of the hprof file, in bytes.","title":"File length"},{"location":"api/shark-hprof/shark/-hprof/file-length/#filelength","text":"val fileLength: Long Length of the hprof file, in bytes.","title":"fileLength"},{"location":"api/shark-hprof/shark/-hprof/heap-dump-timestamp/","text":"shark-hprof / shark / Hprof / heapDumpTimestamp heapDumpTimestamp val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped.","title":"Heap dump timestamp"},{"location":"api/shark-hprof/shark/-hprof/heap-dump-timestamp/#heapdumptimestamp","text":"val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped.","title":"heapDumpTimestamp"},{"location":"api/shark-hprof/shark/-hprof/hprof-version/","text":"shark-hprof / shark / Hprof / hprofVersion hprofVersion val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped.","title":"Hprof version"},{"location":"api/shark-hprof/shark/-hprof/hprof-version/#hprofversion","text":"val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped.","title":"hprofVersion"},{"location":"api/shark-hprof/shark/-hprof/move-reader-to/","text":"shark-hprof / shark / Hprof / moveReaderTo moveReaderTo fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position .","title":"Move reader to"},{"location":"api/shark-hprof/shark/-hprof/move-reader-to/#movereaderto","text":"fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position .","title":"moveReaderTo"},{"location":"api/shark-hprof/shark/-hprof/open/","text":"shark-hprof / shark / Hprof / open open fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don t forget to call close once done.","title":"Open"},{"location":"api/shark-hprof/shark/-hprof/open/#open","text":"fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don t forget to call close once done.","title":"open"},{"location":"api/shark-hprof/shark/-hprof/reader/","text":"shark-hprof / shark / Hprof / reader reader val reader: HprofReader","title":"Reader"},{"location":"api/shark-hprof/shark/-hprof/reader/#reader","text":"val reader: HprofReader","title":"reader"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/","text":"shark-hprof / shark / Hprof / HprofVersion HprofVersion enum class HprofVersion Supported hprof versions Enum Values Name Summary JDK1_2_BETA3 JDK1_2_BETA4 JDK_6 ANDROID Properties Name Summary versionString val versionString: String","title":"Home"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/#hprofversion","text":"enum class HprofVersion Supported hprof versions","title":"HprofVersion"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/#enum-values","text":"Name Summary JDK1_2_BETA3 JDK1_2_BETA4 JDK_6 ANDROID","title":"Enum Values"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/#properties","text":"Name Summary versionString val versionString: String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d/","text":"shark-hprof / shark / Hprof / HprofVersion / ANDROID ANDROID ANDROID Inherited Properties Name Summary versionString val versionString: String","title":" a n d r o i d"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d/#android","text":"ANDROID","title":"ANDROID"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3/","text":"shark-hprof / shark / Hprof / HprofVersion / JDK1_2_BETA3 JDK1_2_BETA3 JDK1_2_BETA3 Inherited Properties Name Summary versionString val versionString: String","title":" j d k1 2  b e t a3"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3/#jdk1_2_beta3","text":"JDK1_2_BETA3","title":"JDK1_2_BETA3"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4/","text":"shark-hprof / shark / Hprof / HprofVersion / JDK1_2_BETA4 JDK1_2_BETA4 JDK1_2_BETA4 Inherited Properties Name Summary versionString val versionString: String","title":" j d k1 2  b e t a4"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4/#jdk1_2_beta4","text":"JDK1_2_BETA4","title":"JDK1_2_BETA4"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6/","text":"shark-hprof / shark / Hprof / HprofVersion / JDK_6 JDK_6 JDK_6 Inherited Properties Name Summary versionString val versionString: String","title":" j d k 6"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6/#jdk_6","text":"JDK_6","title":"JDK_6"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/version-string/","text":"shark-hprof / shark / Hprof / HprofVersion / versionString versionString val versionString: String","title":"Version string"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/version-string/#versionstring","text":"val versionString: String","title":"versionString"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/","text":"shark-hprof / shark / HprofPrimitiveArrayStripper HprofPrimitiveArrayStripper class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? . Constructors Name Summary init HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? . Functions Name Summary stripPrimitiveArrays fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File ` = File( inputHprofFile.parent, inputHprofFile.name.replace( .hprof , -stripped.hprof ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + -stripped })): [ File`]( https://docs.oracle.com/javase/6/docs/api/java/io/File.html )","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#hprofprimitivearraystripper","text":"class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? .","title":"HprofPrimitiveArrayStripper"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#constructors","text":"Name Summary init HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? .","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#functions","text":"Name Summary stripPrimitiveArrays fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File ` = File( inputHprofFile.parent, inputHprofFile.name.replace( .hprof , -stripped.hprof ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + -stripped })): [ File`]( https://docs.oracle.com/javase/6/docs/api/java/io/File.html )","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/-init-/","text":"shark-hprof / shark / HprofPrimitiveArrayStripper / init init HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? .","title":" init "},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/-init-/#init","text":"HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of ? .","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays/","text":"shark-hprof / shark / HprofPrimitiveArrayStripper / stripPrimitiveArrays stripPrimitiveArrays fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \".hprof\", \"-stripped.hprof\" ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \"-stripped\" })): File See Also HprofPrimitiveArrayStripper","title":"Strip primitive arrays"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays/#stripprimitivearrays","text":"fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \".hprof\", \"-stripped.hprof\" ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \"-stripped\" })): File See Also HprofPrimitiveArrayStripper","title":"stripPrimitiveArrays"},{"location":"api/shark-hprof/shark/-hprof-reader/","text":"shark-hprof / shark / HprofReader HprofReader class HprofReader Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib Constructors Name Summary init HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource . Properties Name Summary identifierByteSize val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be. position var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets. startPosition val startPosition: Long How many bytes have already been read from source when this HprofReader is created. Functions Name Summary readClassDumpRecord fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag. readClassSkipContentRecord fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content. readHprofRecords fun readHprofRecords(recordTypes: Set KClass out HprofRecord , listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records. readInstanceDumpRecord fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag. readInstanceSkipContentRecord fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content. readObjectArrayDumpRecord fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag. readObjectArraySkipContentRecord fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content. readPrimitiveArrayDumpRecord fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag. readPrimitiveArraySkipContentRecord fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content. readValue fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-reader/#hprofreader","text":"class HprofReader Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib","title":"HprofReader"},{"location":"api/shark-hprof/shark/-hprof-reader/#constructors","text":"Name Summary init HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource .","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-reader/#properties","text":"Name Summary identifierByteSize val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be. position var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets. startPosition val startPosition: Long How many bytes have already been read from source when this HprofReader is created.","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-reader/#functions","text":"Name Summary readClassDumpRecord fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag. readClassSkipContentRecord fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content. readHprofRecords fun readHprofRecords(recordTypes: Set KClass out HprofRecord , listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records. readInstanceDumpRecord fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag. readInstanceSkipContentRecord fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content. readObjectArrayDumpRecord fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag. readObjectArraySkipContentRecord fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content. readPrimitiveArrayDumpRecord fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag. readPrimitiveArraySkipContentRecord fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content. readValue fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-reader/-init-/","text":"shark-hprof / shark / HprofReader / init init HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib","title":" init "},{"location":"api/shark-hprof/shark/-hprof-reader/-init-/#init","text":"HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-reader/identifier-byte-size/","text":"shark-hprof / shark / HprofReader / identifierByteSize identifierByteSize val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be.","title":"Identifier byte size"},{"location":"api/shark-hprof/shark/-hprof-reader/identifier-byte-size/#identifierbytesize","text":"val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be.","title":"identifierByteSize"},{"location":"api/shark-hprof/shark/-hprof-reader/position/","text":"shark-hprof / shark / HprofReader / position position var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets.","title":"Position"},{"location":"api/shark-hprof/shark/-hprof-reader/position/#position","text":"var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets.","title":"position"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-dump-record/","text":"shark-hprof / shark / HprofReader / readClassDumpRecord readClassDumpRecord fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag.","title":"Read class dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-dump-record/#readclassdumprecord","text":"fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag.","title":"readClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-skip-content-record/","text":"shark-hprof / shark / HprofReader / readClassSkipContentRecord readClassSkipContentRecord fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content.","title":"Read class skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-skip-content-record/#readclassskipcontentrecord","text":"fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content.","title":"readClassSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-hprof-records/","text":"shark-hprof / shark / HprofReader / readHprofRecords readHprofRecords fun readHprofRecords(recordTypes: Set KClass out HprofRecord , listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records.","title":"Read hprof records"},{"location":"api/shark-hprof/shark/-hprof-reader/read-hprof-records/#readhprofrecords","text":"fun readHprofRecords(recordTypes: Set KClass out HprofRecord , listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records.","title":"readHprofRecords"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-dump-record/","text":"shark-hprof / shark / HprofReader / readInstanceDumpRecord readInstanceDumpRecord fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag.","title":"Read instance dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-dump-record/#readinstancedumprecord","text":"fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag.","title":"readInstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-skip-content-record/","text":"shark-hprof / shark / HprofReader / readInstanceSkipContentRecord readInstanceSkipContentRecord fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content.","title":"Read instance skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-skip-content-record/#readinstanceskipcontentrecord","text":"fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content.","title":"readInstanceSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-dump-record/","text":"shark-hprof / shark / HprofReader / readObjectArrayDumpRecord readObjectArrayDumpRecord fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag.","title":"Read object array dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-dump-record/#readobjectarraydumprecord","text":"fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag.","title":"readObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-skip-content-record/","text":"shark-hprof / shark / HprofReader / readObjectArraySkipContentRecord readObjectArraySkipContentRecord fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content.","title":"Read object array skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-skip-content-record/#readobjectarrayskipcontentrecord","text":"fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content.","title":"readObjectArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-dump-record/","text":"shark-hprof / shark / HprofReader / readPrimitiveArrayDumpRecord readPrimitiveArrayDumpRecord fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag.","title":"Read primitive array dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-dump-record/#readprimitivearraydumprecord","text":"fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag.","title":"readPrimitiveArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-skip-content-record/","text":"shark-hprof / shark / HprofReader / readPrimitiveArraySkipContentRecord readPrimitiveArraySkipContentRecord fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content.","title":"Read primitive array skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-skip-content-record/#readprimitivearrayskipcontentrecord","text":"fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content.","title":"readPrimitiveArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-value/","text":"shark-hprof / shark / HprofReader / readValue readValue fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"Read value"},{"location":"api/shark-hprof/shark/-hprof-reader/read-value/#readvalue","text":"fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"readValue"},{"location":"api/shark-hprof/shark/-hprof-reader/start-position/","text":"shark-hprof / shark / HprofReader / startPosition startPosition val startPosition: Long How many bytes have already been read from source when this HprofReader is created.","title":"Start position"},{"location":"api/shark-hprof/shark/-hprof-reader/start-position/#startposition","text":"val startPosition: Long How many bytes have already been read from source when this HprofReader is created.","title":"startPosition"},{"location":"api/shark-hprof/shark/-hprof-record/","text":"shark-hprof / shark / HprofRecord HprofRecord sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. Types Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord Inheritors Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/#hprofrecord","text":"sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files.","title":"HprofRecord"},{"location":"api/shark-hprof/shark/-hprof-record/#types","text":"Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/#inheritors","text":"Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-end-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpEndRecord HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump.","title":" heap dump end record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-end-record/#heapdumpendrecord","text":"object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump.","title":"HeapDumpEndRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord HeapDumpRecord sealed class HeapDumpRecord : HprofRecord Types Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord Inheritors Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#heapdumprecord","text":"sealed class HeapDumpRecord : HprofRecord","title":"HeapDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#types","text":"Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#inheritors","text":"Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord Constructors Name Summary init GcRootRecord(gcRoot: GcRoot ) Properties Name Summary gcRoot val gcRoot: GcRoot","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#gcrootrecord","text":"class GcRootRecord : HprofRecord.HeapDumpRecord","title":"GcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#constructors","text":"Name Summary init GcRootRecord(gcRoot: GcRoot )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#properties","text":"Name Summary gcRoot val gcRoot: GcRoot","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord / init init GcRootRecord(gcRoot: GcRoot )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-init-/#init","text":"GcRootRecord(gcRoot: GcRoot )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord / gcRoot gcRoot val gcRoot: GcRoot","title":"Gc root"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root/#gcroot","text":"val gcRoot: GcRoot","title":"gcRoot"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord Constructors Name Summary init HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long ) Properties Name Summary heapId val heapId: Int heapNameStringId val heapNameStringId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#heapdumpinforecord","text":"class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord","title":"HeapDumpInfoRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#constructors","text":"Name Summary init HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#properties","text":"Name Summary heapId val heapId: Int heapNameStringId val heapNameStringId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / init init HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-init-/#init","text":"HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / heapId heapId val heapId: Int","title":"Heap id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id/#heapid","text":"val heapId: Int","title":"heapId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / heapNameStringId heapNameStringId val heapNameStringId: Long","title":"Heap name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id/#heapnamestringid","text":"val heapNameStringId: Long","title":"heapNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord Types Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content. Inheritors Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#objectrecord","text":"sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"ObjectRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#types","text":"Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content.","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#inheritors","text":"Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content.","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Types Name Summary FieldRecord data class FieldRecord StaticFieldRecord data class StaticFieldRecord Constructors Name Summary init ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord , fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord ) Properties Name Summary classLoaderId val classLoaderId: Long fields val fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFields val staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord superclassId val superclassId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#classdumprecord","text":"class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"ClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#types","text":"Name Summary FieldRecord data class FieldRecord StaticFieldRecord data class StaticFieldRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#constructors","text":"Name Summary init ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord , fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#properties","text":"Name Summary classLoaderId val classLoaderId: Long fields val fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFields val staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord superclassId val superclassId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / init init ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord , fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-init-/#init","text":"ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord , fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / classLoaderId classLoaderId val classLoaderId: Long","title":"Class loader id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id/#classloaderid","text":"val classLoaderId: Long","title":"classLoaderId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / fields fields val fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord","title":"Fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields/#fields","text":"val fields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord","title":"fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / instanceSize instanceSize val instanceSize: Int","title":"Instance size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size/#instancesize","text":"val instanceSize: Int","title":"instanceSize"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / protectionDomainId protectionDomainId val protectionDomainId: Long","title":"Protection domain id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id/#protectiondomainid","text":"val protectionDomainId: Long","title":"protectionDomainId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / signersId signersId val signersId: Long","title":"Signers id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id/#signersid","text":"val signersId: Long","title":"signersId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / staticFields staticFields val staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord","title":"Static fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields/#staticfields","text":"val staticFields: List HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord","title":"staticFields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / superclassId superclassId val superclassId: Long","title":"Superclass id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id/#superclassid","text":"val superclassId: Long","title":"superclassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord FieldRecord data class FieldRecord Constructors Name Summary init FieldRecord(nameStringId: Long , type: Int ) Properties Name Summary nameStringId val nameStringId: Long type val type: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#fieldrecord","text":"data class FieldRecord","title":"FieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#constructors","text":"Name Summary init FieldRecord(nameStringId: Long , type: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#properties","text":"Name Summary nameStringId val nameStringId: Long type val type: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / init init FieldRecord(nameStringId: Long , type: Int )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-init-/#init","text":"FieldRecord(nameStringId: Long , type: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / nameStringId nameStringId val nameStringId: Long","title":"Name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id/#namestringid","text":"val nameStringId: Long","title":"nameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / type type val type: Int","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type/#type","text":"val type: Int","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord StaticFieldRecord data class StaticFieldRecord Constructors Name Summary init StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder ) Properties Name Summary nameStringId val nameStringId: Long type val type: Int value val value: ValueHolder","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#staticfieldrecord","text":"data class StaticFieldRecord","title":"StaticFieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#constructors","text":"Name Summary init StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#properties","text":"Name Summary nameStringId val nameStringId: Long type val type: Int value val value: ValueHolder","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / init init StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-init-/#init","text":"StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / nameStringId nameStringId val nameStringId: Long","title":"Name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id/#namestringid","text":"val nameStringId: Long","title":"nameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / type type val type: Int","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type/#type","text":"val type: Int","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / value value val value: ValueHolder","title":"Value"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value/#value","text":"val value: ValueHolder","title":"value"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content. Constructors Name Summary init ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content. Properties Name Summary classLoaderId val classLoaderId: Long fieldCount val fieldCount: Int id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFieldCount val staticFieldCount: Int superclassId val superclassId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/#classskipcontentrecord","text":"class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content.","title":"ClassSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/#constructors","text":"Name Summary init ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/#properties","text":"Name Summary classLoaderId val classLoaderId: Long fieldCount val fieldCount: Int id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFieldCount val staticFieldCount: Int superclassId val superclassId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / init init ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/-init-/#init","text":"ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ClassDumpRecord for when you don t need the class content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/class-loader-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / classLoaderId classLoaderId val classLoaderId: Long","title":"Class loader id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/class-loader-id/#classloaderid","text":"val classLoaderId: Long","title":"classLoaderId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/field-count/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / fieldCount fieldCount val fieldCount: Int","title":"Field count"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/field-count/#fieldcount","text":"val fieldCount: Int","title":"fieldCount"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/instance-size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / instanceSize instanceSize val instanceSize: Int","title":"Instance size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/instance-size/#instancesize","text":"val instanceSize: Int","title":"instanceSize"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/protection-domain-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / protectionDomainId protectionDomainId val protectionDomainId: Long","title":"Protection domain id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/protection-domain-id/#protectiondomainid","text":"val protectionDomainId: Long","title":"protectionDomainId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/signers-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / signersId signersId val signersId: Long","title":"Signers id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/signers-id/#signersid","text":"val signersId: Long","title":"signersId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/static-field-count/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / staticFieldCount staticFieldCount val staticFieldCount: Int","title":"Static field count"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/static-field-count/#staticfieldcount","text":"val staticFieldCount: Int","title":"staticFieldCount"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/superclass-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / superclassId superclassId val superclassId: Long","title":"Superclass id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/superclass-id/#superclassid","text":"val superclassId: Long","title":"superclassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Constructors Name Summary init InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray ) Properties Name Summary classId val classId: Long fieldValues val fieldValues: ByteArray Instance field values (this class, followed by super class, etc) id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#instancedumprecord","text":"class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"InstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#constructors","text":"Name Summary init InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#properties","text":"Name Summary classId val classId: Long fieldValues val fieldValues: ByteArray Instance field values (this class, followed by super class, etc) id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / init init InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-init-/#init","text":"InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / classId classId val classId: Long","title":"Class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id/#classid","text":"val classId: Long","title":"classId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / fieldValues fieldValues val fieldValues: ByteArray Instance field values (this class, followed by super class, etc)","title":"Field values"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values/#fieldvalues","text":"val fieldValues: ByteArray Instance field values (this class, followed by super class, etc)","title":"fieldValues"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content. Constructors Name Summary init InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content. Properties Name Summary classId val classId: Long id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/#instanceskipcontentrecord","text":"class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content.","title":"InstanceSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/#constructors","text":"Name Summary init InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/#properties","text":"Name Summary classId val classId: Long id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / init init InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/-init-/#init","text":"InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn t a real record type as found in the heap dump. It s an alternative to InstanceDumpRecord for when you don t need the instance content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / classId classId val classId: Long","title":"Class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/class-id/#classid","text":"val classId: Long","title":"classId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Constructors Name Summary init ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray ) Properties Name Summary arrayClassId val arrayClassId: Long elementIds val elementIds: LongArray id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#objectarraydumprecord","text":"class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"ObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#constructors","text":"Name Summary init ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#properties","text":"Name Summary arrayClassId val arrayClassId: Long elementIds val elementIds: LongArray id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / init init ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-init-/#init","text":"ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / arrayClassId arrayClassId val arrayClassId: Long","title":"Array class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id/#arrayclassid","text":"val arrayClassId: Long","title":"arrayClassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / elementIds elementIds val elementIds: LongArray","title":"Element ids"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids/#elementids","text":"val elementIds: LongArray","title":"elementIds"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content. Constructors Name Summary init ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content. Properties Name Summary arrayClassId val arrayClassId: Long id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/#objectarrayskipcontentrecord","text":"class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content.","title":"ObjectArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/#constructors","text":"Name Summary init ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/#properties","text":"Name Summary arrayClassId val arrayClassId: Long id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / init init ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/-init-/#init","text":"ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn t a real record type as found in the heap dump. It s an alternative to ObjectArrayDumpRecord for when you don t need the array content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/array-class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / arrayClassId arrayClassId val arrayClassId: Long","title":"Array class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/array-class-id/#arrayclassid","text":"val arrayClassId: Long","title":"arrayClassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / size size val size: Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/size/#size","text":"val size: Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Types Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties Name Summary id abstract val id: Long size abstract val size: Int stackTraceSerialNumber abstract val stackTraceSerialNumber: Int Inheritors Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#primitivearraydumprecord","text":"sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"PrimitiveArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#types","text":"Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#properties","text":"Name Summary id abstract val id: Long size abstract val size: Int stackTraceSerialNumber abstract val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#inheritors","text":"Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / id id abstract val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id/#id","text":"abstract val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / size size abstract val size: Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size/#size","text":"abstract val size: Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / stackTraceSerialNumber stackTraceSerialNumber abstract val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"abstract val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray ) Properties Name Summary array val array: BooleanArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#booleanarraydump","text":"class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"BooleanArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#constructors","text":"Name Summary init BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#properties","text":"Name Summary array val array: BooleanArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / init init BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-init-/#init","text":"BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / array array val array: BooleanArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array/#array","text":"val array: BooleanArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray ) Properties Name Summary array val array: ByteArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#bytearraydump","text":"class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"ByteArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#constructors","text":"Name Summary init ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#properties","text":"Name Summary array val array: ByteArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / init init ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-init-/#init","text":"ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / array array val array: ByteArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array/#array","text":"val array: ByteArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray ) Properties Name Summary array val array: CharArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#chararraydump","text":"class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"CharArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#constructors","text":"Name Summary init CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#properties","text":"Name Summary array val array: CharArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / init init CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-init-/#init","text":"CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / array array val array: CharArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array/#array","text":"val array: CharArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray ) Properties Name Summary array val array: DoubleArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#doublearraydump","text":"class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"DoubleArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#constructors","text":"Name Summary init DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#properties","text":"Name Summary array val array: DoubleArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / init init DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-init-/#init","text":"DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / array array val array: DoubleArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array/#array","text":"val array: DoubleArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray ) Properties Name Summary array val array: FloatArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#floatarraydump","text":"class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"FloatArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#constructors","text":"Name Summary init FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#properties","text":"Name Summary array val array: FloatArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / init init FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-init-/#init","text":"FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / array array val array: FloatArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array/#array","text":"val array: FloatArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray ) Properties Name Summary array val array: IntArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#intarraydump","text":"class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"IntArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#constructors","text":"Name Summary init IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#properties","text":"Name Summary array val array: IntArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / init init IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-init-/#init","text":"IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / array array val array: IntArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array/#array","text":"val array: IntArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray ) Properties Name Summary array val array: LongArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#longarraydump","text":"class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"LongArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#constructors","text":"Name Summary init LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#properties","text":"Name Summary array val array: LongArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / init init LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-init-/#init","text":"LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / array array val array: LongArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array/#array","text":"val array: LongArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors Name Summary init ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray ) Properties Name Summary array val array: ShortArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#shortarraydump","text":"class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"ShortArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#constructors","text":"Name Summary init ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#properties","text":"Name Summary array val array: ShortArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / init init ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-init-/#init","text":"ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / array array val array: ShortArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array/#array","text":"val array: ShortArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / id id val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / size size val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content. Constructors Name Summary init PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content. Properties Name Summary id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int type val type: PrimitiveType","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/#primitivearrayskipcontentrecord","text":"class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content.","title":"PrimitiveArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/#constructors","text":"Name Summary init PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/#properties","text":"Name Summary id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int type val type: PrimitiveType","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / init init PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/-init-/#init","text":"PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn t a real record type as found in the heap dump. It s an alternative to PrimitiveArrayDumpRecord for when you don t need the array content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / size size val size: Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/size/#size","text":"val size: Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/type/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / type type val type: PrimitiveType","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/type/#type","text":"val type: PrimitiveType","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord LoadClassRecord class LoadClassRecord : HprofRecord Constructors Name Summary init LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long ) Properties Name Summary classNameStringId val classNameStringId: Long classSerialNumber val classSerialNumber: Int id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#loadclassrecord","text":"class LoadClassRecord : HprofRecord","title":"LoadClassRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#constructors","text":"Name Summary init LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#properties","text":"Name Summary classNameStringId val classNameStringId: Long classSerialNumber val classSerialNumber: Int id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/-init-/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / init init LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/-init-/#init","text":"LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / classNameStringId classNameStringId val classNameStringId: Long","title":"Class name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id/#classnamestringid","text":"val classNameStringId: Long","title":"classNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / classSerialNumber classSerialNumber val classSerialNumber: Int","title":"Class serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number/#classserialnumber","text":"val classSerialNumber: Int","title":"classSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/id/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord StackFrameRecord class StackFrameRecord : HprofRecord Constructors Name Summary init StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int ) Properties Name Summary classSerialNumber val classSerialNumber: Int id val id: Long lineNumber val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented) methodNameStringId val methodNameStringId: Long methodSignatureStringId val methodSignatureStringId: Long sourceFileNameStringId val sourceFileNameStringId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#stackframerecord","text":"class StackFrameRecord : HprofRecord","title":"StackFrameRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#constructors","text":"Name Summary init StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#properties","text":"Name Summary classSerialNumber val classSerialNumber: Int id val id: Long lineNumber val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented) methodNameStringId val methodNameStringId: Long methodSignatureStringId val methodSignatureStringId: Long sourceFileNameStringId val sourceFileNameStringId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/-init-/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / init init StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/-init-/#init","text":"StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / classSerialNumber classSerialNumber val classSerialNumber: Int","title":"Class serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number/#classserialnumber","text":"val classSerialNumber: Int","title":"classSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / lineNumber lineNumber val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented)","title":"Line number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number/#linenumber","text":"val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented)","title":"lineNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / methodNameStringId methodNameStringId val methodNameStringId: Long","title":"Method name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id/#methodnamestringid","text":"val methodNameStringId: Long","title":"methodNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / methodSignatureStringId methodSignatureStringId val methodSignatureStringId: Long","title":"Method signature string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id/#methodsignaturestringid","text":"val methodSignatureStringId: Long","title":"methodSignatureStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / sourceFileNameStringId sourceFileNameStringId val sourceFileNameStringId: Long","title":"Source file name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id/#sourcefilenamestringid","text":"val sourceFileNameStringId: Long","title":"sourceFileNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord StackTraceRecord class StackTraceRecord : HprofRecord Constructors Name Summary init StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray ) Properties Name Summary stackFrameIds val stackFrameIds: LongArray stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#stacktracerecord","text":"class StackTraceRecord : HprofRecord","title":"StackTraceRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#constructors","text":"Name Summary init StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#properties","text":"Name Summary stackFrameIds val stackFrameIds: LongArray stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/-init-/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / init init StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/-init-/#init","text":"StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / stackFrameIds stackFrameIds val stackFrameIds: LongArray","title":"Stack frame ids"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids/#stackframeids","text":"val stackFrameIds: LongArray","title":"stackFrameIds"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / stackTraceSerialNumber stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / threadSerialNumber threadSerialNumber val threadSerialNumber: Int","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/","text":"shark-hprof / shark / HprofRecord / StringRecord StringRecord class StringRecord : HprofRecord Constructors Name Summary init StringRecord(id: Long , string: String ) Properties Name Summary id val id: Long string val string: String","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#stringrecord","text":"class StringRecord : HprofRecord","title":"StringRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#constructors","text":"Name Summary init StringRecord(id: Long , string: String )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#properties","text":"Name Summary id val id: Long string val string: String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/-init-/","text":"shark-hprof / shark / HprofRecord / StringRecord / init init StringRecord(id: Long , string: String )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/-init-/#init","text":"StringRecord(id: Long , string: String )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/id/","text":"shark-hprof / shark / HprofRecord / StringRecord / id id val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/string/","text":"shark-hprof / shark / HprofRecord / StringRecord / string string val string: String","title":"String"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/string/#string","text":"val string: String","title":"string"},{"location":"api/shark-hprof/shark/-hprof-writer/","text":"shark-hprof / shark / HprofWriter HprofWriter class HprofWriter : Closeable Generates Hprof files. Call open to create an instance, write to add instances and close when you re done. Properties Name Summary hprofVersion val hprofVersion: Hprof.HprofVersion identifierByteSize val identifierByteSize: Int Functions Name Summary close fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file. valuesToBytes fun valuesToBytes(values: List ValueHolder ): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder . write fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called. Companion Object Functions Name Summary open fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don t forget to call close once done.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-writer/#hprofwriter","text":"class HprofWriter : Closeable Generates Hprof files. Call open to create an instance, write to add instances and close when you re done.","title":"HprofWriter"},{"location":"api/shark-hprof/shark/-hprof-writer/#properties","text":"Name Summary hprofVersion val hprofVersion: Hprof.HprofVersion identifierByteSize val identifierByteSize: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-writer/#functions","text":"Name Summary close fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file. valuesToBytes fun valuesToBytes(values: List ValueHolder ): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder . write fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-writer/#companion-object-functions","text":"Name Summary open fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don t forget to call close once done.","title":"Companion Object Functions"},{"location":"api/shark-hprof/shark/-hprof-writer/close/","text":"shark-hprof / shark / HprofWriter / close close fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file.","title":"Close"},{"location":"api/shark-hprof/shark/-hprof-writer/close/#close","text":"fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file.","title":"close"},{"location":"api/shark-hprof/shark/-hprof-writer/hprof-version/","text":"shark-hprof / shark / HprofWriter / hprofVersion hprofVersion val hprofVersion: Hprof.HprofVersion","title":"Hprof version"},{"location":"api/shark-hprof/shark/-hprof-writer/hprof-version/#hprofversion","text":"val hprofVersion: Hprof.HprofVersion","title":"hprofVersion"},{"location":"api/shark-hprof/shark/-hprof-writer/identifier-byte-size/","text":"shark-hprof / shark / HprofWriter / identifierByteSize identifierByteSize val identifierByteSize: Int","title":"Identifier byte size"},{"location":"api/shark-hprof/shark/-hprof-writer/identifier-byte-size/#identifierbytesize","text":"val identifierByteSize: Int","title":"identifierByteSize"},{"location":"api/shark-hprof/shark/-hprof-writer/open/","text":"shark-hprof / shark / HprofWriter / open open fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don t forget to call close once done.","title":"Open"},{"location":"api/shark-hprof/shark/-hprof-writer/open/#open","text":"fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don t forget to call close once done.","title":"open"},{"location":"api/shark-hprof/shark/-hprof-writer/values-to-bytes/","text":"shark-hprof / shark / HprofWriter / valuesToBytes valuesToBytes fun valuesToBytes(values: List ValueHolder ): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder .","title":"Values to bytes"},{"location":"api/shark-hprof/shark/-hprof-writer/values-to-bytes/#valuestobytes","text":"fun valuesToBytes(values: List ValueHolder ): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder .","title":"valuesToBytes"},{"location":"api/shark-hprof/shark/-hprof-writer/write/","text":"shark-hprof / shark / HprofWriter / write write fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"Write"},{"location":"api/shark-hprof/shark/-hprof-writer/write/#write","text":"fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"write"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/","text":"shark-hprof / shark / OnHprofRecordListener OnHprofRecordListener interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . Functions Name Summary onHprofRecord abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit Companion Object Functions Name Summary invoke operator fun invoke(block: ( Long , HprofRecord ) - Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax.","title":"Home"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#onhprofrecordlistener","text":"interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords .","title":"OnHprofRecordListener"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#functions","text":"Name Summary onHprofRecord abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit","title":"Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: ( Long , HprofRecord ) - Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax.","title":"Companion Object Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/invoke/","text":"shark-hprof / shark / OnHprofRecordListener / invoke invoke inline operator fun invoke(crossinline block: ( Long , HprofRecord ) - Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax. Usage: val listener = OnHprofRecordListener { position , record - }","title":"Invoke"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: ( Long , HprofRecord ) - Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax. Usage: val listener = OnHprofRecordListener { position , record - }","title":"invoke"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record/","text":"shark-hprof / shark / OnHprofRecordListener / onHprofRecord onHprofRecord abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit","title":"On hprof record"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record/#onhprofrecord","text":"abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit","title":"onHprofRecord"},{"location":"api/shark-hprof/shark/-primitive-type/","text":"shark-hprof / shark / PrimitiveType PrimitiveType enum class PrimitiveType A primitive type in the prof. Enum Values Name Summary BOOLEAN CHAR FLOAT DOUBLE BYTE SHORT INT LONG Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type . Companion Object Properties Name Summary byteSizeByHprofType val byteSizeByHprofType: Map Int , Int primitiveTypeByHprofType val primitiveTypeByHprofType: Map Int , PrimitiveType REFERENCE_HPROF_TYPE const val REFERENCE_HPROF_TYPE: Int The hprof defined basic type for references.","title":"Home"},{"location":"api/shark-hprof/shark/-primitive-type/#primitivetype","text":"enum class PrimitiveType A primitive type in the prof.","title":"PrimitiveType"},{"location":"api/shark-hprof/shark/-primitive-type/#enum-values","text":"Name Summary BOOLEAN CHAR FLOAT DOUBLE BYTE SHORT INT LONG","title":"Enum Values"},{"location":"api/shark-hprof/shark/-primitive-type/#properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/#companion-object-properties","text":"Name Summary byteSizeByHprofType val byteSizeByHprofType: Map Int , Int primitiveTypeByHprofType val primitiveTypeByHprofType: Map Int , PrimitiveType REFERENCE_HPROF_TYPE const val REFERENCE_HPROF_TYPE: Int The hprof defined basic type for references.","title":"Companion Object Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/","text":"shark-hprof / shark / PrimitiveType / BOOLEAN BOOLEAN BOOLEAN Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" b o o l e a n"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/#boolean","text":"BOOLEAN","title":"BOOLEAN"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/","text":"shark-hprof / shark / PrimitiveType / BYTE BYTE BYTE Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" b y t e"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/#byte","text":"BYTE","title":"BYTE"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/","text":"shark-hprof / shark / PrimitiveType / CHAR CHAR CHAR Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" c h a r"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/#char","text":"CHAR","title":"CHAR"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/","text":"shark-hprof / shark / PrimitiveType / DOUBLE DOUBLE DOUBLE Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" d o u b l e"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/#double","text":"DOUBLE","title":"DOUBLE"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/","text":"shark-hprof / shark / PrimitiveType / FLOAT FLOAT FLOAT Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" f l o a t"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/#float","text":"FLOAT","title":"FLOAT"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/","text":"shark-hprof / shark / PrimitiveType / INT INT INT Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" i n t"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/#int","text":"INT","title":"INT"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/","text":"shark-hprof / shark / PrimitiveType / LONG LONG LONG Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" l o n g"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/#long","text":"LONG","title":"LONG"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e/","text":"shark-hprof / shark / PrimitiveType / REFERENCE_HPROF_TYPE REFERENCE_HPROF_TYPE const val REFERENCE_HPROF_TYPE: Int The hprof defined basic type for references.","title":" r e f e r e n c e  h p r o f  t y p e"},{"location":"api/shark-hprof/shark/-primitive-type/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e/#reference_hprof_type","text":"const val REFERENCE_HPROF_TYPE: Int The hprof defined basic type for references.","title":"REFERENCE_HPROF_TYPE"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/","text":"shark-hprof / shark / PrimitiveType / SHORT SHORT SHORT Inherited Properties Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":" s h o r t"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/#short","text":"SHORT","title":"SHORT"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined basic type .","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size-by-hprof-type/","text":"shark-hprof / shark / PrimitiveType / byteSizeByHprofType byteSizeByHprofType val byteSizeByHprofType: Map Int , Int","title":"Byte size by hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size-by-hprof-type/#bytesizebyhproftype","text":"val byteSizeByHprofType: Map Int , Int","title":"byteSizeByHprofType"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size/","text":"shark-hprof / shark / PrimitiveType / byteSize byteSize val byteSize: Int The size in bytes for each value of that type.","title":"Byte size"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size/#bytesize","text":"val byteSize: Int The size in bytes for each value of that type.","title":"byteSize"},{"location":"api/shark-hprof/shark/-primitive-type/hprof-type/","text":"shark-hprof / shark / PrimitiveType / hprofType hprofType val hprofType: Int The hprof defined basic type .","title":"Hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/hprof-type/#hproftype","text":"val hprofType: Int The hprof defined basic type .","title":"hprofType"},{"location":"api/shark-hprof/shark/-primitive-type/primitive-type-by-hprof-type/","text":"shark-hprof / shark / PrimitiveType / primitiveTypeByHprofType primitiveTypeByHprofType val primitiveTypeByHprofType: Map Int , PrimitiveType","title":"Primitive type by hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/primitive-type-by-hprof-type/#primitivetypebyhproftype","text":"val primitiveTypeByHprofType: Map Int , PrimitiveType","title":"primitiveTypeByHprofType"},{"location":"api/shark-hprof/shark/-value-holder/","text":"shark-hprof / shark / ValueHolder ValueHolder sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type. Types Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder Companion Object Properties Name Summary NULL_REFERENCE const val NULL_REFERENCE: Long Inheritors Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/#valueholder","text":"sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"ValueHolder"},{"location":"api/shark-hprof/shark/-value-holder/#types","text":"Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder","title":"Types"},{"location":"api/shark-hprof/shark/-value-holder/#companion-object-properties","text":"Name Summary NULL_REFERENCE const val NULL_REFERENCE: Long","title":"Companion Object Properties"},{"location":"api/shark-hprof/shark/-value-holder/#inheritors","text":"Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder","title":"Inheritors"},{"location":"api/shark-hprof/shark/-value-holder/-n-u-l-l_-r-e-f-e-r-e-n-c-e/","text":"shark-hprof / shark / ValueHolder / NULL_REFERENCE NULL_REFERENCE const val NULL_REFERENCE: Long","title":" n u l l  r e f e r e n c e"},{"location":"api/shark-hprof/shark/-value-holder/-n-u-l-l_-r-e-f-e-r-e-n-c-e/#null_reference","text":"const val NULL_REFERENCE: Long","title":"NULL_REFERENCE"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/","text":"shark-hprof / shark / ValueHolder / BooleanHolder BooleanHolder data class BooleanHolder : ValueHolder Constructors Name Summary init BooleanHolder(value: Boolean ) Properties Name Summary value val value: Boolean","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#booleanholder","text":"data class BooleanHolder : ValueHolder","title":"BooleanHolder"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#constructors","text":"Name Summary init BooleanHolder(value: Boolean )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#properties","text":"Name Summary value val value: Boolean","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/-init-/","text":"shark-hprof / shark / ValueHolder / BooleanHolder / init init BooleanHolder(value: Boolean )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/-init-/#init","text":"BooleanHolder(value: Boolean )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/value/","text":"shark-hprof / shark / ValueHolder / BooleanHolder / value value val value: Boolean","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/value/#value","text":"val value: Boolean","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/","text":"shark-hprof / shark / ValueHolder / ByteHolder ByteHolder data class ByteHolder : ValueHolder Constructors Name Summary init ByteHolder(value: Byte ) Properties Name Summary value val value: Byte","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#byteholder","text":"data class ByteHolder : ValueHolder","title":"ByteHolder"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#constructors","text":"Name Summary init ByteHolder(value: Byte )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#properties","text":"Name Summary value val value: Byte","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/-init-/","text":"shark-hprof / shark / ValueHolder / ByteHolder / init init ByteHolder(value: Byte )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/-init-/#init","text":"ByteHolder(value: Byte )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/value/","text":"shark-hprof / shark / ValueHolder / ByteHolder / value value val value: Byte","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/value/#value","text":"val value: Byte","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/","text":"shark-hprof / shark / ValueHolder / CharHolder CharHolder data class CharHolder : ValueHolder Constructors Name Summary init CharHolder(value: Char ) Properties Name Summary value val value: Char","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#charholder","text":"data class CharHolder : ValueHolder","title":"CharHolder"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#constructors","text":"Name Summary init CharHolder(value: Char )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#properties","text":"Name Summary value val value: Char","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/-init-/","text":"shark-hprof / shark / ValueHolder / CharHolder / init init CharHolder(value: Char )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/-init-/#init","text":"CharHolder(value: Char )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/value/","text":"shark-hprof / shark / ValueHolder / CharHolder / value value val value: Char","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/value/#value","text":"val value: Char","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/","text":"shark-hprof / shark / ValueHolder / DoubleHolder DoubleHolder data class DoubleHolder : ValueHolder Constructors Name Summary init DoubleHolder(value: Double ) Properties Name Summary value val value: Double","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#doubleholder","text":"data class DoubleHolder : ValueHolder","title":"DoubleHolder"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#constructors","text":"Name Summary init DoubleHolder(value: Double )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#properties","text":"Name Summary value val value: Double","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/-init-/","text":"shark-hprof / shark / ValueHolder / DoubleHolder / init init DoubleHolder(value: Double )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/-init-/#init","text":"DoubleHolder(value: Double )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/value/","text":"shark-hprof / shark / ValueHolder / DoubleHolder / value value val value: Double","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/value/#value","text":"val value: Double","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/","text":"shark-hprof / shark / ValueHolder / FloatHolder FloatHolder data class FloatHolder : ValueHolder Constructors Name Summary init FloatHolder(value: Float ) Properties Name Summary value val value: Float","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#floatholder","text":"data class FloatHolder : ValueHolder","title":"FloatHolder"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#constructors","text":"Name Summary init FloatHolder(value: Float )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#properties","text":"Name Summary value val value: Float","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/-init-/","text":"shark-hprof / shark / ValueHolder / FloatHolder / init init FloatHolder(value: Float )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/-init-/#init","text":"FloatHolder(value: Float )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/value/","text":"shark-hprof / shark / ValueHolder / FloatHolder / value value val value: Float","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/value/#value","text":"val value: Float","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/","text":"shark-hprof / shark / ValueHolder / IntHolder IntHolder data class IntHolder : ValueHolder Constructors Name Summary init IntHolder(value: Int ) Properties Name Summary value val value: Int","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#intholder","text":"data class IntHolder : ValueHolder","title":"IntHolder"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#constructors","text":"Name Summary init IntHolder(value: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#properties","text":"Name Summary value val value: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/-init-/","text":"shark-hprof / shark / ValueHolder / IntHolder / init init IntHolder(value: Int )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/-init-/#init","text":"IntHolder(value: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/value/","text":"shark-hprof / shark / ValueHolder / IntHolder / value value val value: Int","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/value/#value","text":"val value: Int","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/","text":"shark-hprof / shark / ValueHolder / LongHolder LongHolder data class LongHolder : ValueHolder Constructors Name Summary init LongHolder(value: Long ) Properties Name Summary value val value: Long","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#longholder","text":"data class LongHolder : ValueHolder","title":"LongHolder"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#constructors","text":"Name Summary init LongHolder(value: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#properties","text":"Name Summary value val value: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/-init-/","text":"shark-hprof / shark / ValueHolder / LongHolder / init init LongHolder(value: Long )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/-init-/#init","text":"LongHolder(value: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/value/","text":"shark-hprof / shark / ValueHolder / LongHolder / value value val value: Long","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/value/#value","text":"val value: Long","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder ReferenceHolder data class ReferenceHolder : ValueHolder Constructors Name Summary init ReferenceHolder(value: Long ) Properties Name Summary isNull val isNull: Boolean value val value: Long","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#referenceholder","text":"data class ReferenceHolder : ValueHolder","title":"ReferenceHolder"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#constructors","text":"Name Summary init ReferenceHolder(value: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#properties","text":"Name Summary isNull val isNull: Boolean value val value: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/-init-/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder / init init ReferenceHolder(value: Long )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/-init-/#init","text":"ReferenceHolder(value: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/is-null/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder / isNull isNull val isNull: Boolean","title":"Is null"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/is-null/#isnull","text":"val isNull: Boolean","title":"isNull"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/value/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder / value value val value: Long","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/value/#value","text":"val value: Long","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/","text":"shark-hprof / shark / ValueHolder / ShortHolder ShortHolder data class ShortHolder : ValueHolder Constructors Name Summary init ShortHolder(value: Short ) Properties Name Summary value val value: Short","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#shortholder","text":"data class ShortHolder : ValueHolder","title":"ShortHolder"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#constructors","text":"Name Summary init ShortHolder(value: Short )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#properties","text":"Name Summary value val value: Short","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/-init-/","text":"shark-hprof / shark / ValueHolder / ShortHolder / init init ShortHolder(value: Short )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/-init-/#init","text":"ShortHolder(value: Short )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/value/","text":"shark-hprof / shark / ValueHolder / ShortHolder / value value val value: Short","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/value/#value","text":"val value: Short","title":"value"},{"location":"api/shark-log/","text":"shark-log Packages Name Summary shark Index All Types","title":"Home"},{"location":"api/shark-log/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-log/#index","text":"All Types","title":"Index"},{"location":"api/shark-log/alltypes/","text":"All Types Name Summary shark.SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Home"},{"location":"api/shark-log/alltypes/#all-types","text":"Name Summary shark.SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"All Types"},{"location":"api/shark-log/shark/","text":"shark-log / shark Package shark Types Name Summary SharkLog object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Core: Logs"},{"location":"api/shark-log/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-log/shark/#types","text":"Name Summary SharkLog object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Types"},{"location":"api/shark-log/shark/-shark-log/","text":"shark-log / shark / SharkLog SharkLog object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go. Types Name Summary Logger interface Logger Properties Name Summary logger var logger: SharkLog.Logger ? Functions Name Summary d fun d(message: () - String ): Unit fun d(throwable: Throwable , message: () - String ): Unit","title":"Home"},{"location":"api/shark-log/shark/-shark-log/#sharklog","text":"object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"SharkLog"},{"location":"api/shark-log/shark/-shark-log/#types","text":"Name Summary Logger interface Logger","title":"Types"},{"location":"api/shark-log/shark/-shark-log/#properties","text":"Name Summary logger var logger: SharkLog.Logger ?","title":"Properties"},{"location":"api/shark-log/shark/-shark-log/#functions","text":"Name Summary d fun d(message: () - String ): Unit fun d(throwable: Throwable , message: () - String ): Unit","title":"Functions"},{"location":"api/shark-log/shark/-shark-log/d/","text":"shark-log / shark / SharkLog / d d inline fun d(message: () - String ): Unit inline fun d(throwable: Throwable , message: () - String ): Unit See Also Logger.d","title":"D"},{"location":"api/shark-log/shark/-shark-log/d/#d","text":"inline fun d(message: () - String ): Unit inline fun d(throwable: Throwable , message: () - String ): Unit See Also Logger.d","title":"d"},{"location":"api/shark-log/shark/-shark-log/logger/","text":"shark-log / shark / SharkLog / logger logger var logger: SharkLog.Logger ?","title":"Logger"},{"location":"api/shark-log/shark/-shark-log/logger/#logger","text":"var logger: SharkLog.Logger ?","title":"logger"},{"location":"api/shark-log/shark/-shark-log/-logger/","text":"shark-log / shark / SharkLog / Logger Logger interface Logger See Also SharkLog Functions Name Summary d abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"Home"},{"location":"api/shark-log/shark/-shark-log/-logger/#logger","text":"interface Logger See Also SharkLog","title":"Logger"},{"location":"api/shark-log/shark/-shark-log/-logger/#functions","text":"Name Summary d abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"Functions"},{"location":"api/shark-log/shark/-shark-log/-logger/d/","text":"shark-log / shark / SharkLog / Logger / d d abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"D"},{"location":"api/shark-log/shark/-shark-log/-logger/d/#d","text":"abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"d"}]}