{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LeakCanary \ud83d\udc24 \u00b6 LeakCanary is a memory leak detection library for Android. LeakCanary\u2019s knowledge of the internals of the Android Framework gives it a unique ability to narrow down the cause of each leak, helping developers dramatically reduce OutOfMemoryError crashes. Get started! Quote \u201cA small leak will sink a great ship.\u201d - Benjamin Franklin","title":"Overview"},{"location":"#leakcanary","text":"LeakCanary is a memory leak detection library for Android. LeakCanary\u2019s knowledge of the internals of the Android Framework gives it a unique ability to narrow down the cause of each leak, helping developers dramatically reduce OutOfMemoryError crashes. Get started! Quote \u201cA small leak will sink a great ship.\u201d - Benjamin Franklin","title":"LeakCanary \ud83d\udc24"},{"location":"blog-articles/","text":"Memory Leaks in Android Detect memory leaks in your instrumentation tests using LeakCanary 9 ways to avoid memory leaks in Android Your article should be here, please update this list! Any technical level welcome.","title":"Blog Articles"},{"location":"changelog/","text":"Change Log \u00b6 Version 2.0 (2019-11-27) \u00b6 In the past 7 months, LeakCanary went through 3 alphas and 5 betas, encompassing 23 contributors over 493 commits, 35826 insertions and 10156 deletions. Should I upgrade? \u00b6 YES! LeakCanary 2 is so much better, it might make you excited when you see a new memory leak. Follow the upgrade guide , you won\u2019t regret it! So, what\u2019s changed since 1.6.3? \u00b6 Everything. The LeakCanary codebase went from ~6000 lines of Java to ~16000 lines of Kotlin, excluding comments & blanks. Isn\u2019t Kotlin supposed to drastically reduce the amount of boilerplate code? Absolutely! And it did. But then, we wrote more code. LeakCanary used to depend on HAHA , a repackaging of perflib , the heap dump parser used by Android Studio. Unfortunately perflib was slow and used too much memory, so LeakCanary now includes its own heap dump parser: Shark . The extra code comes from Shark, but also from having a lot more automated tests, and an improved UI layer. One major difference: when the app is in foreground, LeakCanary 2 will not trigger on every retained instance. Instead it will wait until the app goes in background or to reach a threshold of 5 retained instances in foreground. The analysis will then find all the leaks at once, and group identical leaks in the results UI. Please read the Fundamentals section to learn more! Random facts \u00b6 You can customize the Leaks launcher icon and label: learn more here . If you long press on your main activity launcher icon, you should see a LeakCanary dynamic shortcut. You can then long press that to drop it on your home screen, and the launcher shows that it\u2019s the leaks launcher for your app. Out of the box, LeakCanary tracks all fragments flavors: AOSP, Support Library and Android X. From within the leak screen, you can share a leak to stack overflow. You can also share a heap dump, or import and analyze a heap dump from another device. You can run LeakCanary from your computer command line, on any debuggable app even if that app doesn\u2019t have LeakCanary: learn more here . The new documentation is fully searchable and includes the API documentation. Try the search bar \u2934. A large 160Mb heap dump uses 2Gb memory when opening it in Android Studio, but only 40Mb with Shark. Changes since 2.0 Beta 5 \u00b6 Shark CLI supports multiple connected devices #1642 Fixed missing sources from Maven Central #1643 Updated notification icon to avoid confusion with Twitter DM notifications, and added icons to bottom navigation bar #1648 Automatic leak detection for support library fragments #1611 Many thanks to @AndreasBoehm , @jrodbx , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0 Milestone and the full diff . Version 2.0 Beta 5 (2019-11-25) \u00b6 Major bugfix: native gc roots were accidentally ignored in Beta 4, as a result some leaks were not found #1634 Fixed Lint warning ( leak_canary_about_message string triggered multiple substitutions warning) #1630 Many thanks to @DanEdgarTarget , @msfjarvis , @PaulWoitaschek , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-5 Milestone and the full diff . Version 2.0 Beta 4 (2019-11-18) \u00b6 Improved string rendering for heap analysis results UX redesign #1445 Support for pattern matching of native reference leaks #1562 Added support for deobfuscation using Proguard mapping files in Shark #1499 . This isn\u2019t directly supported in LeakCanary yet. Added support for extracting metadata from the heap dump (see the recipe ) #1519 Improved auto disabling of LeakCanary in Unit and UI tests #1552 Several performance improvements when parsing heap dumps Fixed several bugs and crashes Added new known leak patterns Many thanks to @Armaxis , @BraisGabin , @bric3 , @elihart , @fernandospr , @flickator , @gabrysgab , @JorgeDLS , @lannyf77 , @msfjarvis , @mzgreen , @ozmium , @PaulWoitaschek , @pyricau , @shelpy , @vRallev , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-4 Milestone and the full diff . Version 2.0 Beta 3 (2019-08-22) \u00b6 Baseline memory usage for large hprofs divided by 3 and removed memory spikes #1543 Fixed crash when LeakCanary is initialized from another process #1529 Java local references are deprioritized to look for longer alternative paths #1525 Fixed JavaLocalPattern not matching on Lollipop #1524 Many thanks to @Armaxis , @elihart , @emartynov , @hmcgreevy-instil , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-3 Milestone and the full diff . Version 2.0 Beta 2 (2019-08-02) \u00b6 Fixed Leak analysis failed: Object id not found in heap dump. #1516 10x speed increase of hprof indexing on large heap dumps #1520 Many thanks to @kolphi , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-2 Milestone and the full diff . Version 2.0 Beta 1 (2019-07-30) \u00b6 New standalone library! Shark is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a CLI : you can now run shark-cli analyze-process com.example.myapp from your computer. New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select \u201cHeap Explorer\u201d. This is still experimental and not very user friendly, contributions welcome! Large API rewrite to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became AppWatcher , RefWatcher became ObjectWatcher , AndroidExcludedRefs became AndroidReferenceMatchers , AnalysisResultListener became OnHeapAnalyzedListener , AndroidLeakTraceInspectors became AndroidObjectInspectors . The entire API surface is now documented and the documentation is available on this website: see the LeakCanary API tab at the top. Removed the dependency on Android X . No more configuration issues! #1462 Added Proguard rules for LeakCanary and ObjectWatcher. #1500 Display LeakCanary version in the About screen. #1448 Bug fixes, new reference matchers and object inspectors Many thanks to @arctouch-carlosottoboni , @jemaystermind , @kushagrakumar27 , @pyricau , @snkashis for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-1 Milestone and the full diff . Version 2.0 Alpha 3 (2019-07-04) \u00b6 #1401 LeakCanary can now import all hprof files created from prior LeakCanary versions. #1414 New API: RefWatcher.retainedInstances which returns the instances that are currently considered retained. #1419 New APIs: LeakCanary.Config.maxStoredHeapDumps (default 7) and LeakCanary.Config.requestWriteExternalStoragePermission (default false). LeakCanary won\u2019t ask for the external storage permission anymore by default. #1338 API change: LeakCanary.Config.exclusionsFactory replaced with LeakCanary.Config.knownReferences (simpler use), LeakCanary.Config.leakInspectors and LeakCanary.Config.labelers merged into LeakCanary.Config.leakTraceInspectors which provides access to the entire leak trace as well as a new graph oriented API that replaces the low level hprof parser API. #1382 LeakCanary now disables automatic heap dumping when running in AndroidX UI tests. #1424 API rename: RefWatcher.hasRetainedReferences => RefWatcher.hasRetainedInstances , RefWatcher.retainedReferenceCount => RefWatcher.retainedInstanceCount , RefWatcher.hasWatchedReferences => RefWatcher.hasWatchedInstances , RefWatcher.removeKeysRetainedBeforeHeapDump => RefWatcher.removeInstancesRetainedBeforeHeapDump , RefWatcher.clearWatchedReferences => RefWatcher.clearWatchedInstances . #1432 #1438 #1440 New \u201cwon\u2019t fix\u201d leaks and leak trace inspectors #1374 #1364 #1366 #1417 #1399 #1416 #1407 #1427 #1385 Bug and crash fixes Many thanks to @1step2hell , @afollestad , @ansman , @bjdodson , @BraisGabin , @EBfVince , @jaredsburrows , @pforhan , @pyricau , @tellypresence , @wiyarmir for the contributions, bug reports and feature requests. For more details, see the 2.0-alpha-3 Milestone and the full diff . Version 2.0 Alpha 2 (2019-05-21) \u00b6 #1040 Import and analyze hprof files from other devices #1344 Computing retained size #1325 New notification showing current count of retained instances #1079 \u201cExcluded\u201d leaks have been renamed to \u201cWon\u2019t fix\u201d leaks to clarify meaning. #1328 New leaks are called out in the UI. #1327 LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds. #1173 Experimental: now reporting leaks that only go through weak references (previously reported as \u201cno path to instance\u201d) #1339 Readded support for Thread name based exclusions #1312 Fixed bug causing LeakCanary to stop detecting leaks after the app is killed. #1310 #1313 #1314 #1340 #1337 Many API changes #1296 #1293 #1306 #1336 Fixed several crashes. Many thanks to @forrestbice , @Foso , @Goddchen , @marcosholgado , @orionlee , @pyricau , @satoshun , @ZacSweers for the contributions! For more details, see the 2.0-alpha-2 Milestone and the full diff . Version 2.0 Alpha 1 (2019-04-23) \u00b6 New logo , thanks @flickator ! Entirely rewritten to 100% Kotlin Multiple leaks detected in one analysis The heap is dumped when the app goes in the background, or when a minimum of 5 leaks is reached in the foreground. Leak grouping Leaks that share similar causes are grouped in the UI. New screens to see the list of groups and each group. Improved leaktrace strings to highlight leak causes. Leaks can be shared to Stack Overflow New library: LeakSentry . Detects when objects are leaking and triggers LeakCanary Can be used independently in production, for instance to report the number of leaking instances on an OutOfMemoryError crash. New heap parser Uses 90% less memory and 6 times faster than the prior heap parser. Runs in the same process as the app on a low priority thread. No more dependency on Perflib and TroveJ. New dependency on Okio. The old parser is still available as leakcanary-android-perflib but will be removed after alpha. Labelers can add any string content to leak elements 0 code setup, just add the one debug dependency. Simpler configuration options Updated from support library to Android X Many thanks to @BraisGabin , @colinmarsch , @jrodbx , @flickator , @JakeWharton , @pyricau , @WhatsEmo for the contributions! For more details, see the 2.0-alpha-1 Milestone and the full diff . Version 1.6.3 (2019-01-10) \u00b6 #1163 Fixed leaks being incorrectly classified as \u201cno leak\u201d due to missed GC Roots. #1153 LeakCanary.isInAnalyzerProcess now correctly returns true in the analyzer process prior to any first leak (could be triggered by starting the leak result activity). #1158 Stopped enabling DisplayLeakActivity when not using DisplayLeakService. #1135 Fixed IndexOutOfBoundsException for leak traces of size 1. #1163 Keep \u201cno leak\u201d heap dumps. Many thanks to @KMaragh , @pyricau , @SebRut for the code contributions! For more details, see the 1.6.3 Milestone and the full diff . Version 1.6.2 (2018-10-16) \u00b6 #1067 Fixed TransactionTooLargeException crash (leak analysis would never complete). #1061 Detection of Fragment view leaks after Fragment#onDestroyView(). #1076 Added the FOREGROUND_SERVICE permission for Android P. #1062 The LeakCanary toast now always shows correctly. It doesn\u2019t show if there is no activity in foreground. #1115 Reenabled the DisplayLeakActivity icon on fresh installs. #1100 Added nullability annotations to improve Kotlin support. Updates to excluded leaks ( commits ). Updates to reachability inspectors ( commits ). Many thanks to @fractalwrench , @ZacSweers , @Goddchen , @igokoro , @IlyaGulya , @JakeWharton , @javmarina , @jokermonn , @jrodbx , @Parseus , @pyricau , @scottkennedy for the code contributions! Public API changes \u00b6 Subclasses of AbstractAnalysisResultService should now override onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) instead of onHeapAnalyzed(@NonNull HeapDump heapDump, @NonNull AnalysisResult result) For more details, see the 1.6.2 Milestone and the full diff . Version 1.6.1 (2018-06-21) \u00b6 #727 Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak. #1011 We noticed that computing the retained heap size could take a long time, so it\u2019s now optional and off by default. #633 Support for detecting leaks in instrumentation tests ( see the wiki ). #985 Ability to convert leak traces into stack traces for easy remote reporting ( see the wiki ). #983 Support for watching destroyed Fragments. #846 LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+. The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found. #775 Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library. #930 DisplayLeakActivity has a responsive icon. #685 Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors). #999 Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1). Several bug and crash fixes. Many thanks to @AdityaAnand1 , @alhah , @christxph , @csoon03 , @daqi , @JakeWharton , @jankovd , @jrodbx , @kurtisnelson , @NightlyNexus , @pyricau , @SalvatoreT , @shmuelr , @tokou , @xueqiushi for the code contributions! Note: we made a 1.6 release but quickly followed up with 1.6.1 due to #1058 . Public API changes \u00b6 The installed ref watcher singleton is now available via LeakCanary.installedRefWatcher() AnalysisResult.leakTraceAsFakeException() returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics. New InstrumentationLeakDetector and FailTestOnLeakRunListener APIs for detecting leaks in instrumentation tests. New Reachability.Inspector and RefWatcherBuilder.stethoscopeClasses() API to establish reachability and help identify leak causes. Watching activities can be disabled with AndroidRefWatcherBuilder.watchActivities(false) , watching fragments can be disabled with AndroidRefWatcherBuilder.watchFragments(false) LeakCanary.setDisplayLeakActivityDirectoryProvider() is deprecated and replaced with LeakCanary.setLeakDirectoryProvider() New RefWatcherBuilder.computeRetainedHeapSize() API to enable the computing of the retained heap size (off by default). For more details, see the 1.6.1 Milestone and the full diff . Version 1.5.4 (2017-09-22) \u00b6 Restore Java 7 compatibility in leakcanary-watcher Version 1.5.3 (2017-09-17) \u00b6 Fix broken 1.5.2 build Convert leakcanary-watcher from Android library to Java library Disable finish animations in RequestStoragePermissionActivity Corrected README sample for Robolectric tests For more details, see the full diff . Version 1.5.2 (2017-08-09) \u00b6 New excluded leaks Move Leakcanary UI into leak analyzer process Ignore computing retained sizes for bitmaps on O+ Add notification channel for persistent messages on O+ Exclude permission activity from recents menu Updated README and sample for handling Robolectric tests For more details, see the full diff . Version 1.5.1 (2017-04-25) \u00b6 New excluded leaks Fix java.util.MissingFormatArgumentException in DisplayLeakService Separate task affinities for different apps Bump minSdk to 14 Fix HahaHelper for O Preview For more details, see the full diff . Version 1.5 (2016-09-28) \u00b6 New excluded leaks Added LeakCanary.isInAnalyzerProcess() to the no-op jar Fixed several file access issues: No more cleanup on startup, we rotate the heap dump files on every new heap dump. LeakCanary now falls back to the app directory until it can write to the external storage. Leak notifications now each use a distinct notification instead of erasing each other. If LeakCanary can\u2019t perform a heap dump for any reason (e.g. analysis in progress, debugger attached), it retries later with an exponential backoff. Added confirmation dialog when user deletes all leaks. Replace the two LeakCanary configuration methods with a builder that provides more flexibility, see LeakCanary.refWatcher() . For more details, see the full diff . Public API changes \u00b6 New HeapAnalyzer.findTrackedReferences() method for headless analysis when you have no context on what leaked. Added LeakCanary.isInAnalyzerProcess() to the no-op jar Added LeakCanary.refWatcher() which returns an AndroidRefWatcherBuilder that extends RefWatcherBuilder and lets you fully customize the RefWatcher instance. Removed LeakCanary.install(Application, Class) and LeakCanary.androidWatcher(Context, HeapDump.Listener, ExcludedRefs) . Removed R.integer.leak_canary_max_stored_leaks and R.integer.leak_canary_watch_delay_millis , those can now be set via LeakCanary.refWatcher() . Updated the LeakDirectoryProvider API to centralize all file related responsibilities. RefWatcher is now constructed with a WatchExecutor which executes a Retryable , instead of an Executor that executes a Runnable . HeapDumper.NO_DUMP was renamed HeapDumper.RETRY_LATER Version 1.4 (2016-09-11) \u00b6 Fix false negative where GC root is of type android.os.Binder #482 Update HAHA to 2.0.3; clear compiler warnings #563 Correct some mistakes in German translation #516 Don\u2019t loop when storage permission denied #422 Remove old references to \u201c__\u201d prefixed resources #477 Fix permission crash for DisplayLeakActivity on M #382 Fix NPE when thread name not found in heap dump #417 Add version info to stacktrace #473 Version 1.4-beta2 (2016-03-23) \u00b6 Add reason for ignoring to analysis result #365 . Lower memory usage when parsing heap dumps on M #223 . Fix NPE in LeakCanaryInternals.isInServiceProcess() #449 . New ignored Android SDK leaks #297 , #322 . Use leakcanary-android-no-op in test builds #143 . Fixes to allow LeakCanary to work with ProGuard #398 . Optimize png assets #406 . Fix delete button not working on error views #408 . Add German translation #437 . Version 1.4-beta1 (2016-01-08) \u00b6 Switched to HAHA 2.0.2 with uses Perflib instead of MAT under the hood #219 . This fixes crashes and improves speed a lot. We can now parse Android M heap dumps #267 , although there are still memory issues (see #223 ). Excluded leaks are now reported as well and available in the display leak activity. Added ProGuard configuration for #132 . Many new ignored Android SDK leaks. Added excluded leaks to text report #119 . Added LeakCanary SHA to text report #120 . Added CanaryLog API to replace the logger: #201 . Renamed all resources to begin with leak_canary_ instead of __leak_canary #161 No crash when heap dump fails #226 . Add retained size to leak reports #162 . Public API changes \u00b6 AnalysisResult.failure is now a Throwable instead of an Exception . Main goal is to catch and correctly report OOMs while parsing. Added ARRAY_ENTRY to LeakTraceElement.Type for references through array entries. Renamed ExcludedRefs fields. Each ExcludedRef entry can now be ignored entirely or \u201ckept only if no other path\u201d. Added support for ignoring all fields (static and non static) for a given class. Version 1.3.1 (2015-05-16) \u00b6 Heap dumps and analysis results are now saved on the sd card: #21 . ExcludedRef and AndroidExcludedRefs are customizable: #12 #73 . 7 new ignored Android SDK leaks: #1 #4 #32 #89 #82 #97 . Fixed 3 crashes in LeakCanary: #37 #46 #66 . Fixed StrictMode thread policy violations: #15 . Updated minSdkVersion from 9 to 8 : #57 . Added LeakCanary version name to LeakCanary.leakInfo() : #49 . leakcanary-android-no-op is lighter, it does not depend on leakcanary-watcher anymore, only 2 classes now: #74 . Adding field state details to the text leak trace. A Toast is displayed while the heap dump is in progress to warn that the UI will freeze: #20 . You can customize the toast by providing your own layout named __leak_canary_heap_dump_toast.xml (e.g. you could make it an empty layout). If the analysis fails, the result and heap dump are kept so that it can be reported to LeakCanary: #102 . Update to HAHA 1.3 to fix a 2 crashes #3 46 Public API changes \u00b6 When upgrading from 1.3 to 1.3.1, previously saved heap dumps will not be readable any more, but they won\u2019t be removed from the app directory. You should probably uninstall your app. Added android.permission.WRITE_EXTERNAL_STORAGE to leakcanary-android artifact. LeakCanary.androidWatcher() parameter types have changed (+ExcludedRefs). LeakCanary.leakInfo() parameter types have changed (+boolean) ExcludedRef is now serializable and immutable, instances can be created using ExcludedRef.Builder . ExcludedRef is available in HeapDump AndroidExcludedRefs is an enum, you can now pick the leaks you want to ignore in AndroidExcludedRefs by creating an EnumSet and calling AndroidExcludedRefs.createBuilder() . AndroidExcludedRefs.createAppDefaults() & AndroidExcludedRefs.createAndroidDefaults() return a ExcludedRef.Builder . ExcludedRef moved from leakcanary-analyzer to leakcanary-watcher Version 1.3 (2015-05-08) \u00b6 Initial release. Dependencies \u00b6","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-20-2019-11-27","text":"In the past 7 months, LeakCanary went through 3 alphas and 5 betas, encompassing 23 contributors over 493 commits, 35826 insertions and 10156 deletions.","title":"Version 2.0 (2019-11-27)"},{"location":"changelog/#should-i-upgrade","text":"YES! LeakCanary 2 is so much better, it might make you excited when you see a new memory leak. Follow the upgrade guide , you won\u2019t regret it!","title":"Should I upgrade?"},{"location":"changelog/#so-whats-changed-since-163","text":"Everything. The LeakCanary codebase went from ~6000 lines of Java to ~16000 lines of Kotlin, excluding comments & blanks. Isn\u2019t Kotlin supposed to drastically reduce the amount of boilerplate code? Absolutely! And it did. But then, we wrote more code. LeakCanary used to depend on HAHA , a repackaging of perflib , the heap dump parser used by Android Studio. Unfortunately perflib was slow and used too much memory, so LeakCanary now includes its own heap dump parser: Shark . The extra code comes from Shark, but also from having a lot more automated tests, and an improved UI layer. One major difference: when the app is in foreground, LeakCanary 2 will not trigger on every retained instance. Instead it will wait until the app goes in background or to reach a threshold of 5 retained instances in foreground. The analysis will then find all the leaks at once, and group identical leaks in the results UI. Please read the Fundamentals section to learn more!","title":"So, what's changed since 1.6.3?"},{"location":"changelog/#random-facts","text":"You can customize the Leaks launcher icon and label: learn more here . If you long press on your main activity launcher icon, you should see a LeakCanary dynamic shortcut. You can then long press that to drop it on your home screen, and the launcher shows that it\u2019s the leaks launcher for your app. Out of the box, LeakCanary tracks all fragments flavors: AOSP, Support Library and Android X. From within the leak screen, you can share a leak to stack overflow. You can also share a heap dump, or import and analyze a heap dump from another device. You can run LeakCanary from your computer command line, on any debuggable app even if that app doesn\u2019t have LeakCanary: learn more here . The new documentation is fully searchable and includes the API documentation. Try the search bar \u2934. A large 160Mb heap dump uses 2Gb memory when opening it in Android Studio, but only 40Mb with Shark.","title":"Random facts"},{"location":"changelog/#changes-since-20-beta-5","text":"Shark CLI supports multiple connected devices #1642 Fixed missing sources from Maven Central #1643 Updated notification icon to avoid confusion with Twitter DM notifications, and added icons to bottom navigation bar #1648 Automatic leak detection for support library fragments #1611 Many thanks to @AndreasBoehm , @jrodbx , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0 Milestone and the full diff .","title":"Changes since 2.0 Beta 5"},{"location":"changelog/#version-20-beta-5-2019-11-25","text":"Major bugfix: native gc roots were accidentally ignored in Beta 4, as a result some leaks were not found #1634 Fixed Lint warning ( leak_canary_about_message string triggered multiple substitutions warning) #1630 Many thanks to @DanEdgarTarget , @msfjarvis , @PaulWoitaschek , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-5 Milestone and the full diff .","title":"Version 2.0 Beta 5 (2019-11-25)"},{"location":"changelog/#version-20-beta-4-2019-11-18","text":"Improved string rendering for heap analysis results UX redesign #1445 Support for pattern matching of native reference leaks #1562 Added support for deobfuscation using Proguard mapping files in Shark #1499 . This isn\u2019t directly supported in LeakCanary yet. Added support for extracting metadata from the heap dump (see the recipe ) #1519 Improved auto disabling of LeakCanary in Unit and UI tests #1552 Several performance improvements when parsing heap dumps Fixed several bugs and crashes Added new known leak patterns Many thanks to @Armaxis , @BraisGabin , @bric3 , @elihart , @fernandospr , @flickator , @gabrysgab , @JorgeDLS , @lannyf77 , @msfjarvis , @mzgreen , @ozmium , @PaulWoitaschek , @pyricau , @shelpy , @vRallev , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-4 Milestone and the full diff .","title":"Version 2.0 Beta 4 (2019-11-18)"},{"location":"changelog/#version-20-beta-3-2019-08-22","text":"Baseline memory usage for large hprofs divided by 3 and removed memory spikes #1543 Fixed crash when LeakCanary is initialized from another process #1529 Java local references are deprioritized to look for longer alternative paths #1525 Fixed JavaLocalPattern not matching on Lollipop #1524 Many thanks to @Armaxis , @elihart , @emartynov , @hmcgreevy-instil , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-3 Milestone and the full diff .","title":"Version 2.0 Beta 3 (2019-08-22)"},{"location":"changelog/#version-20-beta-2-2019-08-02","text":"Fixed Leak analysis failed: Object id not found in heap dump. #1516 10x speed increase of hprof indexing on large heap dumps #1520 Many thanks to @kolphi , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-2 Milestone and the full diff .","title":"Version 2.0 Beta 2 (2019-08-02)"},{"location":"changelog/#version-20-beta-1-2019-07-30","text":"New standalone library! Shark is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a CLI : you can now run shark-cli analyze-process com.example.myapp from your computer. New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select \u201cHeap Explorer\u201d. This is still experimental and not very user friendly, contributions welcome! Large API rewrite to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became AppWatcher , RefWatcher became ObjectWatcher , AndroidExcludedRefs became AndroidReferenceMatchers , AnalysisResultListener became OnHeapAnalyzedListener , AndroidLeakTraceInspectors became AndroidObjectInspectors . The entire API surface is now documented and the documentation is available on this website: see the LeakCanary API tab at the top. Removed the dependency on Android X . No more configuration issues! #1462 Added Proguard rules for LeakCanary and ObjectWatcher. #1500 Display LeakCanary version in the About screen. #1448 Bug fixes, new reference matchers and object inspectors Many thanks to @arctouch-carlosottoboni , @jemaystermind , @kushagrakumar27 , @pyricau , @snkashis for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-1 Milestone and the full diff .","title":"Version 2.0 Beta 1 (2019-07-30)"},{"location":"changelog/#version-20-alpha-3-2019-07-04","text":"#1401 LeakCanary can now import all hprof files created from prior LeakCanary versions. #1414 New API: RefWatcher.retainedInstances which returns the instances that are currently considered retained. #1419 New APIs: LeakCanary.Config.maxStoredHeapDumps (default 7) and LeakCanary.Config.requestWriteExternalStoragePermission (default false). LeakCanary won\u2019t ask for the external storage permission anymore by default. #1338 API change: LeakCanary.Config.exclusionsFactory replaced with LeakCanary.Config.knownReferences (simpler use), LeakCanary.Config.leakInspectors and LeakCanary.Config.labelers merged into LeakCanary.Config.leakTraceInspectors which provides access to the entire leak trace as well as a new graph oriented API that replaces the low level hprof parser API. #1382 LeakCanary now disables automatic heap dumping when running in AndroidX UI tests. #1424 API rename: RefWatcher.hasRetainedReferences => RefWatcher.hasRetainedInstances , RefWatcher.retainedReferenceCount => RefWatcher.retainedInstanceCount , RefWatcher.hasWatchedReferences => RefWatcher.hasWatchedInstances , RefWatcher.removeKeysRetainedBeforeHeapDump => RefWatcher.removeInstancesRetainedBeforeHeapDump , RefWatcher.clearWatchedReferences => RefWatcher.clearWatchedInstances . #1432 #1438 #1440 New \u201cwon\u2019t fix\u201d leaks and leak trace inspectors #1374 #1364 #1366 #1417 #1399 #1416 #1407 #1427 #1385 Bug and crash fixes Many thanks to @1step2hell , @afollestad , @ansman , @bjdodson , @BraisGabin , @EBfVince , @jaredsburrows , @pforhan , @pyricau , @tellypresence , @wiyarmir for the contributions, bug reports and feature requests. For more details, see the 2.0-alpha-3 Milestone and the full diff .","title":"Version 2.0 Alpha 3 (2019-07-04)"},{"location":"changelog/#version-20-alpha-2-2019-05-21","text":"#1040 Import and analyze hprof files from other devices #1344 Computing retained size #1325 New notification showing current count of retained instances #1079 \u201cExcluded\u201d leaks have been renamed to \u201cWon\u2019t fix\u201d leaks to clarify meaning. #1328 New leaks are called out in the UI. #1327 LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds. #1173 Experimental: now reporting leaks that only go through weak references (previously reported as \u201cno path to instance\u201d) #1339 Readded support for Thread name based exclusions #1312 Fixed bug causing LeakCanary to stop detecting leaks after the app is killed. #1310 #1313 #1314 #1340 #1337 Many API changes #1296 #1293 #1306 #1336 Fixed several crashes. Many thanks to @forrestbice , @Foso , @Goddchen , @marcosholgado , @orionlee , @pyricau , @satoshun , @ZacSweers for the contributions! For more details, see the 2.0-alpha-2 Milestone and the full diff .","title":"Version 2.0 Alpha 2 (2019-05-21)"},{"location":"changelog/#version-20-alpha-1-2019-04-23","text":"New logo , thanks @flickator ! Entirely rewritten to 100% Kotlin Multiple leaks detected in one analysis The heap is dumped when the app goes in the background, or when a minimum of 5 leaks is reached in the foreground. Leak grouping Leaks that share similar causes are grouped in the UI. New screens to see the list of groups and each group. Improved leaktrace strings to highlight leak causes. Leaks can be shared to Stack Overflow New library: LeakSentry . Detects when objects are leaking and triggers LeakCanary Can be used independently in production, for instance to report the number of leaking instances on an OutOfMemoryError crash. New heap parser Uses 90% less memory and 6 times faster than the prior heap parser. Runs in the same process as the app on a low priority thread. No more dependency on Perflib and TroveJ. New dependency on Okio. The old parser is still available as leakcanary-android-perflib but will be removed after alpha. Labelers can add any string content to leak elements 0 code setup, just add the one debug dependency. Simpler configuration options Updated from support library to Android X Many thanks to @BraisGabin , @colinmarsch , @jrodbx , @flickator , @JakeWharton , @pyricau , @WhatsEmo for the contributions! For more details, see the 2.0-alpha-1 Milestone and the full diff .","title":"Version 2.0 Alpha 1 (2019-04-23)"},{"location":"changelog/#version-163-2019-01-10","text":"#1163 Fixed leaks being incorrectly classified as \u201cno leak\u201d due to missed GC Roots. #1153 LeakCanary.isInAnalyzerProcess now correctly returns true in the analyzer process prior to any first leak (could be triggered by starting the leak result activity). #1158 Stopped enabling DisplayLeakActivity when not using DisplayLeakService. #1135 Fixed IndexOutOfBoundsException for leak traces of size 1. #1163 Keep \u201cno leak\u201d heap dumps. Many thanks to @KMaragh , @pyricau , @SebRut for the code contributions! For more details, see the 1.6.3 Milestone and the full diff .","title":"Version 1.6.3 (2019-01-10)"},{"location":"changelog/#version-162-2018-10-16","text":"#1067 Fixed TransactionTooLargeException crash (leak analysis would never complete). #1061 Detection of Fragment view leaks after Fragment#onDestroyView(). #1076 Added the FOREGROUND_SERVICE permission for Android P. #1062 The LeakCanary toast now always shows correctly. It doesn\u2019t show if there is no activity in foreground. #1115 Reenabled the DisplayLeakActivity icon on fresh installs. #1100 Added nullability annotations to improve Kotlin support. Updates to excluded leaks ( commits ). Updates to reachability inspectors ( commits ). Many thanks to @fractalwrench , @ZacSweers , @Goddchen , @igokoro , @IlyaGulya , @JakeWharton , @javmarina , @jokermonn , @jrodbx , @Parseus , @pyricau , @scottkennedy for the code contributions!","title":"Version 1.6.2 (2018-10-16)"},{"location":"changelog/#public-api-changes","text":"Subclasses of AbstractAnalysisResultService should now override onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) instead of onHeapAnalyzed(@NonNull HeapDump heapDump, @NonNull AnalysisResult result) For more details, see the 1.6.2 Milestone and the full diff .","title":"Public API changes"},{"location":"changelog/#version-161-2018-06-21","text":"#727 Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak. #1011 We noticed that computing the retained heap size could take a long time, so it\u2019s now optional and off by default. #633 Support for detecting leaks in instrumentation tests ( see the wiki ). #985 Ability to convert leak traces into stack traces for easy remote reporting ( see the wiki ). #983 Support for watching destroyed Fragments. #846 LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+. The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found. #775 Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library. #930 DisplayLeakActivity has a responsive icon. #685 Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors). #999 Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1). Several bug and crash fixes. Many thanks to @AdityaAnand1 , @alhah , @christxph , @csoon03 , @daqi , @JakeWharton , @jankovd , @jrodbx , @kurtisnelson , @NightlyNexus , @pyricau , @SalvatoreT , @shmuelr , @tokou , @xueqiushi for the code contributions! Note: we made a 1.6 release but quickly followed up with 1.6.1 due to #1058 .","title":"Version 1.6.1 (2018-06-21)"},{"location":"changelog/#public-api-changes_1","text":"The installed ref watcher singleton is now available via LeakCanary.installedRefWatcher() AnalysisResult.leakTraceAsFakeException() returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics. New InstrumentationLeakDetector and FailTestOnLeakRunListener APIs for detecting leaks in instrumentation tests. New Reachability.Inspector and RefWatcherBuilder.stethoscopeClasses() API to establish reachability and help identify leak causes. Watching activities can be disabled with AndroidRefWatcherBuilder.watchActivities(false) , watching fragments can be disabled with AndroidRefWatcherBuilder.watchFragments(false) LeakCanary.setDisplayLeakActivityDirectoryProvider() is deprecated and replaced with LeakCanary.setLeakDirectoryProvider() New RefWatcherBuilder.computeRetainedHeapSize() API to enable the computing of the retained heap size (off by default). For more details, see the 1.6.1 Milestone and the full diff .","title":"Public API changes"},{"location":"changelog/#version-154-2017-09-22","text":"Restore Java 7 compatibility in leakcanary-watcher","title":"Version 1.5.4 (2017-09-22)"},{"location":"changelog/#version-153-2017-09-17","text":"Fix broken 1.5.2 build Convert leakcanary-watcher from Android library to Java library Disable finish animations in RequestStoragePermissionActivity Corrected README sample for Robolectric tests For more details, see the full diff .","title":"Version 1.5.3 (2017-09-17)"},{"location":"changelog/#version-152-2017-08-09","text":"New excluded leaks Move Leakcanary UI into leak analyzer process Ignore computing retained sizes for bitmaps on O+ Add notification channel for persistent messages on O+ Exclude permission activity from recents menu Updated README and sample for handling Robolectric tests For more details, see the full diff .","title":"Version 1.5.2 (2017-08-09)"},{"location":"changelog/#version-151-2017-04-25","text":"New excluded leaks Fix java.util.MissingFormatArgumentException in DisplayLeakService Separate task affinities for different apps Bump minSdk to 14 Fix HahaHelper for O Preview For more details, see the full diff .","title":"Version 1.5.1 (2017-04-25)"},{"location":"changelog/#version-15-2016-09-28","text":"New excluded leaks Added LeakCanary.isInAnalyzerProcess() to the no-op jar Fixed several file access issues: No more cleanup on startup, we rotate the heap dump files on every new heap dump. LeakCanary now falls back to the app directory until it can write to the external storage. Leak notifications now each use a distinct notification instead of erasing each other. If LeakCanary can\u2019t perform a heap dump for any reason (e.g. analysis in progress, debugger attached), it retries later with an exponential backoff. Added confirmation dialog when user deletes all leaks. Replace the two LeakCanary configuration methods with a builder that provides more flexibility, see LeakCanary.refWatcher() . For more details, see the full diff .","title":"Version 1.5 (2016-09-28)"},{"location":"changelog/#public-api-changes_2","text":"New HeapAnalyzer.findTrackedReferences() method for headless analysis when you have no context on what leaked. Added LeakCanary.isInAnalyzerProcess() to the no-op jar Added LeakCanary.refWatcher() which returns an AndroidRefWatcherBuilder that extends RefWatcherBuilder and lets you fully customize the RefWatcher instance. Removed LeakCanary.install(Application, Class) and LeakCanary.androidWatcher(Context, HeapDump.Listener, ExcludedRefs) . Removed R.integer.leak_canary_max_stored_leaks and R.integer.leak_canary_watch_delay_millis , those can now be set via LeakCanary.refWatcher() . Updated the LeakDirectoryProvider API to centralize all file related responsibilities. RefWatcher is now constructed with a WatchExecutor which executes a Retryable , instead of an Executor that executes a Runnable . HeapDumper.NO_DUMP was renamed HeapDumper.RETRY_LATER","title":"Public API changes"},{"location":"changelog/#version-14-2016-09-11","text":"Fix false negative where GC root is of type android.os.Binder #482 Update HAHA to 2.0.3; clear compiler warnings #563 Correct some mistakes in German translation #516 Don\u2019t loop when storage permission denied #422 Remove old references to \u201c__\u201d prefixed resources #477 Fix permission crash for DisplayLeakActivity on M #382 Fix NPE when thread name not found in heap dump #417 Add version info to stacktrace #473","title":"Version 1.4 (2016-09-11)"},{"location":"changelog/#version-14-beta2-2016-03-23","text":"Add reason for ignoring to analysis result #365 . Lower memory usage when parsing heap dumps on M #223 . Fix NPE in LeakCanaryInternals.isInServiceProcess() #449 . New ignored Android SDK leaks #297 , #322 . Use leakcanary-android-no-op in test builds #143 . Fixes to allow LeakCanary to work with ProGuard #398 . Optimize png assets #406 . Fix delete button not working on error views #408 . Add German translation #437 .","title":"Version 1.4-beta2 (2016-03-23)"},{"location":"changelog/#version-14-beta1-2016-01-08","text":"Switched to HAHA 2.0.2 with uses Perflib instead of MAT under the hood #219 . This fixes crashes and improves speed a lot. We can now parse Android M heap dumps #267 , although there are still memory issues (see #223 ). Excluded leaks are now reported as well and available in the display leak activity. Added ProGuard configuration for #132 . Many new ignored Android SDK leaks. Added excluded leaks to text report #119 . Added LeakCanary SHA to text report #120 . Added CanaryLog API to replace the logger: #201 . Renamed all resources to begin with leak_canary_ instead of __leak_canary #161 No crash when heap dump fails #226 . Add retained size to leak reports #162 .","title":"Version 1.4-beta1 (2016-01-08)"},{"location":"changelog/#public-api-changes_3","text":"AnalysisResult.failure is now a Throwable instead of an Exception . Main goal is to catch and correctly report OOMs while parsing. Added ARRAY_ENTRY to LeakTraceElement.Type for references through array entries. Renamed ExcludedRefs fields. Each ExcludedRef entry can now be ignored entirely or \u201ckept only if no other path\u201d. Added support for ignoring all fields (static and non static) for a given class.","title":"Public API changes"},{"location":"changelog/#version-131-2015-05-16","text":"Heap dumps and analysis results are now saved on the sd card: #21 . ExcludedRef and AndroidExcludedRefs are customizable: #12 #73 . 7 new ignored Android SDK leaks: #1 #4 #32 #89 #82 #97 . Fixed 3 crashes in LeakCanary: #37 #46 #66 . Fixed StrictMode thread policy violations: #15 . Updated minSdkVersion from 9 to 8 : #57 . Added LeakCanary version name to LeakCanary.leakInfo() : #49 . leakcanary-android-no-op is lighter, it does not depend on leakcanary-watcher anymore, only 2 classes now: #74 . Adding field state details to the text leak trace. A Toast is displayed while the heap dump is in progress to warn that the UI will freeze: #20 . You can customize the toast by providing your own layout named __leak_canary_heap_dump_toast.xml (e.g. you could make it an empty layout). If the analysis fails, the result and heap dump are kept so that it can be reported to LeakCanary: #102 . Update to HAHA 1.3 to fix a 2 crashes #3 46","title":"Version 1.3.1 (2015-05-16)"},{"location":"changelog/#public-api-changes_4","text":"When upgrading from 1.3 to 1.3.1, previously saved heap dumps will not be readable any more, but they won\u2019t be removed from the app directory. You should probably uninstall your app. Added android.permission.WRITE_EXTERNAL_STORAGE to leakcanary-android artifact. LeakCanary.androidWatcher() parameter types have changed (+ExcludedRefs). LeakCanary.leakInfo() parameter types have changed (+boolean) ExcludedRef is now serializable and immutable, instances can be created using ExcludedRef.Builder . ExcludedRef is available in HeapDump AndroidExcludedRefs is an enum, you can now pick the leaks you want to ignore in AndroidExcludedRefs by creating an EnumSet and calling AndroidExcludedRefs.createBuilder() . AndroidExcludedRefs.createAppDefaults() & AndroidExcludedRefs.createAndroidDefaults() return a ExcludedRef.Builder . ExcludedRef moved from leakcanary-analyzer to leakcanary-watcher","title":"Public API changes"},{"location":"changelog/#version-13-2015-05-08","text":"Initial release.","title":"Version 1.3 (2015-05-08)"},{"location":"changelog/#dependencies","text":"","title":"Dependencies"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"dev-env/","text":"Dev Environment for LeakCanary contributors \u00b6 Setup \u00b6 Download Android Studio We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles Build with ./gradlew build Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-sample:connectedCheck Normal UI tests: ./gradlew leakcanary-support-fragment:connectedCheck Static Code Analysis \u00b6 LeakCanary uses tool Detekt for static Code analysis Analyze whole project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There\u2019s also a git pre-push hook that will run analysis automatically before pushing branch to remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in console and saved to `/moduleDir/build/reports/ Deploying locally \u00b6 To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.1-SNAPSHOT' } repositories { mavenLocal() } Deploying the docs locally \u00b6 Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Dev Environment"},{"location":"dev-env/#dev-environment-for-leakcanary-contributors","text":"","title":"Dev Environment for LeakCanary contributors"},{"location":"dev-env/#setup","text":"Download Android Studio We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles Build with ./gradlew build Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-sample:connectedCheck Normal UI tests: ./gradlew leakcanary-support-fragment:connectedCheck","title":"Setup"},{"location":"dev-env/#static-code-analysis","text":"LeakCanary uses tool Detekt for static Code analysis Analyze whole project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There\u2019s also a git pre-push hook that will run analysis automatically before pushing branch to remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in console and saved to `/moduleDir/build/reports/","title":"Static Code Analysis"},{"location":"dev-env/#deploying-locally","text":"To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.1-SNAPSHOT' } repositories { mavenLocal() }","title":"Deploying locally"},{"location":"dev-env/#deploying-the-docs-locally","text":"Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Deploying the docs locally"},{"location":"faq/","text":"FAQ \u00b6 Can a leak be caused by the Android SDK? \u00b6 Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to ignore: AndroidReferenceMatchers . If you find a new one, please create an issue and follow these steps: Provide the entire leak trace information (reference key, device, etc), and use backticks (`) for formatting. Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions by switching branches on the GitHub mirror: android/platform_frameworks_base . Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed. If it\u2019s still happening, build a simple repro case. File an issue on b.android.com with the leak trace and the repro case. Create a PR in LeakCanary to update AndroidReferenceMatchers . Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it. How do I share a leak trace? \u00b6 Go to the leak screen, click the overflow menu and select Share Info . You can also find the leak trace in Logcat. How can I dig beyond the leak trace? \u00b6 Sometimes the leak trace isn\u2019t enough and you need to dig into a heap dump with MAT or YourKit . Go to a heap analysis screen, click the overflow menu and select Share Heap Dump . Here\u2019s how you can find the leaking instance in the heap dump: Look for all instances of leakcanary.KeyedWeakReference . For each of these, look at the key field. Find the KeyedWeakReference that has a key field equal to the reference key reported by LeakCanary. The referent field of that KeyedWeakReference is your leaking object. From then on, the matter is in your hands. A good start is to look at the shortest path to GC Roots (excluding weak references). How does LeakCanary get installed by only adding a dependency? \u00b6 On Android, content providers are created after the Application instance is created but before Application.onCreate() is called. The leakcanary-object-watcher-android artifact has a non exported ContentProvider defined in its AndroidManifest.xml file. When that ContentProvider is installed, it adds activity and fragment lifecycle listeners to the application. How many methods does LeakCanary add? \u00b6 0 . LeakCanary is a debug only library. How do I use the SNAPSHOT version? \u00b6 Update your dependencies to the latest SNAPSHOT (see build.gradle ): dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.1-SNAPSHOT' } Add Sonatype\u2019s snapshots repository: repositories { mavenCentral() maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } Status of the snapshot build: Who\u2019s behind LeakCanary? \u00b6 LeakCanary was created and open sourced by @pyricau , with many contributions from the community. Why is it called LeakCanary? \u00b6 The name LeakCanary is a reference to the expression canary in a coal mine , because LeakCanary is a sentinel used to detect risks by providing advance warning of a danger. Props to @edenman for suggesting it! Who made the logo? \u00b6 @pyricau quickly made the first version of the logo. It was based on cliparts from Android Asset Studio , mixed with the selection from a photo of a Canary. The exclamation mark means danger, the shield stands for protection, and the bird, well, is a canary. @romainguy turned the ugly logo into a nice vector asset . @flickator designed a much nicer logo for LeakCanary 2.0!","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#can-a-leak-be-caused-by-the-android-sdk","text":"Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to ignore: AndroidReferenceMatchers . If you find a new one, please create an issue and follow these steps: Provide the entire leak trace information (reference key, device, etc), and use backticks (`) for formatting. Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions by switching branches on the GitHub mirror: android/platform_frameworks_base . Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed. If it\u2019s still happening, build a simple repro case. File an issue on b.android.com with the leak trace and the repro case. Create a PR in LeakCanary to update AndroidReferenceMatchers . Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it.","title":"Can a leak be caused by the Android SDK?"},{"location":"faq/#how-do-i-share-a-leak-trace","text":"Go to the leak screen, click the overflow menu and select Share Info . You can also find the leak trace in Logcat.","title":"How do I share a leak trace?"},{"location":"faq/#how-can-i-dig-beyond-the-leak-trace","text":"Sometimes the leak trace isn\u2019t enough and you need to dig into a heap dump with MAT or YourKit . Go to a heap analysis screen, click the overflow menu and select Share Heap Dump . Here\u2019s how you can find the leaking instance in the heap dump: Look for all instances of leakcanary.KeyedWeakReference . For each of these, look at the key field. Find the KeyedWeakReference that has a key field equal to the reference key reported by LeakCanary. The referent field of that KeyedWeakReference is your leaking object. From then on, the matter is in your hands. A good start is to look at the shortest path to GC Roots (excluding weak references).","title":"How can I dig beyond the leak trace?"},{"location":"faq/#how-does-leakcanary-get-installed-by-only-adding-a-dependency","text":"On Android, content providers are created after the Application instance is created but before Application.onCreate() is called. The leakcanary-object-watcher-android artifact has a non exported ContentProvider defined in its AndroidManifest.xml file. When that ContentProvider is installed, it adds activity and fragment lifecycle listeners to the application.","title":"How does LeakCanary get installed by only adding a dependency?"},{"location":"faq/#how-many-methods-does-leakcanary-add","text":"0 . LeakCanary is a debug only library.","title":"How many methods does LeakCanary add?"},{"location":"faq/#how-do-i-use-the-snapshot-version","text":"Update your dependencies to the latest SNAPSHOT (see build.gradle ): dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.1-SNAPSHOT' } Add Sonatype\u2019s snapshots repository: repositories { mavenCentral() maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } Status of the snapshot build:","title":"How do I use the SNAPSHOT version?"},{"location":"faq/#whos-behind-leakcanary","text":"LeakCanary was created and open sourced by @pyricau , with many contributions from the community.","title":"Who's behind LeakCanary?"},{"location":"faq/#why-is-it-called-leakcanary","text":"The name LeakCanary is a reference to the expression canary in a coal mine , because LeakCanary is a sentinel used to detect risks by providing advance warning of a danger. Props to @edenman for suggesting it!","title":"Why is it called LeakCanary?"},{"location":"faq/#who-made-the-logo","text":"@pyricau quickly made the first version of the logo. It was based on cliparts from Android Asset Studio , mixed with the selection from a photo of a Canary. The exclamation mark means danger, the shield stands for protection, and the bird, well, is a canary. @romainguy turned the ugly logo into a nice vector asset . @flickator designed a much nicer logo for LeakCanary 2.0!","title":"Who made the logo?"},{"location":"fundamentals/","text":"Fundamentals \u00b6 What is a memory leak? \u00b6 In a Java based runtime, a memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. As a result, the memory allocated for that object cannot be reclaimed, eventually leading to an OutOfMemoryError crash. For example, an Android activity instance is no longer needed after its onDestroy() method is called, and storing a reference to that activity in a static field would prevent it from being garbage collected. Common causes for memory leaks \u00b6 Most memory leaks are caused by bugs related to the lifecycle of objects. Here are a few common Android mistakes: Storing an Activity context as a field in an object that survives activity recreation due to configuration changes. Registering a listener, broadcast receiver or RxJava subscription which references an object with lifecycle, and forgetting to unregister when the lifecycle reaches its end. Storing a view in a static field, and not clearing that field when the view is detached. Why should I use LeakCanary? \u00b6 Memory leaks are very common in Android apps and the accumulation of small memory leaks causes apps to run out of memory and crash with an OutOfMemoryError (OOM). When we first enabled LeakCanary in the Square Point Of Sale app, we were able to find and fix several leaks and reduced the OOM crash rate by 94% . Info Most crash reporting tools do not correctly report OOMs . When memory is low because of memory leak accumulation, an OOM can be thrown from anywhere in the app code, which means every OOM has a different stacktrace. So instead of one crash entry with a 1000 crashes, those get reported as 1000 distinct crashes and hide in the long tail of low occuring crashes. How does LeakCanary work? \u00b6 Detecting retained objects \u00b6 The foundation of LeakCanary is a library called ObjectWatcher Android . It hooks into the Android lifecycle to automatically detect when activities and fragments are destroyed and should be garbage collected. These destroyed objects are passed to an ObjectWatcher , which holds weak references to them. You can also watch any objects that is no longer needed, for example a detached view, a destroyed presenter, etc. AppWatcher . objectWatcher . watch ( myDetachedView ) If the weak references aren\u2019t cleared after waiting 5 seconds and running the garbage collector, the watched objects are considered retained , and potentially leaking. LeakCanary logs this to Logcat: D LeakCanary: Watching instance of com.example.leakcanary.MainActivity // 5 seconds later... D LeakCanary: Found 1 retained object LeakCanary waits for the count of retained objects to reach a threshold before dumping the heap, and displays a notification with the latest count. Info The default threshold is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . If you see the retained objects notification and then put the app in background (for example by pressing the Home button), then the threshold changes from 5 to 1 and LeakCanary dumps the heap immediately. Tapping the notification forces LeakCanary to dump the heap immediately. Dumping the heap \u00b6 When the count of retained objects reaches a threshold, LeakCanary dumps the Java heap into a .hprof file stored onto the Android file system. This freezes the app for a short amount of time, during which LeakCanary displays the following toast: Analyzing the heap \u00b6 LeakCanary parses the .hprof file using Shark and locates the retained objects in that heap dump. If the retained objects cannot be found then they were most likely garbage collected by the time the heap was dumped: For each retained object, LeakCanary finds the chain of references that prevents retained objects from being garbage collected: the leak trace . Leak trace is another name for the shortest strong reference path from garbage collection roots to a retained object . Once a leak trace is determined, LeakCanary uses its built-in knowledge of the Android framework to deduct which objects in the leak trace are leaking (see below How do I fix a memory leak? ). When the analysis is done, LeakCanary displays a notification that can be tapped to see the analysis result: Info Using the leak status information, LeakCanary narrows down the reference chain to a sub chain of possible leak causes, and displays the result. Leaks that have the same causal chain are considered to be the same leak, so leaks are grouped by identical sub chain. This is how LeakCanary determines whether a leak is new or not. How do I fix a memory leak? \u00b6 For each leaking object, LeakCanary computes a leak trace and displays it in its UI: The leak trace is also logged to Logcat: \u252c \u251c\u2500 leakcanary.internal.InternalLeakCanary \u2502 Leaking: NO (it's a GC root and a class is never leaking) \u2502 \u2193 static InternalLeakCanary.application \u251c\u2500 com.example.leakcanary.ExampleApplication \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] \u2502 Leaking: UNKNOWN \u2502 \u2193 array Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView \u2502 Leaking: YES (View detached and has parent) \u2502 View#mAttachInfo is null (view detached) \u2502 View#mParent is set \u2502 View.mWindowAttachCount=1 \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity \u200b Leaking: YES (RefWatcher was watching this and MainActivity#mDestroyed is true) Objects and references \u00b6 \u251c\u2500 android.widget.TextView Each node in the leak trace is a Java object and is either a class, an object array or an instance. \u2502 \u2193 TextView.mContext Going down, each node has a reference to the next node. In the UI, that reference is in purple . In the Logcat representation, the reference is on the line that starts with a down arrow. GC Root \u00b6 \u252c \u251c\u2500 leakcanary.internal.InternalLeakCanary \u2502 Leaking: NO (it's a GC root and a class is never leaking) At the top of the leak trace is a garbage-collection (GC) root. GC roots are special objects that are always reachable. There are four kinds of GC roots worth mentioning: Local variables , which belong to the stack of a thread. Instances of active Java threads . Classes , which never unload on Android. Native references , which are controlled by native code. Leaking object \u00b6 \u2570\u2192 com.example.leakcanary.MainActivity \u200b Leaking: YES (RefWatcher was watching this and MainActivity#mDestroyed is true) At the bottom of the leak trace is the leaking object. This object was passed to AppWatcher.objectWatcher to confirm it would be garbage collected, and it ended up not being garbage collected which triggered LeakCanary. Chain of references \u00b6 ... \u2502 \u2193 static InternalLeakCanary.application ... \u2502 \u2193 ExampleApplication.leakedViews ... \u2502 \u2193 ArrayList.elementData ... \u2502 \u2193 array Object[].[0] ... \u2502 \u2193 TextView.mContext ... The chain of references from the GC root to the leaking object is what is preventing the leaking object from being garbage collected. If you can identify the reference that should not exist at that point in time, then you can figure out why it\u2019s incorrectly still set and then fix the memory leak. Heuristics and labels \u00b6 \u251c\u2500 android.widget.TextView \u2502 Leaking: YES (View detached and has parent) \u2502 View#mAttachInfo is null (view detached) \u2502 View#mParent is set \u2502 View.mWindowAttachCount=1 LeakCanary runs heuristics to determine the lifecycle state of the nodes of the leak trace, and therefore whether they are leaking or not. For example, if a view has View#mAttachInfo = null and mParent != null then it is detached yet has a parent, so that view is probably leaking. In the leak trace, for each node you\u2019ll see Leaking: YES / NO / UNKNOWN with an explanation in parenthesis. LeakCanary can also surface extra information about the state of a node, e.g. View.mWindowAttachCount=1 . LeakCanary comes with a set of default heuristics: AndroidObjectInspectors . You can add your own heuristics by updating LeakCanary.Config.objectInspectors (see the recipe ). Narrowing down the cause of a leak \u00b6 \u252c \u251c\u2500 android.provider.FontsContract \u2502 Leaking: NO (ExampleApplication\u2193 is not leaking and a class is never leaking) \u2502 GC Root: System class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication \u2502 Leaking: NO (Application is a singleton) \u2502 ExampleApplication does not wrap an activity context \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] \u2502 Leaking: UNKNOWN \u2502 \u2193 array Object[].[1] \u2502 ~~~ \u251c\u2500 android.widget.TextView \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity \u200b Leaking: YES (TextView\u2191 is leaking and Activity#mDestroyed is true and ObjectWatcher was watching this) If a node is not leaking, then any prior reference that points to it is not the source of the leak, and also not leaking. Similarly, if a node is leaking then any node down the leak trace is also leaking. From that, we can deduce that the leak is caused by a reference that is after the last Leaking: NO and before the first Leaking: YES . LeakCanary highlights those references with a red underline in the UI, or a ~~~~ underline in the Logcat representation. These highlighted references are the only possible causes of the leak . These are the references you should spend time investigating. In this example, the last Leaking: NO is on com.example.leakcanary.ExampleApplication and the first Leaking: YES is on android.widget.TextView , so the leak is caused by one of the 3 references in between: ... \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ ... \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ ... \u2502 \u2193 array Object[].[0] \u2502 ~~~ ... Looking at the source , we can see that ExampleApplication has a list field: open class ExampleApplication : Application() { val leakedViews = mutableListOf<View>() } It\u2019s unlikely that there\u2019s a bug in the ArrayList implementation itself, so the leak happens because we\u2019re adding views to ExampleApplication.leakedViews . If we stop doing that, we\u2019ve fixed the leak! Asking for help with a leak \u00b6 If you cannot figure out a leak, please do not file an issue . Instead, create a Stack Overflow question using the leakcanary tag. LeakCanary artifacts \u00b6 LeakCanary is released as several libraries: Shark The heap analyzer that powers LeakCanary. See Shark for details. ObjectWatcher Used to watch retained objects and check if they become weakly reachable. Suitable for release builds. Artifact id: com.squareup.leakcanary:leakcanary-object-watcher . ObjectWatcher Android Automatically detects retained destroyed activities and fragments. Suitable for release builds. Artifact id: com.squareup.leakcanary:leakcanary-object-watcher-android . LeakCanary Dumps the heap and analyzes it. Currently only suitable for debug builds. Depends on ObjectWatcher Android. Artifact id: com.squareup.leakcanary:leakcanary-android . LeakCanary for Instrumentation tests Fails tests if a leak is detected. Only suitable for Instrumentation tests. Configures LeakCanary to wait for the end of tests before dumping the heap. Artifact id: com.squareup.leakcanary:leakcanary-android-instrumentation . See Running LeakCanary in instrumentation tests . LeakCanary Android separate process Enables running LeakCanary separately from the main app process. Artifact id: com.squareup.leakcanary:leakcanary-android-process (as a replacement for com.squareup.leakcanary:leakcanary-android ). See Running the LeakCanary analysis in a separate process .","title":"Fundamentals"},{"location":"fundamentals/#fundamentals","text":"","title":"Fundamentals"},{"location":"fundamentals/#what-is-a-memory-leak","text":"In a Java based runtime, a memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. As a result, the memory allocated for that object cannot be reclaimed, eventually leading to an OutOfMemoryError crash. For example, an Android activity instance is no longer needed after its onDestroy() method is called, and storing a reference to that activity in a static field would prevent it from being garbage collected.","title":"What is a memory leak?"},{"location":"fundamentals/#common-causes-for-memory-leaks","text":"Most memory leaks are caused by bugs related to the lifecycle of objects. Here are a few common Android mistakes: Storing an Activity context as a field in an object that survives activity recreation due to configuration changes. Registering a listener, broadcast receiver or RxJava subscription which references an object with lifecycle, and forgetting to unregister when the lifecycle reaches its end. Storing a view in a static field, and not clearing that field when the view is detached.","title":"Common causes for memory leaks"},{"location":"fundamentals/#why-should-i-use-leakcanary","text":"Memory leaks are very common in Android apps and the accumulation of small memory leaks causes apps to run out of memory and crash with an OutOfMemoryError (OOM). When we first enabled LeakCanary in the Square Point Of Sale app, we were able to find and fix several leaks and reduced the OOM crash rate by 94% . Info Most crash reporting tools do not correctly report OOMs . When memory is low because of memory leak accumulation, an OOM can be thrown from anywhere in the app code, which means every OOM has a different stacktrace. So instead of one crash entry with a 1000 crashes, those get reported as 1000 distinct crashes and hide in the long tail of low occuring crashes.","title":"Why should I use LeakCanary?"},{"location":"fundamentals/#how-does-leakcanary-work","text":"","title":"How does LeakCanary work?"},{"location":"fundamentals/#detecting-retained-objects","text":"The foundation of LeakCanary is a library called ObjectWatcher Android . It hooks into the Android lifecycle to automatically detect when activities and fragments are destroyed and should be garbage collected. These destroyed objects are passed to an ObjectWatcher , which holds weak references to them. You can also watch any objects that is no longer needed, for example a detached view, a destroyed presenter, etc. AppWatcher . objectWatcher . watch ( myDetachedView ) If the weak references aren\u2019t cleared after waiting 5 seconds and running the garbage collector, the watched objects are considered retained , and potentially leaking. LeakCanary logs this to Logcat: D LeakCanary: Watching instance of com.example.leakcanary.MainActivity // 5 seconds later... D LeakCanary: Found 1 retained object LeakCanary waits for the count of retained objects to reach a threshold before dumping the heap, and displays a notification with the latest count. Info The default threshold is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . If you see the retained objects notification and then put the app in background (for example by pressing the Home button), then the threshold changes from 5 to 1 and LeakCanary dumps the heap immediately. Tapping the notification forces LeakCanary to dump the heap immediately.","title":"Detecting retained objects"},{"location":"fundamentals/#dumping-the-heap","text":"When the count of retained objects reaches a threshold, LeakCanary dumps the Java heap into a .hprof file stored onto the Android file system. This freezes the app for a short amount of time, during which LeakCanary displays the following toast:","title":"Dumping the heap"},{"location":"fundamentals/#analyzing-the-heap","text":"LeakCanary parses the .hprof file using Shark and locates the retained objects in that heap dump. If the retained objects cannot be found then they were most likely garbage collected by the time the heap was dumped: For each retained object, LeakCanary finds the chain of references that prevents retained objects from being garbage collected: the leak trace . Leak trace is another name for the shortest strong reference path from garbage collection roots to a retained object . Once a leak trace is determined, LeakCanary uses its built-in knowledge of the Android framework to deduct which objects in the leak trace are leaking (see below How do I fix a memory leak? ). When the analysis is done, LeakCanary displays a notification that can be tapped to see the analysis result: Info Using the leak status information, LeakCanary narrows down the reference chain to a sub chain of possible leak causes, and displays the result. Leaks that have the same causal chain are considered to be the same leak, so leaks are grouped by identical sub chain. This is how LeakCanary determines whether a leak is new or not.","title":"Analyzing the heap"},{"location":"fundamentals/#how-do-i-fix-a-memory-leak","text":"For each leaking object, LeakCanary computes a leak trace and displays it in its UI: The leak trace is also logged to Logcat: \u252c \u251c\u2500 leakcanary.internal.InternalLeakCanary \u2502 Leaking: NO (it's a GC root and a class is never leaking) \u2502 \u2193 static InternalLeakCanary.application \u251c\u2500 com.example.leakcanary.ExampleApplication \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] \u2502 Leaking: UNKNOWN \u2502 \u2193 array Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView \u2502 Leaking: YES (View detached and has parent) \u2502 View#mAttachInfo is null (view detached) \u2502 View#mParent is set \u2502 View.mWindowAttachCount=1 \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity \u200b Leaking: YES (RefWatcher was watching this and MainActivity#mDestroyed is true)","title":"How do I fix a memory leak?"},{"location":"fundamentals/#objects-and-references","text":"\u251c\u2500 android.widget.TextView Each node in the leak trace is a Java object and is either a class, an object array or an instance. \u2502 \u2193 TextView.mContext Going down, each node has a reference to the next node. In the UI, that reference is in purple . In the Logcat representation, the reference is on the line that starts with a down arrow.","title":"Objects and references"},{"location":"fundamentals/#gc-root","text":"\u252c \u251c\u2500 leakcanary.internal.InternalLeakCanary \u2502 Leaking: NO (it's a GC root and a class is never leaking) At the top of the leak trace is a garbage-collection (GC) root. GC roots are special objects that are always reachable. There are four kinds of GC roots worth mentioning: Local variables , which belong to the stack of a thread. Instances of active Java threads . Classes , which never unload on Android. Native references , which are controlled by native code.","title":"GC Root"},{"location":"fundamentals/#leaking-object","text":"\u2570\u2192 com.example.leakcanary.MainActivity \u200b Leaking: YES (RefWatcher was watching this and MainActivity#mDestroyed is true) At the bottom of the leak trace is the leaking object. This object was passed to AppWatcher.objectWatcher to confirm it would be garbage collected, and it ended up not being garbage collected which triggered LeakCanary.","title":"Leaking object"},{"location":"fundamentals/#chain-of-references","text":"... \u2502 \u2193 static InternalLeakCanary.application ... \u2502 \u2193 ExampleApplication.leakedViews ... \u2502 \u2193 ArrayList.elementData ... \u2502 \u2193 array Object[].[0] ... \u2502 \u2193 TextView.mContext ... The chain of references from the GC root to the leaking object is what is preventing the leaking object from being garbage collected. If you can identify the reference that should not exist at that point in time, then you can figure out why it\u2019s incorrectly still set and then fix the memory leak.","title":"Chain of references"},{"location":"fundamentals/#heuristics-and-labels","text":"\u251c\u2500 android.widget.TextView \u2502 Leaking: YES (View detached and has parent) \u2502 View#mAttachInfo is null (view detached) \u2502 View#mParent is set \u2502 View.mWindowAttachCount=1 LeakCanary runs heuristics to determine the lifecycle state of the nodes of the leak trace, and therefore whether they are leaking or not. For example, if a view has View#mAttachInfo = null and mParent != null then it is detached yet has a parent, so that view is probably leaking. In the leak trace, for each node you\u2019ll see Leaking: YES / NO / UNKNOWN with an explanation in parenthesis. LeakCanary can also surface extra information about the state of a node, e.g. View.mWindowAttachCount=1 . LeakCanary comes with a set of default heuristics: AndroidObjectInspectors . You can add your own heuristics by updating LeakCanary.Config.objectInspectors (see the recipe ).","title":"Heuristics and labels"},{"location":"fundamentals/#narrowing-down-the-cause-of-a-leak","text":"\u252c \u251c\u2500 android.provider.FontsContract \u2502 Leaking: NO (ExampleApplication\u2193 is not leaking and a class is never leaking) \u2502 GC Root: System class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication \u2502 Leaking: NO (Application is a singleton) \u2502 ExampleApplication does not wrap an activity context \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] \u2502 Leaking: UNKNOWN \u2502 \u2193 array Object[].[1] \u2502 ~~~ \u251c\u2500 android.widget.TextView \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity \u200b Leaking: YES (TextView\u2191 is leaking and Activity#mDestroyed is true and ObjectWatcher was watching this) If a node is not leaking, then any prior reference that points to it is not the source of the leak, and also not leaking. Similarly, if a node is leaking then any node down the leak trace is also leaking. From that, we can deduce that the leak is caused by a reference that is after the last Leaking: NO and before the first Leaking: YES . LeakCanary highlights those references with a red underline in the UI, or a ~~~~ underline in the Logcat representation. These highlighted references are the only possible causes of the leak . These are the references you should spend time investigating. In this example, the last Leaking: NO is on com.example.leakcanary.ExampleApplication and the first Leaking: YES is on android.widget.TextView , so the leak is caused by one of the 3 references in between: ... \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ ... \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ ... \u2502 \u2193 array Object[].[0] \u2502 ~~~ ... Looking at the source , we can see that ExampleApplication has a list field: open class ExampleApplication : Application() { val leakedViews = mutableListOf<View>() } It\u2019s unlikely that there\u2019s a bug in the ArrayList implementation itself, so the leak happens because we\u2019re adding views to ExampleApplication.leakedViews . If we stop doing that, we\u2019ve fixed the leak!","title":"Narrowing down the cause of a leak"},{"location":"fundamentals/#asking-for-help-with-a-leak","text":"If you cannot figure out a leak, please do not file an issue . Instead, create a Stack Overflow question using the leakcanary tag.","title":"Asking for help with a leak"},{"location":"fundamentals/#leakcanary-artifacts","text":"LeakCanary is released as several libraries: Shark The heap analyzer that powers LeakCanary. See Shark for details. ObjectWatcher Used to watch retained objects and check if they become weakly reachable. Suitable for release builds. Artifact id: com.squareup.leakcanary:leakcanary-object-watcher . ObjectWatcher Android Automatically detects retained destroyed activities and fragments. Suitable for release builds. Artifact id: com.squareup.leakcanary:leakcanary-object-watcher-android . LeakCanary Dumps the heap and analyzes it. Currently only suitable for debug builds. Depends on ObjectWatcher Android. Artifact id: com.squareup.leakcanary:leakcanary-android . LeakCanary for Instrumentation tests Fails tests if a leak is detected. Only suitable for Instrumentation tests. Configures LeakCanary to wait for the end of tests before dumping the heap. Artifact id: com.squareup.leakcanary:leakcanary-android-instrumentation . See Running LeakCanary in instrumentation tests . LeakCanary Android separate process Enables running LeakCanary separately from the main app process. Artifact id: com.squareup.leakcanary:leakcanary-android-process (as a replacement for com.squareup.leakcanary:leakcanary-android ). See Running the LeakCanary analysis in a separate process .","title":"LeakCanary artifacts"},{"location":"getting_started/","text":"Getting started \u00b6 Add LeakCanary to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0' } That\u2019s it, there is no code change needed! You can confirm that LeakCanary is running on startup by filtering on the LeakCanary tag in Logcat: D LeakCanary: Installing AppWatcher Info To upgrade from LeakCanary 1.6 , follow the upgrade guide . What\u2019s next? Learn the Fundamentals Try the code recipes Read the FAQ , e.g. How does LeakCanary get installed by only adding a dependency?","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Add LeakCanary to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0' } That\u2019s it, there is no code change needed! You can confirm that LeakCanary is running on startup by filtering on the LeakCanary tag in Logcat: D LeakCanary: Installing AppWatcher Info To upgrade from LeakCanary 1.6 , follow the upgrade guide . What\u2019s next? Learn the Fundamentals Try the code recipes Read the FAQ , e.g. How does LeakCanary get installed by only adding a dependency?","title":"Getting started"},{"location":"how_to_help/","text":"How to help \u00b6 You are most welcome to contribute code, answer StackOverflow questions , help manage GitHub issues and review pull requests. If you would like to contribute code to LeakCanary you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"how_to_help/#how-to-help","text":"You are most welcome to contribute code, answer StackOverflow questions , help manage GitHub issues and review pull requests. If you would like to contribute code to LeakCanary you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"recipes/","text":"Code Recipes \u00b6 Bug If you think a recipe might be missing or you\u2019re not sure that what you\u2019re trying to achieve is possible with the current APIs, please file an issue . Your feedback help us make LeakCanary better for the entire community. Watching objects with a lifecycle \u00b6 In your application, you may have other objects with a lifecycle, such as fragments, services, Dagger components, etc. Use AppWatcher.objectWatcher to watch instances that should be garbage collected: class MyService : Service { // ... override fun onDestroy () { super . onDestroy () AppWatcher . objectWatcher . watch ( this ) } } Configuration \u00b6 LeakCanary has a default configuration that should work well for most apps. You can also customize it to your needs. The LeakCanary configuration is held by two singleton objects ( AppWatcher and LeakCanary ) and can be updated at any time. Most developers configure LeakCanary in their debug Application class: class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } Info You can create a debug application class in your src/debug/java folder. Don\u2019t forget to also register it in src/debug/AndroidManifest.xml . To customize the detection of retained objects at runtime, update AppWatcher.config : AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false) To customize the heap dumping & analysis, update LeakCanary.config : LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) The LeakCanary UI can be configured by overriding the following resources: mipmap/leak_canary_icon see Icon and label string/leak_canary_display_activity_label see Icon and label bool/leak_canary_add_dynamic_shortcut see Disabling LeakCanary bool/leak_canary_add_launcher_icon see Disabling LeakCanary layout/leak_canary_heap_dump_toast the layout for the toast shown when the heap is dumped Disabling LeakCanary \u00b6 Sometimes it\u2019s necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you\u2019re trying to achieve: Create a build variant that does not include the LeakCanary dependencies, see Setting up LeakCanary for different product flavors . Disable the tracking of retained objects: AppWatcher.config = AppWatcher.config.copy(enabled = false) . Disable the heap dumping & analysis: LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . Hide the leak display activity launcher icon: override R.bool.leak_canary_add_launcher_icon or call LeakCanary.showLeakDisplayActivityLauncherIcon(false) Info When you set AppWatcher.config.enabled to false, AppWatcher.objectWatcher will stop creating weak references to destroyed objects. If instead you set LeakCanary.Config.dumpHeap to false, AppWatcher.objectWatcher will still keep track of retained objects, and LeakCanary will look for these objects when you change LeakCanary.Config.dumpHeap back to true. Counting retained instances in production \u00b6 The com.squareup.leakcanary:leakcanary-android dependency should only be used in debug builds. It depends on com.squareup.leakcanary:leakcanary-object-watcher-android which you can use in production to track and count retained instances. In your build.gradle : dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.0-beta-5' } In your leak reporting code: val retainedInstanceCount = AppWatcher . objectWatcher . retainedObjectCount Running LeakCanary in instrumentation tests \u00b6 Running leak detection in UI tests means you can detect memory leaks automatically in Continuous Integration prior to those leaks being merged into the codebase. However, as LeakCanary runs with a 5 seconds delay and freezes the VM to take a heap dump, this can introduce flakiness to the UI tests. Therefore LeakCanary automatically disables itself by setting LeakCanary.config.dumpHeap to false if it detects classes from the androidx.test dependency in the runtime classpath. If you run UI tests without androidx.test , we strongly advise that you set dumpHeap to false : LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . LeakCanary provides an artifact dedicated to detecting leaks in UI tests which provides a run listener that waits for the end of a test, and if the test succeeds then it look for retained objects, trigger a heap dump if needed and perform an analysis. To set it up, add the leakcanary-android-instrumentation dependency to your instrumentation tests: androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" Add the dedicated run listener to defaultConfig in your build.gradle : android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" } } Run the instrumentation tests: ./gradlew leakcanary-android-sample:connectedCheck You can extend FailTestOnLeakRunListener to customize the behavior. Icon and label \u00b6 The activity that displays leaks comes with a default icon and label, which you can change by providing R.mipmap.leak_canary_icon and R.string.leak_canary_display_activity_label in your app: res/ mipmap-hdpi/ leak_canary_icon.png mipmap-mdpi/ leak_canary_icon.png mipmap-xhdpi/ leak_canary_icon.png mipmap-xxhdpi/ leak_canary_icon.png mipmap-xxxhdpi/ leak_canary_icon.png mipmap-anydpi-v26/ leak_canary_icon.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"leak_canary_display_activity_label\" > MyLeaks </string> </resources> Uploading to a server \u00b6 You can change the default behavior to upload the analysis result to a server of your choosing. Create a custom OnHeapAnalyzedListener that delegates to DefaultOnHeapAnalyzedListener : class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } Set LeakCanary.config.onHeapAnalyzedListener : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader ()) } } Matching known library leaks \u00b6 Set LeakCanary.Config.referenceMatchers to a list that builds on top of AndroidReferenceMatchers.appDefaults : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( className = \"com.samsing.SomeSingleton\" , fieldName = \"sContext\" , description = \"SomeSingleton has a static field leaking a context.\" , patternApplies = { manufacturer == \"Samsing\" && sdkInt == 26 } ) ) } } Ignoring specific activities or fragment classes \u00b6 Sometimes a 3 rd party library provides its own activities or fragments which contain a number of bugs leading to leaks of those specific 3 rd party activities and fragments. You should push hard on that library to fix their memory leaks as it\u2019s directly impacting your application. That being said, until those are fixed, you have two options: Add the specific leaks as known library leaks (see Matching known library leaks ). LeakCanary will run when those leaks are detected and then report them as known library leaks. Disable LeakCanary automatic activity or fragment watching (e.g. AppWatcher.config = AppWatcher.config.copy(watchActivities = false) ) and then manually pass objects to AppWatcher.objectWatcher.watch . Identifying leaking objects and labeling objects \u00b6 class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val addObjectIdLabel = ObjectInspector { reporter -> reporter . addLabel ( \"Heap dump object id is ${reporter.heapObject.objectId}\" ) } val singletonsInspector = AppSingletonInspector ( \"com.example.MySingleton\" , \"com.example.OtherSingleton\" ) val mmvmInspector = ObjectInspector { reporter -> reporter . whenInstanceOf ( \"com.mmvm.SomeViewModel\" ) { instance -> val destroyedField = instance [ \"com.mmvm.SomeViewModel\" , \"destroyed\" ] !! if ( destroyedField . value . asBoolean !! ) { reportLeaking ( \"SomeViewModel.destroyed is true\" ) } else { reportNotLeaking ( \"SomeViewModel.destroyed is false\" ) } } } LeakCanary . config = LeakCanary . config . copy ( objectInspectors = AndroidObjectInspectors . appDefaults + listOf ( addObjectIdLabel , singletonsInspector , mmvmInspector ) ) } } Running the LeakCanary analysis in a separate process \u00b6 LeakCanary runs in your main app process. LeakCanary 2 is optimized to keep memory usage low while analysing and runs in a background thread with priority Process.THREAD_PRIORITY_BACKGROUND . If you find that LeakCanary is still using too much memory or impacting the app process performance, you can configure it to run the analysis in a separate process. All you have to do is replace the leakcanary-android depedency with leakcanary-android-process : dependencies { // debugImplementation 'com.squareup.leakcanary:leakcanary-android:${version}' debugImplementation 'com.squareup.leakcanary:leakcanary-android-process:${version}' } You can call LeakCanaryProcess.isInAnalyzerProcess to check if your Application class is being created in the LeakCanary process. This is useful when configuring libraries like Firebase that may crash when running in an unexpected process. Setting up LeakCanary for different product flavors \u00b6 You can setup LeakCanary to run in a specific product flavors of your app. For example, create: android { flavorDimensions \"default\" productFlavors { prod { // ... } qa { // ... } dev { // ... } } } Then, define a custom configuration for the flavor for which you want to enable LeakCanary: android { // ... } configurations { devDebugImplementation {} } You can now add the LeakCanary dependency for that configuration: dependencies { devDebugImplementation \"com.squareup.leakcanary:leakcanary-android:${version}\" } Extracting metadata from the heap dump \u00b6 LeakCanary.Config.metatadaExtractor extracts metadata from a heap dump. The metadata is then available in HeapAnalysisSuccess.metadata . LeakCanary.Config.metatadaExtractor defaults to AndroidMetadataExtractor but you can replace it to extract additional metadata from the hprof. For example, if you want to include the app version name in your heap analysis reports, you need to first store it in memory (e.g. in a static field) and then you can retrieve it in MetadataExtractor . class DebugExampleApplication : ExampleApplication () { companion object { @JvmStatic lateinit var savedVersionName : String } override fun onCreate () { super . onCreate () val packageInfo = packageManager . getPackageInfo ( packageName , 0 ) savedVersionName = packageInfo . versionName LeakCanary . config = LeakCanary . config . copy ( metatadaExtractor = MetadataExtractor { graph -> val companionClass = graph . findClassByName ( \"com.example.DebugExampleApplication\" ) !! val versionNameField = companionClass [ \"savedVersionName\" ] !! val versionName = versionNameField . valueAsInstance !! . readAsJavaString () !! val defaultMetadata = AndroidMetadataExtractor . extractMetadata ( graph ) mapOf ( \"App Version Name\" to versionName ) + defaultMetadata }) } }","title":"Code recipes"},{"location":"recipes/#code-recipes","text":"Bug If you think a recipe might be missing or you\u2019re not sure that what you\u2019re trying to achieve is possible with the current APIs, please file an issue . Your feedback help us make LeakCanary better for the entire community.","title":"Code Recipes"},{"location":"recipes/#watching-objects-with-a-lifecycle","text":"In your application, you may have other objects with a lifecycle, such as fragments, services, Dagger components, etc. Use AppWatcher.objectWatcher to watch instances that should be garbage collected: class MyService : Service { // ... override fun onDestroy () { super . onDestroy () AppWatcher . objectWatcher . watch ( this ) } }","title":"Watching objects with a lifecycle"},{"location":"recipes/#configuration","text":"LeakCanary has a default configuration that should work well for most apps. You can also customize it to your needs. The LeakCanary configuration is held by two singleton objects ( AppWatcher and LeakCanary ) and can be updated at any time. Most developers configure LeakCanary in their debug Application class: class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } Info You can create a debug application class in your src/debug/java folder. Don\u2019t forget to also register it in src/debug/AndroidManifest.xml . To customize the detection of retained objects at runtime, update AppWatcher.config : AppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false) To customize the heap dumping & analysis, update LeakCanary.config : LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) The LeakCanary UI can be configured by overriding the following resources: mipmap/leak_canary_icon see Icon and label string/leak_canary_display_activity_label see Icon and label bool/leak_canary_add_dynamic_shortcut see Disabling LeakCanary bool/leak_canary_add_launcher_icon see Disabling LeakCanary layout/leak_canary_heap_dump_toast the layout for the toast shown when the heap is dumped","title":"Configuration"},{"location":"recipes/#disabling-leakcanary","text":"Sometimes it\u2019s necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you\u2019re trying to achieve: Create a build variant that does not include the LeakCanary dependencies, see Setting up LeakCanary for different product flavors . Disable the tracking of retained objects: AppWatcher.config = AppWatcher.config.copy(enabled = false) . Disable the heap dumping & analysis: LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . Hide the leak display activity launcher icon: override R.bool.leak_canary_add_launcher_icon or call LeakCanary.showLeakDisplayActivityLauncherIcon(false) Info When you set AppWatcher.config.enabled to false, AppWatcher.objectWatcher will stop creating weak references to destroyed objects. If instead you set LeakCanary.Config.dumpHeap to false, AppWatcher.objectWatcher will still keep track of retained objects, and LeakCanary will look for these objects when you change LeakCanary.Config.dumpHeap back to true.","title":"Disabling LeakCanary"},{"location":"recipes/#counting-retained-instances-in-production","text":"The com.squareup.leakcanary:leakcanary-android dependency should only be used in debug builds. It depends on com.squareup.leakcanary:leakcanary-object-watcher-android which you can use in production to track and count retained instances. In your build.gradle : dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.0-beta-5' } In your leak reporting code: val retainedInstanceCount = AppWatcher . objectWatcher . retainedObjectCount","title":"Counting retained instances in production"},{"location":"recipes/#running-leakcanary-in-instrumentation-tests","text":"Running leak detection in UI tests means you can detect memory leaks automatically in Continuous Integration prior to those leaks being merged into the codebase. However, as LeakCanary runs with a 5 seconds delay and freezes the VM to take a heap dump, this can introduce flakiness to the UI tests. Therefore LeakCanary automatically disables itself by setting LeakCanary.config.dumpHeap to false if it detects classes from the androidx.test dependency in the runtime classpath. If you run UI tests without androidx.test , we strongly advise that you set dumpHeap to false : LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . LeakCanary provides an artifact dedicated to detecting leaks in UI tests which provides a run listener that waits for the end of a test, and if the test succeeds then it look for retained objects, trigger a heap dump if needed and perform an analysis. To set it up, add the leakcanary-android-instrumentation dependency to your instrumentation tests: androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" Add the dedicated run listener to defaultConfig in your build.gradle : android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" } } Run the instrumentation tests: ./gradlew leakcanary-android-sample:connectedCheck You can extend FailTestOnLeakRunListener to customize the behavior.","title":"Running LeakCanary in instrumentation tests"},{"location":"recipes/#icon-and-label","text":"The activity that displays leaks comes with a default icon and label, which you can change by providing R.mipmap.leak_canary_icon and R.string.leak_canary_display_activity_label in your app: res/ mipmap-hdpi/ leak_canary_icon.png mipmap-mdpi/ leak_canary_icon.png mipmap-xhdpi/ leak_canary_icon.png mipmap-xxhdpi/ leak_canary_icon.png mipmap-xxxhdpi/ leak_canary_icon.png mipmap-anydpi-v26/ leak_canary_icon.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"leak_canary_display_activity_label\" > MyLeaks </string> </resources>","title":"Icon and label"},{"location":"recipes/#uploading-to-a-server","text":"You can change the default behavior to upload the analysis result to a server of your choosing. Create a custom OnHeapAnalyzedListener that delegates to DefaultOnHeapAnalyzedListener : class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } Set LeakCanary.config.onHeapAnalyzedListener : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader ()) } }","title":"Uploading to a server"},{"location":"recipes/#matching-known-library-leaks","text":"Set LeakCanary.Config.referenceMatchers to a list that builds on top of AndroidReferenceMatchers.appDefaults : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( className = \"com.samsing.SomeSingleton\" , fieldName = \"sContext\" , description = \"SomeSingleton has a static field leaking a context.\" , patternApplies = { manufacturer == \"Samsing\" && sdkInt == 26 } ) ) } }","title":"Matching known library leaks"},{"location":"recipes/#ignoring-specific-activities-or-fragment-classes","text":"Sometimes a 3 rd party library provides its own activities or fragments which contain a number of bugs leading to leaks of those specific 3 rd party activities and fragments. You should push hard on that library to fix their memory leaks as it\u2019s directly impacting your application. That being said, until those are fixed, you have two options: Add the specific leaks as known library leaks (see Matching known library leaks ). LeakCanary will run when those leaks are detected and then report them as known library leaks. Disable LeakCanary automatic activity or fragment watching (e.g. AppWatcher.config = AppWatcher.config.copy(watchActivities = false) ) and then manually pass objects to AppWatcher.objectWatcher.watch .","title":"Ignoring specific activities or fragment classes"},{"location":"recipes/#identifying-leaking-objects-and-labeling-objects","text":"class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val addObjectIdLabel = ObjectInspector { reporter -> reporter . addLabel ( \"Heap dump object id is ${reporter.heapObject.objectId}\" ) } val singletonsInspector = AppSingletonInspector ( \"com.example.MySingleton\" , \"com.example.OtherSingleton\" ) val mmvmInspector = ObjectInspector { reporter -> reporter . whenInstanceOf ( \"com.mmvm.SomeViewModel\" ) { instance -> val destroyedField = instance [ \"com.mmvm.SomeViewModel\" , \"destroyed\" ] !! if ( destroyedField . value . asBoolean !! ) { reportLeaking ( \"SomeViewModel.destroyed is true\" ) } else { reportNotLeaking ( \"SomeViewModel.destroyed is false\" ) } } } LeakCanary . config = LeakCanary . config . copy ( objectInspectors = AndroidObjectInspectors . appDefaults + listOf ( addObjectIdLabel , singletonsInspector , mmvmInspector ) ) } }","title":"Identifying leaking objects and labeling objects"},{"location":"recipes/#running-the-leakcanary-analysis-in-a-separate-process","text":"LeakCanary runs in your main app process. LeakCanary 2 is optimized to keep memory usage low while analysing and runs in a background thread with priority Process.THREAD_PRIORITY_BACKGROUND . If you find that LeakCanary is still using too much memory or impacting the app process performance, you can configure it to run the analysis in a separate process. All you have to do is replace the leakcanary-android depedency with leakcanary-android-process : dependencies { // debugImplementation 'com.squareup.leakcanary:leakcanary-android:${version}' debugImplementation 'com.squareup.leakcanary:leakcanary-android-process:${version}' } You can call LeakCanaryProcess.isInAnalyzerProcess to check if your Application class is being created in the LeakCanary process. This is useful when configuring libraries like Firebase that may crash when running in an unexpected process.","title":"Running the LeakCanary analysis in a separate process"},{"location":"recipes/#setting-up-leakcanary-for-different-product-flavors","text":"You can setup LeakCanary to run in a specific product flavors of your app. For example, create: android { flavorDimensions \"default\" productFlavors { prod { // ... } qa { // ... } dev { // ... } } } Then, define a custom configuration for the flavor for which you want to enable LeakCanary: android { // ... } configurations { devDebugImplementation {} } You can now add the LeakCanary dependency for that configuration: dependencies { devDebugImplementation \"com.squareup.leakcanary:leakcanary-android:${version}\" }","title":"Setting up LeakCanary for different product flavors"},{"location":"recipes/#extracting-metadata-from-the-heap-dump","text":"LeakCanary.Config.metatadaExtractor extracts metadata from a heap dump. The metadata is then available in HeapAnalysisSuccess.metadata . LeakCanary.Config.metatadaExtractor defaults to AndroidMetadataExtractor but you can replace it to extract additional metadata from the hprof. For example, if you want to include the app version name in your heap analysis reports, you need to first store it in memory (e.g. in a static field) and then you can retrieve it in MetadataExtractor . class DebugExampleApplication : ExampleApplication () { companion object { @JvmStatic lateinit var savedVersionName : String } override fun onCreate () { super . onCreate () val packageInfo = packageManager . getPackageInfo ( packageName , 0 ) savedVersionName = packageInfo . versionName LeakCanary . config = LeakCanary . config . copy ( metatadaExtractor = MetadataExtractor { graph -> val companionClass = graph . findClassByName ( \"com.example.DebugExampleApplication\" ) !! val versionNameField = companionClass [ \"savedVersionName\" ] !! val versionName = versionNameField . valueAsInstance !! . readAsJavaString () !! val defaultMetadata = AndroidMetadataExtractor . extractMetadata ( graph ) mapOf ( \"App Version Name\" to versionName ) + defaultMetadata }) } }","title":"Extracting metadata from the heap dump"},{"location":"recorded-presentations/","text":"Shark: Diving into the guts of LeakCanary\u2019s Hprof parser LeakCanary 2: Leaner, Better, Faster, Kotliner! LeakCanary, then what? Nuking Nasty Memory Leaks Memory Leak Hunt , a live investigation. Installing LeakCanary (LeakCanary 1.5) How to use LeakCanary Your presentation should be here, please update this list! Any technical level welcome.","title":"Recorded Presentations"},{"location":"releasing/","text":"Releasing LeakCanary \u00b6 Create a local release branch from master git checkout master git pull git checkout -b release_2.1 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME = \"2.1\" Update the current version and next version in mkdocs.yml : extra: leak_canary: release: '2.1' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/api ./gradlew shark:dokka shark-android:dokka leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka shark-graph:dokka shark-hprof:dokka leakcanary-object-watcher-android:dokka shark-log:dokka leakcanary-object-watcher:dokka Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v2.0...master Take one last look git diff Commit all local changes git commit -am \"Prepare 2.1 release\" Perform a clean build ./gradlew clean build Create a tag and push it git tag v2.1 git push origin v2.1 Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff release_2.1 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME = \"2.0-alpha-4-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Go to Milestones , rename the current release to the version just released, and create a new Next Release milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v2.1) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Update the documentation to point to it. Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing"},{"location":"releasing/#releasing-leakcanary","text":"Create a local release branch from master git checkout master git pull git checkout -b release_2.1 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME = \"2.1\" Update the current version and next version in mkdocs.yml : extra: leak_canary: release: '2.1' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/api ./gradlew shark:dokka shark-android:dokka leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka shark-graph:dokka shark-hprof:dokka leakcanary-object-watcher-android:dokka shark-log:dokka leakcanary-object-watcher:dokka Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v2.0...master Take one last look git diff Commit all local changes git commit -am \"Prepare 2.1 release\" Perform a clean build ./gradlew clean build Create a tag and push it git tag v2.1 git push origin v2.1 Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff release_2.1 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME = \"2.0-alpha-4-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Go to Milestones , rename the current release to the version just released, and create a new Next Release milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v2.1) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Update the documentation to point to it. Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing LeakCanary"},{"location":"shark/","text":"Shark \ud83e\udd88 \u00b6 Shark : S m a r t H e a p A n a l y s i s R e p o r t s f o r K o t l i n Shark is the heap analyzer that powers LeakCanary 2. It\u2019s a Kotlin standalone heap analysis library that runs at high speed with a low memory footprint . Shark is released in layers: Shark Hprof : Read and write records in hprof files. Shark Graph : Navigate the heap object graph. Shark : Generate heap analysis reports. Shark Android : Android heuristics to generate tailored heap analysis reports. Shark CLI : Analyze the heap of debuggable apps installed on an Android device connected to your desktop. The output is similar to the output of LeakCanary, except you don\u2019t have to add the LeakCanary dependency to your app. LeakCanary : Builds on top. It automatically watches destroyed activities and fragments, triggers a heap dump, runs Shark Android and then displays the result. A few more things: Shark is built on top of Okio. Okio makes it easy to parse heap dumps efficiently. Shark is a 100% Kotlin library, and Kotlin is essential to its design, because Shark relies heavily on sealed classes and sequences to save memory. Shark has the unique ability to help narrow down the cause of memory leaks through platform specific heuristics . Shark is heavily tested (80% test coverage). Shark can run in both Java and Android VMs, with no other dependency than Okio and Kotlin. Shark can analyze both Java and Android VM hprof files. Shark CLI \u00b6 The Shark Command Line Interface (CLI) enables you to analyze heaps directly from your computer. It can dump the heap of an app installed on a connected Android device, analyze it, and even strip a heap dump of any sensitive data (e.g. PII, passwords or encryption keys) which is useful when sharing a heap dump. Download it here ! Usage instructions: $ ./bin/shark-cli Shark CLI ^`. .=\"\"=. ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / `~~~--__ \\ /\\ / { \\___----~~' `~~-_/'-=\\/=-'\\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / '. .' '._.' _|`~~`|_ /|\\ /|\\ Commands: [analyze-process, dump-process, analyze-hprof, strip-hprof] analyze-process: Dumps the heap for the provided process name, pulls the hprof file and analyzes it. USAGE: analyze-process PROCESS_PACKAGE_NAME dump-process: Dumps the heap for the provided process name and pulls the hprof file. USAGE: dump-process PROCESS_PACKAGE_NAME analyze-hprof: Analyzes the provided hprof file. USAGE: analyze-hprof HPROF_FILE_PATH strip-hprof: Replaces all primitive arrays from the provided hprof file with arrays of zeroes. USAGE: strip-hprof HPROF_FILE_PATH Shark code examples \u00b6 Reading records in a hprof file \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark-hprof:$sharkVersion' } // Prints all class and field names Hprof . open ( heapDumpFile ) . use { hprof -> hprof . reader . readHprofRecords ( recordTypes = setOf ( StringRecord :: class ), listener = OnHprofRecordListener { position , record -> println (( record as StringRecord ). string ) }) } Navigating the heap object graph \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark-graph:$sharkVersion' } // Prints all thread names Hprof . open ( heapDumpFile ) . use { hprof -> val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val threadClass = heapGraph . findClassByName ( \"java.lang.Thread\" ) !! val threadNames : Sequence < String > = threadClass . instances . map { instance -> val nameField = instance [ \"java.lang.Thread\" , \"name\" ] !! nameField . value . readAsJavaString () !! } threadNames . forEach { println ( it ) } } Generating a heap analysis report \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark:$sharkVersion' } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , leakFinders = listOf ( ObjectInspector { _ , reporter -> reporter . whenInstanceOf ( \"com.example.ThingWithLifecycle\" ) { instance -> val field = instance [ \"com.example.ThingWithLifecycle\" , \"destroyed\" ] !! val destroyed = field . value . asBoolean !! if ( destroyed ) { leakingReasons += \"ThingWithLifecycle.destroyed = true\" } } }) ) println ( analysis ) Generating an Android heap analysis report \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark-android:$sharkVersion' } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , referenceMatchers = AndroidReferenceMatchers . appDefaults , objectInspectors = AndroidObjectInspectors . appDefaults ) println ( analysis )","title":"Overview"},{"location":"shark/#shark","text":"Shark : S m a r t H e a p A n a l y s i s R e p o r t s f o r K o t l i n Shark is the heap analyzer that powers LeakCanary 2. It\u2019s a Kotlin standalone heap analysis library that runs at high speed with a low memory footprint . Shark is released in layers: Shark Hprof : Read and write records in hprof files. Shark Graph : Navigate the heap object graph. Shark : Generate heap analysis reports. Shark Android : Android heuristics to generate tailored heap analysis reports. Shark CLI : Analyze the heap of debuggable apps installed on an Android device connected to your desktop. The output is similar to the output of LeakCanary, except you don\u2019t have to add the LeakCanary dependency to your app. LeakCanary : Builds on top. It automatically watches destroyed activities and fragments, triggers a heap dump, runs Shark Android and then displays the result. A few more things: Shark is built on top of Okio. Okio makes it easy to parse heap dumps efficiently. Shark is a 100% Kotlin library, and Kotlin is essential to its design, because Shark relies heavily on sealed classes and sequences to save memory. Shark has the unique ability to help narrow down the cause of memory leaks through platform specific heuristics . Shark is heavily tested (80% test coverage). Shark can run in both Java and Android VMs, with no other dependency than Okio and Kotlin. Shark can analyze both Java and Android VM hprof files.","title":"Shark \ud83e\udd88"},{"location":"shark/#shark-cli","text":"The Shark Command Line Interface (CLI) enables you to analyze heaps directly from your computer. It can dump the heap of an app installed on a connected Android device, analyze it, and even strip a heap dump of any sensitive data (e.g. PII, passwords or encryption keys) which is useful when sharing a heap dump. Download it here ! Usage instructions: $ ./bin/shark-cli Shark CLI ^`. .=\"\"=. ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / `~~~--__ \\ /\\ / { \\___----~~' `~~-_/'-=\\/=-'\\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / '. .' '._.' _|`~~`|_ /|\\ /|\\ Commands: [analyze-process, dump-process, analyze-hprof, strip-hprof] analyze-process: Dumps the heap for the provided process name, pulls the hprof file and analyzes it. USAGE: analyze-process PROCESS_PACKAGE_NAME dump-process: Dumps the heap for the provided process name and pulls the hprof file. USAGE: dump-process PROCESS_PACKAGE_NAME analyze-hprof: Analyzes the provided hprof file. USAGE: analyze-hprof HPROF_FILE_PATH strip-hprof: Replaces all primitive arrays from the provided hprof file with arrays of zeroes. USAGE: strip-hprof HPROF_FILE_PATH","title":"Shark CLI"},{"location":"shark/#shark-code-examples","text":"","title":"Shark code examples"},{"location":"shark/#reading-records-in-a-hprof-file","text":"dependencies { implementation 'com.squareup.leakcanary:shark-hprof:$sharkVersion' } // Prints all class and field names Hprof . open ( heapDumpFile ) . use { hprof -> hprof . reader . readHprofRecords ( recordTypes = setOf ( StringRecord :: class ), listener = OnHprofRecordListener { position , record -> println (( record as StringRecord ). string ) }) }","title":"Reading records in a hprof file"},{"location":"shark/#navigating-the-heap-object-graph","text":"dependencies { implementation 'com.squareup.leakcanary:shark-graph:$sharkVersion' } // Prints all thread names Hprof . open ( heapDumpFile ) . use { hprof -> val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val threadClass = heapGraph . findClassByName ( \"java.lang.Thread\" ) !! val threadNames : Sequence < String > = threadClass . instances . map { instance -> val nameField = instance [ \"java.lang.Thread\" , \"name\" ] !! nameField . value . readAsJavaString () !! } threadNames . forEach { println ( it ) } }","title":"Navigating the heap object graph"},{"location":"shark/#generating-a-heap-analysis-report","text":"dependencies { implementation 'com.squareup.leakcanary:shark:$sharkVersion' } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , leakFinders = listOf ( ObjectInspector { _ , reporter -> reporter . whenInstanceOf ( \"com.example.ThingWithLifecycle\" ) { instance -> val field = instance [ \"com.example.ThingWithLifecycle\" , \"destroyed\" ] !! val destroyed = field . value . asBoolean !! if ( destroyed ) { leakingReasons += \"ThingWithLifecycle.destroyed = true\" } } }) ) println ( analysis )","title":"Generating a heap analysis report"},{"location":"shark/#generating-an-android-heap-analysis-report","text":"dependencies { implementation 'com.squareup.leakcanary:shark-android:$sharkVersion' } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , referenceMatchers = AndroidReferenceMatchers . appDefaults , objectInspectors = AndroidObjectInspectors . appDefaults ) println ( analysis )","title":"Generating an Android heap analysis report"},{"location":"support/","text":"LeakCanary Support \u00b6 If you\u2019re looking for help with LeakCanary: Learn the Fundamentals Try the code recipes Read the FAQ Watch recorded presentations Read blog articles Ask a question on StackOverflow","title":"Support"},{"location":"support/#leakcanary-support","text":"If you\u2019re looking for help with LeakCanary: Learn the Fundamentals Try the code recipes Read the FAQ Watch recorded presentations Read blog articles Ask a question on StackOverflow","title":"LeakCanary Support"},{"location":"upgrading-to-leakcanary-2.0/","text":"LeakCanary 2 is a major rewrite. High level changes: New heap analyzer, reimplemented from scratch to use 10 times less memory ( see Shark ). APIs updated to simplify configuration and provide access to the new heap analyzer. Internals rewritten to 100% Kotlin. Multiple leaks detected in one analysis, grouped per leak type Dependencies \u00b6 Before \u00b6 dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3' releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3' // Optional, if you use support library fragments: debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3' } Now \u00b6 dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0' } Worth noting \u00b6 The leakcanary-android-no-op artifact is gone. If you have compile errors, see below. Question : if there\u2019s no no-op anymore, how do I ensure none of this runs during release builds? Answer : as long as you add leakcanary-android as debugImplementation , there won\u2019t be any code referencing LeakCanary in your release builds. LeakCanary does not depend on the support library anymore, and it doesn\u2019t depend on AndroidX either. Detection of AndroidX fragments is automatic if you have the AndroidX fragments dependency. Default setup code \u00b6 Before \u00b6 public class ExampleApplication extends Application { @Override public void onCreate () { super . onCreate (); if ( LeakCanary . isInAnalyzerProcess ( this )) { // This process is dedicated to LeakCanary for heap analysis. // You should not init your app in this process. return ; } LeakCanary . install ( this ); // Normal app init code... } } Now \u00b6 There is no more code for default setup. Worth noting \u00b6 LeakCanary auto installs itself LeakCanary analysis now runs in the main process so there is no need to call LeakCanary.isInAnalyzerProcess() . Retrieve the RefWatcher \u00b6 Before \u00b6 val refWatcher : RefWatcher = LeakCanary . installedRefWatcher () Now \u00b6 val objectWatcher : ObjectWatcher = AppWatcher . objectWatcher Compile errors because RefWatcher is used in release code \u00b6 If you were using RefWatcher in non debug code, you now get a compile error because the no-op artifact is gone. ObjectWatcher now lives in the object-watcher artifact, which is suitable for production. You have two options: Option 1: Add object-watcher-android to release builds. \u00b6 dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.0' } It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to AppWatcher.objectWatcher . It will not trigger heap dumps or anything else that LeakCanary does. It\u2019s very little code and should have a no impact on your release app. You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes: val retainedObjectCount = AppWatcher . objectWatcher . retainedObjectCount Option 2: Make your own ObjectWatcher interface \u00b6 // In shared code interface MaybeObjectWatcher { fun watch ( watchedObject : Any ) object None : MaybeObjectWatcher { override fun watch ( watchedObject : Any ) { } } } // In debug code class RealObjectWatcher : MaybeObjectWatcher { override fun watch ( watchedObject : Any ) { AppWatcher . objectWatcher . watch ( watchedObject ) } } Use MaybeObjectWatcher.None in release code and RealObjectWatcher in debug code. Configuring LeakCanary \u00b6 Before \u00b6 public class DebugExampleApplication extends ExampleApplication { @Override protected void installLeakCanary () { RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . watchActivities ( false ) . buildAndInstall (); } } Now \u00b6 AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing AppWatcher.config : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing LeakCanary.config : disableLeakCanaryButton . setOnClickListener { LeakCanary . config = LeakCanary . config . copy ( dumpHeap = false ) } Running LeakCanary in instrumentation tests \u00b6 Before \u00b6 In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"com.squareup.leakcanary.FailTestOnLeakRunListener\" } } In your test Application class: public class InstrumentationTestExampleApplication extends DebugExampleApplication { @Override protected void installLeakCanary () { InstrumentationLeakDetector . instrumentationRefWatcher ( this ) . buildAndInstall (); } } Now \u00b6 In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"leakcanary.FailTestOnLeakRunListener\" } } No code is necessary. Analysis listener / uploading to a server \u00b6 Before \u00b6 public class LeakUploadService extends DisplayLeakService { @Override protected void afterDefaultHandling ( HeapDump heapDump , AnalysisResult result , String leakInfo ) { // TODO Upload result to server } } RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . listenerServiceClass ( LeakUploadService . class ); . buildAndInstall (); <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" > <application android:name= \"com.example.DebugExampleApplication\" > <service android:name= \"com.example.LeakUploadService\" /> </application> </manifest> Now \u00b6 class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader () ) } } Matching known library leaks \u00b6 Before \u00b6 ExcludedRefs excludedRefs = AndroidExcludedRefs . createAppDefaults () . staticField ( \"com.samsing.SomeSingleton\" , \"sContext\" ) . build (); RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . excludedRefs ( excludedRefs ) . buildAndInstall (); } Now \u00b6 LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( \"com.samsing.SomeSingleton\" , \"sContext\" ) ) Info There is no equivalent API to ExcludedRefs.Builder.clazz() because it led to abuses. Instead see Ignoring specific activities or fragment classes . Public API packages \u00b6 Before \u00b6 All public APIs were in com.squareup.leakcanary.* Now \u00b6 All public APIs are in leakcanary.*","title":"Upgrading to LeakCanary 2"},{"location":"upgrading-to-leakcanary-2.0/#dependencies","text":"","title":"Dependencies"},{"location":"upgrading-to-leakcanary-2.0/#before","text":"dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3' releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3' // Optional, if you use support library fragments: debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3' }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now","text":"dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0' }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting","text":"The leakcanary-android-no-op artifact is gone. If you have compile errors, see below. Question : if there\u2019s no no-op anymore, how do I ensure none of this runs during release builds? Answer : as long as you add leakcanary-android as debugImplementation , there won\u2019t be any code referencing LeakCanary in your release builds. LeakCanary does not depend on the support library anymore, and it doesn\u2019t depend on AndroidX either. Detection of AndroidX fragments is automatic if you have the AndroidX fragments dependency.","title":"Worth noting"},{"location":"upgrading-to-leakcanary-2.0/#default-setup-code","text":"","title":"Default setup code"},{"location":"upgrading-to-leakcanary-2.0/#before_1","text":"public class ExampleApplication extends Application { @Override public void onCreate () { super . onCreate (); if ( LeakCanary . isInAnalyzerProcess ( this )) { // This process is dedicated to LeakCanary for heap analysis. // You should not init your app in this process. return ; } LeakCanary . install ( this ); // Normal app init code... } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_1","text":"There is no more code for default setup.","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting_1","text":"LeakCanary auto installs itself LeakCanary analysis now runs in the main process so there is no need to call LeakCanary.isInAnalyzerProcess() .","title":"Worth noting"},{"location":"upgrading-to-leakcanary-2.0/#retrieve-the-refwatcher","text":"","title":"Retrieve the RefWatcher"},{"location":"upgrading-to-leakcanary-2.0/#before_2","text":"val refWatcher : RefWatcher = LeakCanary . installedRefWatcher ()","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_2","text":"val objectWatcher : ObjectWatcher = AppWatcher . objectWatcher","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#compile-errors-because-refwatcher-is-used-in-release-code","text":"If you were using RefWatcher in non debug code, you now get a compile error because the no-op artifact is gone. ObjectWatcher now lives in the object-watcher artifact, which is suitable for production. You have two options:","title":"Compile errors because RefWatcher is used in release code"},{"location":"upgrading-to-leakcanary-2.0/#option-1-add-object-watcher-android-to-release-builds","text":"dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.0' } It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to AppWatcher.objectWatcher . It will not trigger heap dumps or anything else that LeakCanary does. It\u2019s very little code and should have a no impact on your release app. You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes: val retainedObjectCount = AppWatcher . objectWatcher . retainedObjectCount","title":"Option 1: Add object-watcher-android to release builds."},{"location":"upgrading-to-leakcanary-2.0/#option-2-make-your-own-objectwatcher-interface","text":"// In shared code interface MaybeObjectWatcher { fun watch ( watchedObject : Any ) object None : MaybeObjectWatcher { override fun watch ( watchedObject : Any ) { } } } // In debug code class RealObjectWatcher : MaybeObjectWatcher { override fun watch ( watchedObject : Any ) { AppWatcher . objectWatcher . watch ( watchedObject ) } } Use MaybeObjectWatcher.None in release code and RealObjectWatcher in debug code.","title":"Option 2: Make your own ObjectWatcher interface"},{"location":"upgrading-to-leakcanary-2.0/#configuring-leakcanary","text":"","title":"Configuring LeakCanary"},{"location":"upgrading-to-leakcanary-2.0/#before_3","text":"public class DebugExampleApplication extends ExampleApplication { @Override protected void installLeakCanary () { RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . watchActivities ( false ) . buildAndInstall (); } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_3","text":"AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing AppWatcher.config : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing LeakCanary.config : disableLeakCanaryButton . setOnClickListener { LeakCanary . config = LeakCanary . config . copy ( dumpHeap = false ) }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#running-leakcanary-in-instrumentation-tests","text":"","title":"Running LeakCanary in instrumentation tests"},{"location":"upgrading-to-leakcanary-2.0/#before_4","text":"In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"com.squareup.leakcanary.FailTestOnLeakRunListener\" } } In your test Application class: public class InstrumentationTestExampleApplication extends DebugExampleApplication { @Override protected void installLeakCanary () { InstrumentationLeakDetector . instrumentationRefWatcher ( this ) . buildAndInstall (); } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_4","text":"In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"leakcanary.FailTestOnLeakRunListener\" } } No code is necessary.","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#analysis-listener-uploading-to-a-server","text":"","title":"Analysis listener / uploading to a server"},{"location":"upgrading-to-leakcanary-2.0/#before_5","text":"public class LeakUploadService extends DisplayLeakService { @Override protected void afterDefaultHandling ( HeapDump heapDump , AnalysisResult result , String leakInfo ) { // TODO Upload result to server } } RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . listenerServiceClass ( LeakUploadService . class ); . buildAndInstall (); <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" > <application android:name= \"com.example.DebugExampleApplication\" > <service android:name= \"com.example.LeakUploadService\" /> </application> </manifest>","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_5","text":"class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader () ) } }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#matching-known-library-leaks","text":"","title":"Matching known library leaks"},{"location":"upgrading-to-leakcanary-2.0/#before_6","text":"ExcludedRefs excludedRefs = AndroidExcludedRefs . createAppDefaults () . staticField ( \"com.samsing.SomeSingleton\" , \"sContext\" ) . build (); RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . excludedRefs ( excludedRefs ) . buildAndInstall (); }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_6","text":"LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( \"com.samsing.SomeSingleton\" , \"sContext\" ) ) Info There is no equivalent API to ExcludedRefs.Builder.clazz() because it led to abuses. Instead see Ignoring specific activities or fragment classes .","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#public-api-packages","text":"","title":"Public API packages"},{"location":"upgrading-to-leakcanary-2.0/#before_7","text":"All public APIs were in com.squareup.leakcanary.*","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_7","text":"All public APIs are in leakcanary.*","title":"Now"},{"location":"api/leakcanary-android-core/","text":"leakcanary-android-core Packages \u00b6 Name Summary leakcanary Index \u00b6 All Types","title":"Home"},{"location":"api/leakcanary-android-core/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-android-core/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-android-core/alltypes/","text":"All Types \u00b6 Name Summary leakcanary.DefaultOnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. leakcanary.LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. leakcanary.OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"Home"},{"location":"api/leakcanary-android-core/alltypes/#all-types","text":"Name Summary leakcanary.DefaultOnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. leakcanary.LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. leakcanary.OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"All Types"},{"location":"api/leakcanary-android-core/leakcanary/","text":"leakcanary-android-core / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. LeakCanary object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. OnHeapAnalyzedListener interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"LeakCanary"},{"location":"api/leakcanary-android-core/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-core/leakcanary/#types","text":"Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. LeakCanary object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. OnHeapAnalyzedListener interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener DefaultOnHeapAnalyzedListener \u00b6 class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. Constructors \u00b6 Name Summary <init> DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result. Functions \u00b6 Name Summary onHeapAnalyzed fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Companion Object Functions \u00b6 Name Summary create fun create(): OnHeapAnalyzedListener","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#defaultonheapanalyzedlistener","text":"class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"DefaultOnHeapAnalyzedListener"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#constructors","text":"Name Summary <init> DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#functions","text":"Name Summary onHeapAnalyzed fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/#companion-object-functions","text":"Name Summary create fun create(): OnHeapAnalyzedListener","title":"Companion Object Functions"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/-init-/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener / <init> <init> \u00b6 DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":" init "},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/-init-/#init","text":"DefaultOnHeapAnalyzedListener(application: Application) Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/create/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener / create create \u00b6 fun create(): OnHeapAnalyzedListener","title":"Create"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/create/#create","text":"fun create(): OnHeapAnalyzedListener","title":"create"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/on-heap-analyzed/","text":"leakcanary-android-core / leakcanary / DefaultOnHeapAnalyzedListener / onHeapAnalyzed onHeapAnalyzed \u00b6 fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Overrides OnHeapAnalyzedListener.onHeapAnalyzed See Also OnHeapAnalyzedListener","title":"On heap analyzed"},{"location":"api/leakcanary-android-core/leakcanary/-default-on-heap-analyzed-listener/on-heap-analyzed/#onheapanalyzed","text":"fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Overrides OnHeapAnalyzedListener.onHeapAnalyzed See Also OnHeapAnalyzedListener","title":"onHeapAnalyzed"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/","text":"leakcanary-android-core / leakcanary / LeakCanary LeakCanary \u00b6 object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LeakCanary can be configured by updating config . Types \u00b6 Name Summary Config data class Config LeakCanary configuration data class. Properties can be updated via copy . Properties \u00b6 Name Summary config var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: Functions \u00b6 Name Summary dumpHeap fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead. newLeakDisplayActivityIntent fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity. showLeakDisplayActivityLauncherIcon fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource:","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#leakcanary","text":"object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher . AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LeakCanary can be configured by updating config .","title":"LeakCanary"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#types","text":"Name Summary Config data class Config LeakCanary configuration data class. Properties can be updated via copy .","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#properties","text":"Name Summary config var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.:","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#functions","text":"Name Summary dumpHeap fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead. newLeakDisplayActivityIntent fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity. showLeakDisplayActivityLauncherIcon fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource:","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/config/","text":"leakcanary-android-core / leakcanary / LeakCanary / config config \u00b6 var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(computeRetainedHeapSize = true)","title":"Config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/config/#config","text":"var config: LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(computeRetainedHeapSize = true)","title":"config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap/","text":"leakcanary-android-core / leakcanary / LeakCanary / dumpHeap dumpHeap \u00b6 fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap/#dumpheap","text":"fun dumpHeap(): Unit Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher . If there are no retained instances then the heap will not be dumped and a notification will be shown instead.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent/","text":"leakcanary-android-core / leakcanary / LeakCanary / newLeakDisplayActivityIntent newLeakDisplayActivityIntent \u00b6 fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity.","title":"New leak display activity intent"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent/#newleakdisplayactivityintent","text":"fun newLeakDisplayActivityIntent(): Intent Returns a new Intent that can be used to programmatically launch the leak display activity.","title":"newLeakDisplayActivityIntent"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon/","text":"leakcanary-android-core / leakcanary / LeakCanary / showLeakDisplayActivityLauncherIcon showLeakDisplayActivityLauncherIcon \u00b6 fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name=\"leak_canary_add_launcher_icon\">false</bool> </resources>","title":"Show leak display activity launcher icon"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon/#showleakdisplayactivitylaunchericon","text":"fun showLeakDisplayActivityLauncherIcon(showLauncherIcon: Boolean ): Unit Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name=\"leak_canary_add_launcher_icon\">false</bool> </resources>","title":"showLeakDisplayActivityLauncherIcon"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config Config \u00b6 data class Config LeakCanary configuration data class. Properties can be updated via copy . See Also config Constructors \u00b6 Name Summary <init> Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metatadaExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy . Properties \u00b6 Name Summary computeRetainedHeapSize val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). dumpHeap val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). dumpHeapWhenDebugging val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). maxStoredHeapDumps val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. metatadaExtractor val metatadaExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. objectInspectors val objectInspectors: List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. onHeapAnalyzedListener val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . referenceMatchers val referenceMatchers: List <ReferenceMatcher> Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). requestWriteExternalStoragePermission val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. retainedVisibleThreshold val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. useExperimentalLeakFinders val useExperimentalLeakFinders: Boolean When true, objectInspectors are used to find leaks instead of only checking instances tracked by KeyedWeakReference . This leads to finding more leaks and shorter leak traces. However this also means the same leaking instances will be found in every heap dump for a given process life.","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#config","text":"data class Config LeakCanary configuration data class. Properties can be updated via copy . See Also config","title":"Config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#constructors","text":"Name Summary <init> Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metatadaExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy .","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#properties","text":"Name Summary computeRetainedHeapSize val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). dumpHeap val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). dumpHeapWhenDebugging val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). maxStoredHeapDumps val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. metatadaExtractor val metatadaExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. objectInspectors val objectInspectors: List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. onHeapAnalyzedListener val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . referenceMatchers val referenceMatchers: List <ReferenceMatcher> Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). requestWriteExternalStoragePermission val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. retainedVisibleThreshold val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. useExperimentalLeakFinders val useExperimentalLeakFinders: Boolean When true, objectInspectors are used to find leaks instead of only checking instances tracked by KeyedWeakReference . This leads to finding more leaks and shorter leak traces. However this also means the same leaking instances will be found in every heap dump for a given process life.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-init-/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / <init> <init> \u00b6 Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metatadaExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy . See Also config","title":" init "},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-init-/#init","text":"Config(dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metatadaExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, useExperimentalLeakFinders: Boolean = false) LeakCanary configuration data class. Properties can be updated via copy . See Also config","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / computeRetainedHeapSize computeRetainedHeapSize \u00b6 val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"Compute retained heap size"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size/#computeretainedheapsize","text":"val computeRetainedHeapSize: Boolean Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"computeRetainedHeapSize"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / dumpHeapWhenDebugging dumpHeapWhenDebugging \u00b6 val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). Defaults to false.","title":"Dump heap when debugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging/#dumpheapwhendebugging","text":"val dumpHeapWhenDebugging: Boolean If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). Defaults to false.","title":"dumpHeapWhenDebugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / dumpHeap dumpHeap \u00b6 val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). Defaults to true.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap/#dumpheap","text":"val dumpHeap: Boolean Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). Defaults to true.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / maxStoredHeapDumps maxStoredHeapDumps \u00b6 val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. Defaults to 7.","title":"Max stored heap dumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps/#maxstoredheapdumps","text":"val maxStoredHeapDumps: Int How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. Defaults to 7.","title":"maxStoredHeapDumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/metatada-extractor/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / metatadaExtractor metatadaExtractor \u00b6 val metatadaExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"Metatada extractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/metatada-extractor/#metatadaextractor","text":"val metatadaExtractor: MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"metatadaExtractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / objectInspectors objectInspectors \u00b6 val objectInspectors: List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"Object inspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/#objectinspectors","text":"val objectInspectors: List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"objectInspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / onHeapAnalyzedListener onHeapAnalyzedListener \u00b6 val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . Defaults to DefaultOnHeapAnalyzedListener","title":"On heap analyzed listener"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/on-heap-analyzed-listener/#onheapanalyzedlistener","text":"val onHeapAnalyzedListener: OnHeapAnalyzedListener Called on a background thread when the heap analysis is complete. If you want leaks to be added to the activity that lists leaks, make sure to delegate calls to a DefaultOnHeapAnalyzedListener . Defaults to DefaultOnHeapAnalyzedListener","title":"onHeapAnalyzedListener"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / referenceMatchers referenceMatchers \u00b6 val referenceMatchers: List <ReferenceMatcher> Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). When adding your own custom LibraryLeakReferenceMatcher instances, you\u2019ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph . Defaults to AndroidReferenceMatchers.appDefaults","title":"Reference matchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/#referencematchers","text":"val referenceMatchers: List <ReferenceMatcher> Known patterns of references in the heap, lister here either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). When adding your own custom LibraryLeakReferenceMatcher instances, you\u2019ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph . Defaults to AndroidReferenceMatchers.appDefaults","title":"referenceMatchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / requestWriteExternalStoragePermission requestWriteExternalStoragePermission \u00b6 val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. Defaults to false because that permission notification can be annoying.","title":"Request write external storage permission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission/#requestwriteexternalstoragepermission","text":"val requestWriteExternalStoragePermission: Boolean LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. Defaults to false because that permission notification can be annoying.","title":"requestWriteExternalStoragePermission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / retainedVisibleThreshold retainedVisibleThreshold \u00b6 val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. When the app becomes invisible, LeakCanary dumps the heap after AppWatcher.Config.watchDurationMillis ms. The app is considered visible if it has at least one activity in started state. A higher threshold means LeakCanary will dump the heap less often, therefore it won\u2019t be bothering developers as much but it could miss some leaks. Defaults to 5.","title":"Retained visible threshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold/#retainedvisiblethreshold","text":"val retainedVisibleThreshold: Int When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. When the app becomes invisible, LeakCanary dumps the heap after AppWatcher.Config.watchDurationMillis ms. The app is considered visible if it has at least one activity in started state. A higher threshold means LeakCanary will dump the heap less often, therefore it won\u2019t be bothering developers as much but it could miss some leaks. Defaults to 5.","title":"retainedVisibleThreshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/use-experimental-leak-finders/","text":"leakcanary-android-core / leakcanary / LeakCanary / Config / useExperimentalLeakFinders useExperimentalLeakFinders \u00b6 val useExperimentalLeakFinders: Boolean When true, objectInspectors are used to find leaks instead of only checking instances tracked by KeyedWeakReference . This leads to finding more leaks and shorter leak traces. However this also means the same leaking instances will be found in every heap dump for a given process life. Defaults to false.","title":"Use experimental leak finders"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/use-experimental-leak-finders/#useexperimentalleakfinders","text":"val useExperimentalLeakFinders: Boolean When true, objectInspectors are used to find leaks instead of only checking instances tracked by KeyedWeakReference . This leads to finding more leaks and shorter leak traces. However this also means the same leaking instances will be found in every heap dump for a given process life. Defaults to false.","title":"useExperimentalLeakFinders"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/","text":"leakcanary-android-core / leakcanary / OnHeapAnalyzedListener OnHeapAnalyzedListener \u00b6 interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete. You can create a OnHeapAnalyzedListener from a lambda by calling invoke . Functions \u00b6 Name Summary onHeapAnalyzed abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit Companion Object Functions \u00b6 Name Summary invoke operator fun invoke(block: (HeapAnalysis) -> Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Inheritors \u00b6 Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"Home"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#onheapanalyzedlistener","text":"interface OnHeapAnalyzedListener Listener set in LeakCanary.Config and called by LeakCanary on a background thread when the heap analysis is complete. You can create a OnHeapAnalyzedListener from a lambda by calling invoke .","title":"OnHeapAnalyzedListener"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#functions","text":"Name Summary onHeapAnalyzed abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: (HeapAnalysis) -> Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax.","title":"Companion Object Functions"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/#inheritors","text":"Name Summary DefaultOnHeapAnalyzedListener class DefaultOnHeapAnalyzedListener : OnHeapAnalyzedListener Default OnHeapAnalyzedListener implementation, which will store the analysis to disk and show a notification summarizing the result.","title":"Inheritors"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/invoke/","text":"leakcanary-android-core / leakcanary / OnHeapAnalyzedListener / invoke invoke \u00b6 inline operator fun invoke(crossinline block: (HeapAnalysis) -> Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val listener = OnHeapAnalyzedListener { }","title":"Invoke"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: (HeapAnalysis) -> Unit ): OnHeapAnalyzedListener Utility function to create a OnHeapAnalyzedListener from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val listener = OnHeapAnalyzedListener { }","title":"invoke"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/on-heap-analyzed/","text":"leakcanary-android-core / leakcanary / OnHeapAnalyzedListener / onHeapAnalyzed onHeapAnalyzed \u00b6 abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit See Also OnHeapAnalyzedListener","title":"On heap analyzed"},{"location":"api/leakcanary-android-core/leakcanary/-on-heap-analyzed-listener/on-heap-analyzed/#onheapanalyzed","text":"abstract fun onHeapAnalyzed(heapAnalysis: HeapAnalysis): Unit See Also OnHeapAnalyzedListener","title":"onHeapAnalyzed"},{"location":"api/leakcanary-android-instrumentation/","text":"leakcanary-android-instrumentation Packages \u00b6 Name Summary leakcanary Index \u00b6 All Types","title":"Home"},{"location":"api/leakcanary-android-instrumentation/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-android-instrumentation/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-android-instrumentation/alltypes/","text":"All Types \u00b6 Name Summary leakcanary.FailAnnotatedTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. leakcanary.FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. leakcanary.FailTestOnLeakRunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. leakcanary.InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/alltypes/#all-types","text":"Name Summary leakcanary.FailAnnotatedTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. leakcanary.FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. leakcanary.FailTestOnLeakRunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. leakcanary.InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"All Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/","text":"leakcanary-android-instrumentation / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. FailTestOnLeakRunListener open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. InstrumentationLeakDetector class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. Annotations \u00b6 Name Summary FailTestOnLeak annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Extension: Instrumentation tests"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#types","text":"Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. FailTestOnLeakRunListener open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. InstrumentationLeakDetector class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#annotations","text":"Name Summary FailTestOnLeak annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Annotations"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/","text":"leakcanary-android-instrumentation / leakcanary / FailAnnotatedTestOnLeakRunListener FailAnnotatedTestOnLeakRunListener \u00b6 class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak Constructors \u00b6 Name Summary <init> FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. Functions \u00b6 Name Summary skipLeakDetectionReason fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. Inherited Functions \u00b6 Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#failannotatedtestonleakrunlistener","text":"class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak","title":"FailAnnotatedTestOnLeakRunListener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#constructors","text":"Name Summary <init> FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#functions","text":"Name Summary skipLeakDetectionReason fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/#inherited-functions","text":"Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit","title":"Inherited Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/-init-/","text":"leakcanary-android-instrumentation / leakcanary / FailAnnotatedTestOnLeakRunListener / <init> <init> \u00b6 FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/-init-/#init","text":"FailAnnotatedTestOnLeakRunListener() A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used. See Also FailTestOnLeak","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/skip-leak-detection-reason/","text":"leakcanary-android-instrumentation / leakcanary / FailAnnotatedTestOnLeakRunListener / skipLeakDetectionReason skipLeakDetectionReason \u00b6 protected fun skipLeakDetectionReason(description: Description): String ? Overrides FailTestOnLeakRunListener.skipLeakDetectionReason Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"Skip leak detection reason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-annotated-test-on-leak-run-listener/skip-leak-detection-reason/#skipleakdetectionreason","text":"protected fun skipLeakDetectionReason(description: Description): String ? Overrides FailTestOnLeakRunListener.skipLeakDetectionReason Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"skipLeakDetectionReason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeak FailTestOnLeak \u00b6 @Target([AnnotationTarget.FUNCTION]) annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener Constructors \u00b6 Name Summary <init> FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/#failtestonleak","text":"@Target([AnnotationTarget.FUNCTION]) annotation class FailTestOnLeak An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener","title":"FailTestOnLeak"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/#constructors","text":"Name Summary <init> FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/-init-/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeak / <init> <init> \u00b6 FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak/-init-/#init","text":"FailTestOnLeak() An Annotation class to be used in conjunction with FailAnnotatedTestOnLeakRunListener for detecting memory leaks. When using FailAnnotatedTestOnLeakRunListener , the tests should be annotated with this class in order for the listener to detect memory leaks. See Also FailAnnotatedTestOnLeakRunListener","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener FailTestOnLeakRunListener \u00b6 open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector Constructors \u00b6 Name Summary <init> FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. Functions \u00b6 Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. skipLeakDetectionReason open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit Inheritors \u00b6 Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#failtestonleakrunlistener","text":"open class FailTestOnLeakRunListener : RunListener A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector","title":"FailTestOnLeakRunListener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#constructors","text":"Name Summary <init> FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#functions","text":"Name Summary failTest fun failTest(message: String ): Unit Reports that the test has failed, with the provided message . onAnalysisPerformed open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. skipLeakDetectionReason open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise. testAssumptionFailure open fun testAssumptionFailure(failure: Failure): Unit testFailure open fun testFailure(failure: Failure): Unit testFinished open fun testFinished(description: Description): Unit testIgnored open fun testIgnored(description: Description): Unit testRunFinished open fun testRunFinished(result: Result): Unit testRunStarted open fun testRunStarted(description: Description): Unit testStarted open fun testStarted(description: Description): Unit","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/#inheritors","text":"Name Summary FailAnnotatedTestOnLeakRunListener class FailAnnotatedTestOnLeakRunListener : FailTestOnLeakRunListener A JUnit RunListener extending FailTestOnLeakRunListener to detecting memory leaks in Android instrumentation tests only when the FailTestOnLeak annotation is used.","title":"Inheritors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/-init-/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / <init> <init> \u00b6 FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/-init-/#init","text":"FailTestOnLeakRunListener() A JUnit RunListener that uses InstrumentationLeakDetector to detect memory leaks in Android instrumentation tests. It waits for the end of a test, and if the test succeeds then it will look for retained objects, trigger a heap dump if needed and perform an analysis. FailTestOnLeakRunListener can be subclassed to override skipLeakDetectionReason and onAnalysisPerformed See Also InstrumentationLeakDetector","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/fail-test/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / failTest failTest \u00b6 protected fun failTest(message: String ): Unit Reports that the test has failed, with the provided message .","title":"Fail test"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/fail-test/#failtest","text":"protected fun failTest(message: String ): Unit Reports that the test has failed, with the provided message .","title":"failTest"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/on-analysis-performed/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / onAnalysisPerformed onAnalysisPerformed \u00b6 protected open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. The default implementation call failTest if the heapAnalysis failed or if HeapAnalysisSuccess.applicationLeaks is not empty.","title":"On analysis performed"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/on-analysis-performed/#onanalysisperformed","text":"protected open fun onAnalysisPerformed(heapAnalysis: HeapAnalysis): Unit Called when a heap analysis has been performed and a result is available. The default implementation call failTest if the heapAnalysis failed or if HeapAnalysisSuccess.applicationLeaks is not empty.","title":"onAnalysisPerformed"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/skip-leak-detection-reason/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / skipLeakDetectionReason skipLeakDetectionReason \u00b6 protected open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"Skip leak detection reason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/skip-leak-detection-reason/#skipleakdetectionreason","text":"protected open fun skipLeakDetectionReason(description: Description): String ? Can be overridden to skip leak detection based on the description provided when a test is started. Return null to continue leak detection, or a string describing the reason for skipping otherwise.","title":"skipLeakDetectionReason"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-assumption-failure/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testAssumptionFailure testAssumptionFailure \u00b6 open fun testAssumptionFailure(failure: Failure): Unit","title":"Test assumption failure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-assumption-failure/#testassumptionfailure","text":"open fun testAssumptionFailure(failure: Failure): Unit","title":"testAssumptionFailure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-failure/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testFailure testFailure \u00b6 open fun testFailure(failure: Failure): Unit","title":"Test failure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-failure/#testfailure","text":"open fun testFailure(failure: Failure): Unit","title":"testFailure"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-finished/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testFinished testFinished \u00b6 open fun testFinished(description: Description): Unit","title":"Test finished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-finished/#testfinished","text":"open fun testFinished(description: Description): Unit","title":"testFinished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-ignored/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testIgnored testIgnored \u00b6 open fun testIgnored(description: Description): Unit","title":"Test ignored"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-ignored/#testignored","text":"open fun testIgnored(description: Description): Unit","title":"testIgnored"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-finished/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testRunFinished testRunFinished \u00b6 open fun testRunFinished(result: Result): Unit","title":"Test run finished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-finished/#testrunfinished","text":"open fun testRunFinished(result: Result): Unit","title":"testRunFinished"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-started/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testRunStarted testRunStarted \u00b6 open fun testRunStarted(description: Description): Unit","title":"Test run started"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-run-started/#testrunstarted","text":"open fun testRunStarted(description: Description): Unit","title":"testRunStarted"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-started/","text":"leakcanary-android-instrumentation / leakcanary / FailTestOnLeakRunListener / testStarted testStarted \u00b6 open fun testStarted(description: Description): Unit","title":"Test started"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-fail-test-on-leak-run-listener/test-started/#teststarted","text":"open fun testStarted(description: Description): Unit","title":"testStarted"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector InstrumentationLeakDetector \u00b6 class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks . Add an instrumentation test listener \u00b6 LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener Rationale \u00b6 Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained. Types \u00b6 Name Summary Result sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed . Constructors \u00b6 Name Summary <init> InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. Functions \u00b6 Name Summary detectLeaks fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis. Companion Object Functions \u00b6 Name Summary updateConfig fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#instrumentationleakdetector","text":"class InstrumentationLeakDetector InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks .","title":"InstrumentationLeakDetector"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#add-an-instrumentation-test-listener","text":"LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener","title":"Add an instrumentation test listener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#rationale","text":"Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained.","title":"Rationale"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#types","text":"Name Summary Result sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed .","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#constructors","text":"Name Summary <init> InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests.","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#functions","text":"Name Summary detectLeaks fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis.","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/#companion-object-functions","text":"Name Summary updateConfig fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"Companion Object Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / <init> <init> \u00b6 InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks . Add an instrumentation test listener \u00b6 LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener Rationale \u00b6 Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained.","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/#init","text":"InstrumentationLeakDetector() InstrumentationLeakDetector can be used to detect memory leaks in instrumentation tests. To use it, you need to: Call updateConfig so that AppWatcher will watch objects and LeakCanary will not dump the heap on retained objects Add an instrumentation test listener (e.g. FailTestOnLeakRunListener ) that will invoke detectLeaks .","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/#add-an-instrumentation-test-listener","text":"LeakCanary provides FailTestOnLeakRunListener , but you can also implement your own RunListener and call detectLeaks directly if you need a more custom behavior (for instance running it only once per test suite). All you need to do is add the following to the defaultConfig of your build.gradle: testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" Then you can run your instrumentation tests via Gradle as usually, and they will fail when a memory leak is detected: ./gradlew leakcanary-sample:connectedCheck If instead you want to run UI tests via adb, add a listener execution argument to your command line for running the UI tests: -e listener leakcanary.FailTestOnLeakRunListener . The full command line should look something like this: adb shell am instrument \\\\ -w com.android.foo/android.support.test.runner.AndroidJUnitRunner \\\\ -e listener leakcanary.FailTestOnLeakRunListener","title":"Add an instrumentation test listener"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-init-/#rationale","text":"Instead of using the InstrumentationLeakDetector , one could simply enable LeakCanary in instrumentation tests. This approach would have two disadvantages: Heap dumps freeze the VM, and the leak analysis is IO and CPU heavy. This can slow down the test and introduce flakiness The leak analysis is asynchronous by default. This means the tests could finish and the process die before the analysis is finished. The approach taken here is to collect all objects to watch as you run the test, but not do any heap dump during the test. Then, at the end, if any of the watched objects is still in memory we dump the heap and perform a blocking analysis. There is only one heap dump performed, no matter the number of objects retained.","title":"Rationale"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/detect-leaks/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / detectLeaks detectLeaks \u00b6 fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis.","title":"Detect leaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/detect-leaks/#detectleaks","text":"fun detectLeaks(): InstrumentationLeakDetector.Result Looks for retained objects, triggers a heap dump if needed and performs an analysis.","title":"detectLeaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/update-config/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / updateConfig updateConfig \u00b6 fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"Update config"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/update-config/#updateconfig","text":"fun updateConfig(): Unit Configures AppWatcher to watch objects and LeakCanary to not dump the heap on retained objects so that instrumentation tests run smoothly, and we can look for leaks at the end of a test. This is automatically called by FailTestOnLeakRunListener when the tests start running.","title":"updateConfig"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result Result \u00b6 sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed . Types \u00b6 Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result Inheritors \u00b6 Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/#result","text":"sealed class Result The result of calling detectLeaks , which is either NoAnalysis or AnalysisPerformed .","title":"Result"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/#types","text":"Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/#inheritors","text":"Name Summary AnalysisPerformed class AnalysisPerformed : InstrumentationLeakDetector.Result NoAnalysis object NoAnalysis : InstrumentationLeakDetector.Result","title":"Inheritors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-no-analysis/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / NoAnalysis NoAnalysis \u00b6 object NoAnalysis : InstrumentationLeakDetector.Result","title":" no analysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-no-analysis/#noanalysis","text":"object NoAnalysis : InstrumentationLeakDetector.Result","title":"NoAnalysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / AnalysisPerformed AnalysisPerformed \u00b6 class AnalysisPerformed : InstrumentationLeakDetector.Result Constructors \u00b6 Name Summary <init> AnalysisPerformed(heapAnalysis: HeapAnalysis) Properties \u00b6 Name Summary heapAnalysis val heapAnalysis: HeapAnalysis","title":"Home"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/#analysisperformed","text":"class AnalysisPerformed : InstrumentationLeakDetector.Result","title":"AnalysisPerformed"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/#constructors","text":"Name Summary <init> AnalysisPerformed(heapAnalysis: HeapAnalysis)","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/#properties","text":"Name Summary heapAnalysis val heapAnalysis: HeapAnalysis","title":"Properties"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/-init-/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / AnalysisPerformed / <init> <init> \u00b6 AnalysisPerformed(heapAnalysis: HeapAnalysis)","title":" init "},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/-init-/#init","text":"AnalysisPerformed(heapAnalysis: HeapAnalysis)","title":"&lt;init&gt;"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/heap-analysis/","text":"leakcanary-android-instrumentation / leakcanary / InstrumentationLeakDetector / Result / AnalysisPerformed / heapAnalysis heapAnalysis \u00b6 val heapAnalysis: HeapAnalysis","title":"Heap analysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-instrumentation-leak-detector/-result/-analysis-performed/heap-analysis/#heapanalysis","text":"val heapAnalysis: HeapAnalysis","title":"heapAnalysis"},{"location":"api/leakcanary-android-process/","text":"leakcanary-android-process Packages \u00b6 Name Summary leakcanary Index \u00b6 All Types","title":"Home"},{"location":"api/leakcanary-android-process/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-android-process/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-android-process/alltypes/","text":"All Types \u00b6 Name Summary leakcanary.LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"Home"},{"location":"api/leakcanary-android-process/alltypes/#all-types","text":"Name Summary leakcanary.LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"All Types"},{"location":"api/leakcanary-android-process/leakcanary/","text":"leakcanary-android-process / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary LeakCanaryProcess object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"Extension: Separate process"},{"location":"api/leakcanary-android-process/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-process/leakcanary/#types","text":"Name Summary LeakCanaryProcess object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process.","title":"Types"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/","text":"leakcanary-android-process / leakcanary / LeakCanaryProcess LeakCanaryProcess \u00b6 object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process. As such, you\u2019ll need to be careful to do any custom configuration of LeakCanary in both the main process and the analyzer process. Functions \u00b6 Name Summary isInAnalyzerProcess fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Home"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/#leakcanaryprocess","text":"object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android , LeakCanary will automatically run its analysis in a separate process. As such, you\u2019ll need to be careful to do any custom configuration of LeakCanary in both the main process and the analyzer process.","title":"LeakCanaryProcess"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/#functions","text":"Name Summary isInAnalyzerProcess fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Functions"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process/","text":"leakcanary-android-process / leakcanary / LeakCanaryProcess / isInAnalyzerProcess isInAnalyzerProcess \u00b6 fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Is in analyzer process"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process/#isinanalyzerprocess","text":"fun isInAnalyzerProcess(context: Context): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"isInAnalyzerProcess"},{"location":"api/leakcanary-object-watcher/","text":"leakcanary-object-watcher Packages \u00b6 Name Summary leakcanary Index \u00b6 All Types","title":"Home"},{"location":"api/leakcanary-object-watcher/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-object-watcher/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-object-watcher/alltypes/","text":"All Types \u00b6 Name Summary leakcanary.Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. leakcanary.GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. leakcanary.KeyedWeakReference A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. leakcanary.ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. leakcanary.OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"Home"},{"location":"api/leakcanary-object-watcher/alltypes/#all-types","text":"Name Summary leakcanary.Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. leakcanary.GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. leakcanary.KeyedWeakReference A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. leakcanary.ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. leakcanary.OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"All Types"},{"location":"api/leakcanary-object-watcher/leakcanary/","text":"leakcanary-object-watcher / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary Clock interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. GcTrigger interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. KeyedWeakReference class KeyedWeakReference : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. ObjectWatcher class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. OnObjectRetainedListener interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"Core: ObjectWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-object-watcher/leakcanary/#types","text":"Name Summary Clock interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. GcTrigger interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. KeyedWeakReference class KeyedWeakReference : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. ObjectWatcher class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. OnObjectRetainedListener interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/","text":"leakcanary-object-watcher / leakcanary / Clock Clock \u00b6 interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. Functions \u00b6 Name Summary uptimeMillis abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#clock","text":"interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts.","title":"Clock"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#functions","text":"Name Summary uptimeMillis abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis/","text":"leakcanary-object-watcher / leakcanary / Clock / uptimeMillis uptimeMillis \u00b6 abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis/#uptimemillis","text":"abstract fun uptimeMillis(): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"uptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/","text":"leakcanary-object-watcher / leakcanary / GcTrigger GcTrigger \u00b6 interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. Types \u00b6 Name Summary Default object Default : GcTrigger Default implementation of GcTrigger . Functions \u00b6 Name Summary runGc abstract fun runGc(): Unit Attempts to run garbage collection. Inheritors \u00b6 Name Summary Default object Default : GcTrigger Default implementation of GcTrigger .","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#gctrigger","text":"interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP.","title":"GcTrigger"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#types","text":"Name Summary Default object Default : GcTrigger Default implementation of GcTrigger .","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#functions","text":"Name Summary runGc abstract fun runGc(): Unit Attempts to run garbage collection.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#inheritors","text":"Name Summary Default object Default : GcTrigger Default implementation of GcTrigger .","title":"Inheritors"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc/","text":"leakcanary-object-watcher / leakcanary / GcTrigger / runGc runGc \u00b6 abstract fun runGc(): Unit Attempts to run garbage collection.","title":"Run gc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc/#rungc","text":"abstract fun runGc(): Unit Attempts to run garbage collection.","title":"runGc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/","text":"leakcanary-object-watcher / leakcanary / GcTrigger / Default Default \u00b6 object Default : GcTrigger Default implementation of GcTrigger . Functions \u00b6 Name Summary runGc fun runGc(): Unit Attempts to run garbage collection.","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/#default","text":"object Default : GcTrigger Default implementation of GcTrigger .","title":"Default"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/#functions","text":"Name Summary runGc fun runGc(): Unit Attempts to run garbage collection.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc/","text":"leakcanary-object-watcher / leakcanary / GcTrigger / Default / runGc runGc \u00b6 fun runGc(): Unit Overrides GcTrigger.runGc Attempts to run garbage collection.","title":"Run gc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc/#rungc","text":"fun runGc(): Unit Overrides GcTrigger.runGc Attempts to run garbage collection.","title":"runGc"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference KeyedWeakReference \u00b6 class KeyedWeakReference : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained. Constructors \u00b6 Name Summary <init> KeyedWeakReference(referent: Any , key: String , name: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. Properties \u00b6 Name Summary key val key: String name val name: String retainedUptimeMillis var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn\u2019t been yet. watchUptimeMillis val watchUptimeMillis: Long Companion Object Properties \u00b6 Name Summary heapDumpUptimeMillis var heapDumpUptimeMillis: Long","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#keyedweakreference","text":"class KeyedWeakReference : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained.","title":"KeyedWeakReference"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#constructors","text":"Name Summary <init> KeyedWeakReference(referent: Any , key: String , name: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet.","title":"Constructors"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#properties","text":"Name Summary key val key: String name val name: String retainedUptimeMillis var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn\u2019t been yet. watchUptimeMillis val watchUptimeMillis: Long","title":"Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#companion-object-properties","text":"Name Summary heapDumpUptimeMillis var heapDumpUptimeMillis: Long","title":"Companion Object Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-init-/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / <init> <init> \u00b6 KeyedWeakReference(referent: Any , key: String , name: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained.","title":" init "},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-init-/#init","text":"KeyedWeakReference(referent: Any , key: String , name: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained.","title":"&lt;init&gt;"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/heap-dump-uptime-millis/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / heapDumpUptimeMillis heapDumpUptimeMillis \u00b6 @JvmStatic var heapDumpUptimeMillis: Long","title":"Heap dump uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/heap-dump-uptime-millis/#heapdumpuptimemillis","text":"@JvmStatic var heapDumpUptimeMillis: Long","title":"heapDumpUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / key key \u00b6 val key: String","title":"Key"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key/#key","text":"val key: String","title":"key"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/name/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / name name \u00b6 val name: String","title":"Name"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/name/#name","text":"val name: String","title":"name"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / retainedUptimeMillis retainedUptimeMillis \u00b6 var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn\u2019t been yet.","title":"Retained uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis/#retaineduptimemillis","text":"var retainedUptimeMillis: Long Time at which the associated object ( referent ) was considered retained, or -1 if it hasn\u2019t been yet.","title":"retainedUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis/","text":"leakcanary-object-watcher / leakcanary / KeyedWeakReference / watchUptimeMillis watchUptimeMillis \u00b6 val watchUptimeMillis: Long","title":"Watch uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis/#watchuptimemillis","text":"val watchUptimeMillis: Long","title":"watchUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher ObjectWatcher \u00b6 class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe. Constructors \u00b6 Name Summary <init> ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. Properties \u00b6 Name Summary hasRetainedObjects val hasRetainedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. hasWatchedObjects val hasWatchedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained. retainedObjectCount val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. retainedObjects val retainedObjects: List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there. Functions \u00b6 Name Summary addOnObjectRetainedListener fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit clearObjectsWatchedBefore fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock ) clearWatchedObjects fun clearWatchedObjects(): Unit Clears all KeyedWeakReference removeOnObjectRetainedListener fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit watch fun watch(watchedObject: Any ): Unit Identical to watch with an empty string reference name. fun watch(watchedObject: Any , name: String ): Unit Watches the provided watchedObject .","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#objectwatcher","text":"class ObjectWatcher ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe.","title":"ObjectWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#constructors","text":"Name Summary <init> ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread.","title":"Constructors"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#properties","text":"Name Summary hasRetainedObjects val hasRetainedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. hasWatchedObjects val hasWatchedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained. retainedObjectCount val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. retainedObjects val retainedObjects: List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#functions","text":"Name Summary addOnObjectRetainedListener fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit clearObjectsWatchedBefore fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock ) clearWatchedObjects fun clearWatchedObjects(): Unit Clears all KeyedWeakReference removeOnObjectRetainedListener fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit watch fun watch(watchedObject: Any ): Unit Identical to watch with an empty string reference name. fun watch(watchedObject: Any , name: String ): Unit Watches the provided watchedObject .","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/-init-/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / <init> <init> \u00b6 ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe.","title":" init "},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/-init-/#init","text":"ObjectWatcher(clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true }) ObjectWatcher can be passed objects to watch . It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify the onObjectRetainedListener on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe.","title":"&lt;init&gt;"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / addOnObjectRetainedListener addOnObjectRetainedListener \u00b6 @Synchronized fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"Add on object retained listener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener/#addonobjectretainedlistener","text":"@Synchronized fun addOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"addOnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / clearObjectsWatchedBefore clearObjectsWatchedBefore \u00b6 @Synchronized fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock )","title":"Clear objects watched before"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before/#clearobjectswatchedbefore","text":"@Synchronized fun clearObjectsWatchedBefore(heapDumpUptimeMillis: Long ): Unit Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock )","title":"clearObjectsWatchedBefore"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / clearWatchedObjects clearWatchedObjects \u00b6 @Synchronized fun clearWatchedObjects(): Unit Clears all KeyedWeakReference","title":"Clear watched objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects/#clearwatchedobjects","text":"@Synchronized fun clearWatchedObjects(): Unit Clears all KeyedWeakReference","title":"clearWatchedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / hasRetainedObjects hasRetainedObjects \u00b6 val hasRetainedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"Has retained objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects/#hasretainedobjects","text":"val hasRetainedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"hasRetainedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / hasWatchedObjects hasWatchedObjects \u00b6 val hasWatchedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained.","title":"Has watched objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects/#haswatchedobjects","text":"val hasWatchedObjects: Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained.","title":"hasWatchedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / removeOnObjectRetainedListener removeOnObjectRetainedListener \u00b6 @Synchronized fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"Remove on object retained listener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener/#removeonobjectretainedlistener","text":"@Synchronized fun removeOnObjectRetainedListener(listener: OnObjectRetainedListener ): Unit","title":"removeOnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / retainedObjectCount retainedObjectCount \u00b6 val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"Retained object count"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count/#retainedobjectcount","text":"val retainedObjectCount: Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"retainedObjectCount"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / retainedObjects retainedObjects \u00b6 val retainedObjects: List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"Retained objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects/#retainedobjects","text":"val retainedObjects: List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"retainedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/watch/","text":"leakcanary-object-watcher / leakcanary / ObjectWatcher / watch watch \u00b6 @Synchronized fun watch(watchedObject: Any ): Unit Identical to watch with an empty string reference name. @Synchronized fun watch(watchedObject: Any , name: String ): Unit Watches the provided watchedObject . Parameters \u00b6 name - A logical identifier for the watched object.","title":"Watch"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/watch/#watch","text":"@Synchronized fun watch(watchedObject: Any ): Unit Identical to watch with an empty string reference name. @Synchronized fun watch(watchedObject: Any , name: String ): Unit Watches the provided watchedObject .","title":"watch"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/watch/#parameters","text":"name - A logical identifier for the watched object.","title":"Parameters"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/","text":"leakcanary-object-watcher / leakcanary / OnObjectRetainedListener OnObjectRetainedListener \u00b6 interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects. Functions \u00b6 Name Summary onObjectRetained abstract fun onObjectRetained(): Unit A watched object became retained. Companion Object Functions \u00b6 Name Summary invoke operator fun invoke(block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax.","title":"Home"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#onobjectretainedlistener","text":"interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects.","title":"OnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#functions","text":"Name Summary onObjectRetained abstract fun onObjectRetained(): Unit A watched object became retained.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax.","title":"Companion Object Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/invoke/","text":"leakcanary-object-watcher / leakcanary / OnObjectRetainedListener / invoke invoke \u00b6 inline operator fun invoke(crossinline block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax. Usage: val listener = OnObjectRetainedListener { }","title":"Invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax. Usage: val listener = OnObjectRetainedListener { }","title":"invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained/","text":"leakcanary-object-watcher / leakcanary / OnObjectRetainedListener / onObjectRetained onObjectRetained \u00b6 abstract fun onObjectRetained(): Unit A watched object became retained.","title":"On object retained"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained/#onobjectretained","text":"abstract fun onObjectRetained(): Unit A watched object became retained.","title":"onObjectRetained"},{"location":"api/leakcanary-object-watcher-android/","text":"leakcanary-object-watcher-android Packages \u00b6 Name Summary leakcanary Index \u00b6 All Types","title":"Home"},{"location":"api/leakcanary-object-watcher-android/#packages","text":"Name Summary leakcanary","title":"Packages"},{"location":"api/leakcanary-object-watcher-android/#index","text":"All Types","title":"Index"},{"location":"api/leakcanary-object-watcher-android/alltypes/","text":"All Types \u00b6 Name Summary leakcanary.AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"Home"},{"location":"api/leakcanary-object-watcher-android/alltypes/#all-types","text":"Name Summary leakcanary.AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"All Types"},{"location":"api/leakcanary-object-watcher-android/leakcanary/","text":"leakcanary-object-watcher-android / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary AppWatcher object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"ObjectWatcher Android"},{"location":"api/leakcanary-object-watcher-android/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-object-watcher-android/leakcanary/#types","text":"Name Summary AppWatcher object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"Types"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher AppWatcher \u00b6 object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable. Types \u00b6 Name Summary Config data class Config Properties \u00b6 Name Summary config var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: isInstalled val isInstalled: Boolean objectWatcher val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects. Functions \u00b6 Name Summary manualInstall fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"Home"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#appwatcher","text":"object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"AppWatcher"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#types","text":"Name Summary Config data class Config","title":"Types"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#properties","text":"Name Summary config var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: isInstalled val isInstalled: Boolean objectWatcher val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects.","title":"Properties"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/#functions","text":"Name Summary manualInstall fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"Functions"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / config config \u00b6 var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(enabled = false)","title":"Config"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/config/#config","text":"var config: AppWatcher.Config The current AppWatcher configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(enabled = false)","title":"config"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/is-installed/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / isInstalled isInstalled \u00b6 val isInstalled: Boolean See Also manualInstall","title":"Is installed"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/is-installed/#isinstalled","text":"val isInstalled: Boolean See Also manualInstall","title":"isInstalled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/manual-install/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / manualInstall manualInstall \u00b6 fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"Manual install"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/manual-install/#manualinstall","text":"fun manualInstall(application: Application): Unit AppWatcher is automatically installed on main process start by leakcanary.internal.AppWatcherInstaller which is registered in the AndroidManifest.xml of your app. If you disabled leakcanary.internal.AppWatcherInstaller or you need AppWatcher or LeakCanary to run outside of the main process then you can call this method to install AppWatcher .","title":"manualInstall"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / objectWatcher objectWatcher \u00b6 val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects.","title":"Object watcher"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/object-watcher/#objectwatcher","text":"val objectWatcher: ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects.","title":"objectWatcher"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config Config \u00b6 data class Config Constructors \u00b6 Name Summary <init> Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5)) Properties \u00b6 Name Summary enabled val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). watchActivities val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. watchDurationMillis val watchDurationMillis: Long How long to wait before reporting a watched object as retained. watchFragments val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. watchFragmentViews val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances.","title":"Home"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#config","text":"data class Config","title":"Config"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#constructors","text":"Name Summary <init> Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5))","title":"Constructors"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/#properties","text":"Name Summary enabled val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). watchActivities val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. watchDurationMillis val watchDurationMillis: Long How long to wait before reporting a watched object as retained. watchFragments val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. watchFragmentViews val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances.","title":"Properties"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-init-/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / <init> <init> \u00b6 Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5))","title":" init "},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/-init-/#init","text":"Config(enabled: Boolean = InternalAppWatcher.isDebuggableBuild, watchActivities: Boolean = true, watchFragments: Boolean = true, watchFragmentViews: Boolean = true, watchDurationMillis: Long = TimeUnit.SECONDS.toMillis(5))","title":"&lt;init&gt;"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/enabled/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / enabled enabled \u00b6 val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). Default to true in debuggable builds and false is non debuggable builds.","title":"Enabled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/enabled/#enabled","text":"val enabled: Boolean Whether AppWatcher should watch objects (by keeping weak references to them). Default to true in debuggable builds and false is non debuggable builds.","title":"enabled"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-activities/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchActivities watchActivities \u00b6 val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. Defaults to true.","title":"Watch activities"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-activities/#watchactivities","text":"val watchActivities: Boolean Whether AppWatcher should automatically watch destroyed activity instances. Defaults to true.","title":"watchActivities"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-duration-millis/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchDurationMillis watchDurationMillis \u00b6 val watchDurationMillis: Long How long to wait before reporting a watched object as retained. Default to 5 seconds.","title":"Watch duration millis"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-duration-millis/#watchdurationmillis","text":"val watchDurationMillis: Long How long to wait before reporting a watched object as retained. Default to 5 seconds.","title":"watchDurationMillis"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragment-views/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchFragmentViews watchFragmentViews \u00b6 val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances. Defaults to true.","title":"Watch fragment views"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragment-views/#watchfragmentviews","text":"val watchFragmentViews: Boolean Whether AppWatcher should automatically watch destroyed fragment view instances. Defaults to true.","title":"watchFragmentViews"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragments/","text":"leakcanary-object-watcher-android / leakcanary / AppWatcher / Config / watchFragments watchFragments \u00b6 val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. Defaults to true.","title":"Watch fragments"},{"location":"api/leakcanary-object-watcher-android/leakcanary/-app-watcher/-config/watch-fragments/#watchfragments","text":"val watchFragments: Boolean Whether AppWatcher should automatically watch destroyed fragment instances. Defaults to true.","title":"watchFragments"},{"location":"api/shark/","text":"shark Packages \u00b6 Name Summary shark Index \u00b6 All Types","title":"Home"},{"location":"api/shark/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark/#index","text":"All Types","title":"Index"},{"location":"api/shark/alltypes/","text":"All Types \u00b6 Name Summary shark.ApplicationLeak A leak found by HeapAnalyzer in your application. shark.AppSingletonInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. shark.HeapAnalysis The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. shark.HeapAnalysisException shark.HeapAnalysisFailure The analysis performed by HeapAnalyzer did not complete successfully. shark.HeapAnalysisSuccess The result of a successful heap analysis performed by HeapAnalyzer . shark.HeapAnalyzer Analyzes heap dumps to look for leaks. shark.IgnoredReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. shark.Leak A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . shark.LeakNodeStatus shark.LeakReference A single field in a LeakTraceElement . shark.LeakTrace A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. shark.LeakTraceElement shark.LibraryLeak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. shark.LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . shark.MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . shark.ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. shark.ObjectInspectors A set of default ObjectInspector s that knows about common JDK objects. shark.ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. shark.OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. shark.ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). shark.ReferencePattern A pattern that will match references for a given ReferenceMatcher .","title":"Home"},{"location":"api/shark/alltypes/#all-types","text":"Name Summary shark.ApplicationLeak A leak found by HeapAnalyzer in your application. shark.AppSingletonInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. shark.HeapAnalysis The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. shark.HeapAnalysisException shark.HeapAnalysisFailure The analysis performed by HeapAnalyzer did not complete successfully. shark.HeapAnalysisSuccess The result of a successful heap analysis performed by HeapAnalyzer . shark.HeapAnalyzer Analyzes heap dumps to look for leaks. shark.IgnoredReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. shark.Leak A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . shark.LeakNodeStatus shark.LeakReference A single field in a LeakTraceElement . shark.LeakTrace A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. shark.LeakTraceElement shark.LibraryLeak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. shark.LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . shark.MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . shark.ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. shark.ObjectInspectors A set of default ObjectInspector s that knows about common JDK objects. shark.ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. shark.OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. shark.ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). shark.ReferencePattern A pattern that will match references for a given ReferenceMatcher .","title":"All Types"},{"location":"api/shark/shark/","text":"shark / shark Package shark \u00b6 Types \u00b6 Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. HeapAnalysis sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . HeapAnalyzer class HeapAnalyzer Analyzes heap dumps to look for leaks. IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. Leak sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . LeakNodeStatus enum class LeakNodeStatus LeakReference data class LeakReference : Serializable A single field in a LeakTraceElement . LeakTrace data class LeakTrace : Serializable A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. LeakTraceElement data class LeakTraceElement : Serializable LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . MetadataExtractor interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . ObjectInspector interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. ObjectReporter class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. OnAnalysisProgressListener interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. ReferenceMatcher sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). ReferencePattern sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher . Exceptions \u00b6 Name Summary HeapAnalysisException class HeapAnalysisException : RuntimeException","title":"Shark"},{"location":"api/shark/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark/shark/#types","text":"Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. HeapAnalysis sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . HeapAnalyzer class HeapAnalyzer Analyzes heap dumps to look for leaks. IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. Leak sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . LeakNodeStatus enum class LeakNodeStatus LeakReference data class LeakReference : Serializable A single field in a LeakTraceElement . LeakTrace data class LeakTrace : Serializable A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. LeakTraceElement data class LeakTraceElement : Serializable LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . MetadataExtractor interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . ObjectInspector interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. ObjectReporter class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. OnAnalysisProgressListener interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. ReferenceMatcher sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). ReferencePattern sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher .","title":"Types"},{"location":"api/shark/shark/#exceptions","text":"Name Summary HeapAnalysisException class HeapAnalysisException : RuntimeException","title":"Exceptions"},{"location":"api/shark/shark/-app-singleton-inspector/","text":"shark / shark / AppSingletonInspector AppSingletonInspector \u00b6 class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. Constructors \u00b6 Name Summary <init> AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-app-singleton-inspector/#appsingletoninspector","text":"class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons.","title":"AppSingletonInspector"},{"location":"api/shark/shark/-app-singleton-inspector/#constructors","text":"Name Summary <init> AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons.","title":"Constructors"},{"location":"api/shark/shark/-app-singleton-inspector/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-app-singleton-inspector/-init-/","text":"shark / shark / AppSingletonInspector / <init> <init> \u00b6 AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons.","title":" init "},{"location":"api/shark/shark/-app-singleton-inspector/-init-/#init","text":"AppSingletonInspector(vararg singletonClasses: String ) Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-app-singleton-inspector/inspect/","text":"shark / shark / AppSingletonInspector / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-app-singleton-inspector/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-application-leak/","text":"shark / shark / ApplicationLeak ApplicationLeak \u00b6 data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. Constructors \u00b6 Name Summary <init> ApplicationLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?) A leak found by HeapAnalyzer in your application. Properties \u00b6 Name Summary className val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName . leakTrace val leakTrace: LeakTrace Shortest path from GC roots to the leaking object. retainedHeapByteSize val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. Inherited Properties \u00b6 Name Summary classSimpleName val classSimpleName: String Returns className stripped of any string content before the last period (included). groupHash val groupHash: String A unique SHA1 hash that represents this group of leaks. Functions \u00b6 Name Summary createGroupHash fun createGroupHash(): String toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-application-leak/#applicationleak","text":"data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application.","title":"ApplicationLeak"},{"location":"api/shark/shark/-application-leak/#constructors","text":"Name Summary <init> ApplicationLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?) A leak found by HeapAnalyzer in your application.","title":"Constructors"},{"location":"api/shark/shark/-application-leak/#properties","text":"Name Summary className val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName . leakTrace val leakTrace: LeakTrace Shortest path from GC roots to the leaking object. retainedHeapByteSize val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"Properties"},{"location":"api/shark/shark/-application-leak/#inherited-properties","text":"Name Summary classSimpleName val classSimpleName: String Returns className stripped of any string content before the last period (included). groupHash val groupHash: String A unique SHA1 hash that represents this group of leaks.","title":"Inherited Properties"},{"location":"api/shark/shark/-application-leak/#functions","text":"Name Summary createGroupHash fun createGroupHash(): String toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-application-leak/-init-/","text":"shark / shark / ApplicationLeak / <init> <init> \u00b6 ApplicationLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?) A leak found by HeapAnalyzer in your application.","title":" init "},{"location":"api/shark/shark/-application-leak/-init-/#init","text":"ApplicationLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?) A leak found by HeapAnalyzer in your application.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-application-leak/class-name/","text":"shark / shark / ApplicationLeak / className className \u00b6 val className: String Overrides Leak.className Class name of the leaking object. The class name format is the same as what would be returned by Class.getName .","title":"Class name"},{"location":"api/shark/shark/-application-leak/class-name/#classname","text":"val className: String Overrides Leak.className Class name of the leaking object. The class name format is the same as what would be returned by Class.getName .","title":"className"},{"location":"api/shark/shark/-application-leak/create-group-hash/","text":"shark / shark / ApplicationLeak / createGroupHash createGroupHash \u00b6 protected fun createGroupHash(): String Overrides Leak.createGroupHash","title":"Create group hash"},{"location":"api/shark/shark/-application-leak/create-group-hash/#creategrouphash","text":"protected fun createGroupHash(): String Overrides Leak.createGroupHash","title":"createGroupHash"},{"location":"api/shark/shark/-application-leak/leak-trace/","text":"shark / shark / ApplicationLeak / leakTrace leakTrace \u00b6 val leakTrace: LeakTrace Overrides Leak.leakTrace Shortest path from GC roots to the leaking object.","title":"Leak trace"},{"location":"api/shark/shark/-application-leak/leak-trace/#leaktrace","text":"val leakTrace: LeakTrace Overrides Leak.leakTrace Shortest path from GC roots to the leaking object.","title":"leakTrace"},{"location":"api/shark/shark/-application-leak/retained-heap-byte-size/","text":"shark / shark / ApplicationLeak / retainedHeapByteSize retainedHeapByteSize \u00b6 val retainedHeapByteSize: Int ? Overrides Leak.retainedHeapByteSize The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"Retained heap byte size"},{"location":"api/shark/shark/-application-leak/retained-heap-byte-size/#retainedheapbytesize","text":"val retainedHeapByteSize: Int ? Overrides Leak.retainedHeapByteSize The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"retainedHeapByteSize"},{"location":"api/shark/shark/-application-leak/to-string/","text":"shark / shark / ApplicationLeak / toString toString \u00b6 fun toString(): String Overrides Leak.toString","title":"To string"},{"location":"api/shark/shark/-application-leak/to-string/#tostring","text":"fun toString(): String Overrides Leak.toString","title":"toString"},{"location":"api/shark/shark/-heap-analysis/","text":"shark / shark / HeapAnalysis HeapAnalysis \u00b6 sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. Properties \u00b6 Name Summary analysisDurationMillis abstract val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile abstract val heapDumpFile: File The hprof file that was analyzed. Inheritors \u00b6 Name Summary HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer .","title":"Home"},{"location":"api/shark/shark/-heap-analysis/#heapanalysis","text":"sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility.","title":"HeapAnalysis"},{"location":"api/shark/shark/-heap-analysis/#properties","text":"Name Summary analysisDurationMillis abstract val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile abstract val heapDumpFile: File The hprof file that was analyzed.","title":"Properties"},{"location":"api/shark/shark/-heap-analysis/#inheritors","text":"Name Summary HeapAnalysisFailure data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer .","title":"Inheritors"},{"location":"api/shark/shark/-heap-analysis/analysis-duration-millis/","text":"shark / shark / HeapAnalysis / analysisDurationMillis analysisDurationMillis \u00b6 abstract val analysisDurationMillis: Long Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis/analysis-duration-millis/#analysisdurationmillis","text":"abstract val analysisDurationMillis: Long Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis/created-at-time-millis/","text":"shark / shark / HeapAnalysis / createdAtTimeMillis createdAtTimeMillis \u00b6 abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis/created-at-time-millis/#createdattimemillis","text":"abstract val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis/heap-dump-file/","text":"shark / shark / HeapAnalysis / heapDumpFile heapDumpFile \u00b6 abstract val heapDumpFile: File The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis/heap-dump-file/#heapdumpfile","text":"abstract val heapDumpFile: File The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-exception/","text":"shark / shark / HeapAnalysisException HeapAnalysisException \u00b6 class HeapAnalysisException : RuntimeException Constructors \u00b6 Name Summary <init> HeapAnalysisException(cause: Throwable ) Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-heap-analysis-exception/#heapanalysisexception","text":"class HeapAnalysisException : RuntimeException","title":"HeapAnalysisException"},{"location":"api/shark/shark/-heap-analysis-exception/#constructors","text":"Name Summary <init> HeapAnalysisException(cause: Throwable )","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-exception/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-exception/-init-/","text":"shark / shark / HeapAnalysisException / <init> <init> \u00b6 HeapAnalysisException(cause: Throwable )","title":" init "},{"location":"api/shark/shark/-heap-analysis-exception/-init-/#init","text":"HeapAnalysisException(cause: Throwable )","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analysis-exception/to-string/","text":"shark / shark / HeapAnalysisException / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-exception/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-failure/","text":"shark / shark / HeapAnalysisFailure HeapAnalysisFailure \u00b6 data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. Constructors \u00b6 Name Summary <init> HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully. Properties \u00b6 Name Summary analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. exception val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown. heapDumpFile val heapDumpFile: File The hprof file that was analyzed. Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-heap-analysis-failure/#heapanalysisfailure","text":"data class HeapAnalysisFailure : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully.","title":"HeapAnalysisFailure"},{"location":"api/shark/shark/-heap-analysis-failure/#constructors","text":"Name Summary <init> HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully.","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-failure/#properties","text":"Name Summary analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. exception val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown. heapDumpFile val heapDumpFile: File The hprof file that was analyzed.","title":"Properties"},{"location":"api/shark/shark/-heap-analysis-failure/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-failure/-init-/","text":"shark / shark / HeapAnalysisFailure / <init> <init> \u00b6 HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully.","title":" init "},{"location":"api/shark/shark/-heap-analysis-failure/-init-/#init","text":"HeapAnalysisFailure(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) The analysis performed by HeapAnalyzer did not complete successfully.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analysis-failure/analysis-duration-millis/","text":"shark / shark / HeapAnalysisFailure / analysisDurationMillis analysisDurationMillis \u00b6 val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis-failure/analysis-duration-millis/#analysisdurationmillis","text":"val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis-failure/created-at-time-millis/","text":"shark / shark / HeapAnalysisFailure / createdAtTimeMillis createdAtTimeMillis \u00b6 val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis-failure/created-at-time-millis/#createdattimemillis","text":"val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis-failure/exception/","text":"shark / shark / HeapAnalysisFailure / exception exception \u00b6 val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown.","title":"Exception"},{"location":"api/shark/shark/-heap-analysis-failure/exception/#exception","text":"val exception: HeapAnalysisException An exception wrapping the actual exception that was thrown.","title":"exception"},{"location":"api/shark/shark/-heap-analysis-failure/heap-dump-file/","text":"shark / shark / HeapAnalysisFailure / heapDumpFile heapDumpFile \u00b6 val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis-failure/heap-dump-file/#heapdumpfile","text":"val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-failure/to-string/","text":"shark / shark / HeapAnalysisFailure / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-failure/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-success/","text":"shark / shark / HeapAnalysisSuccess HeapAnalysisSuccess \u00b6 data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . Constructors \u00b6 Name Summary <init> HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >) The result of a successful heap analysis performed by HeapAnalyzer . Properties \u00b6 Name Summary allLeaks val allLeaks: List < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list. analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. applicationLeaks val applicationLeaks: List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer . createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile val heapDumpFile: File The hprof file that was analyzed. libraryLeaks val libraryLeaks: List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer . metadata val metadata: Map < String , String > Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-heap-analysis-success/#heapanalysissuccess","text":"data class HeapAnalysisSuccess : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer .","title":"HeapAnalysisSuccess"},{"location":"api/shark/shark/-heap-analysis-success/#constructors","text":"Name Summary <init> HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >) The result of a successful heap analysis performed by HeapAnalyzer .","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-success/#properties","text":"Name Summary allLeaks val allLeaks: List < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list. analysisDurationMillis val analysisDurationMillis: Long Total time spent analyzing the heap. applicationLeaks val applicationLeaks: List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer . createdAtTimeMillis val createdAtTimeMillis: Long The System.currentTimeMillis when this HeapAnalysis instance was created. heapDumpFile val heapDumpFile: File The hprof file that was analyzed. libraryLeaks val libraryLeaks: List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer . metadata val metadata: Map < String , String >","title":"Properties"},{"location":"api/shark/shark/-heap-analysis-success/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-success/-init-/","text":"shark / shark / HeapAnalysisSuccess / <init> <init> \u00b6 HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >) The result of a successful heap analysis performed by HeapAnalyzer .","title":" init "},{"location":"api/shark/shark/-heap-analysis-success/-init-/#init","text":"HeapAnalysisSuccess(heapDumpFile: File , createdAtTimeMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >) The result of a successful heap analysis performed by HeapAnalyzer .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analysis-success/all-leaks/","text":"shark / shark / HeapAnalysisSuccess / allLeaks allLeaks \u00b6 val allLeaks: List < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list.","title":"All leaks"},{"location":"api/shark/shark/-heap-analysis-success/all-leaks/#allleaks","text":"val allLeaks: List < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list.","title":"allLeaks"},{"location":"api/shark/shark/-heap-analysis-success/analysis-duration-millis/","text":"shark / shark / HeapAnalysisSuccess / analysisDurationMillis analysisDurationMillis \u00b6 val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis-success/analysis-duration-millis/#analysisdurationmillis","text":"val analysisDurationMillis: Long Overrides HeapAnalysis.analysisDurationMillis Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis-success/application-leaks/","text":"shark / shark / HeapAnalysisSuccess / applicationLeaks applicationLeaks \u00b6 val applicationLeaks: List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer .","title":"Application leaks"},{"location":"api/shark/shark/-heap-analysis-success/application-leaks/#applicationleaks","text":"val applicationLeaks: List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer .","title":"applicationLeaks"},{"location":"api/shark/shark/-heap-analysis-success/created-at-time-millis/","text":"shark / shark / HeapAnalysisSuccess / createdAtTimeMillis createdAtTimeMillis \u00b6 val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis-success/created-at-time-millis/#createdattimemillis","text":"val createdAtTimeMillis: Long Overrides HeapAnalysis.createdAtTimeMillis The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis-success/heap-dump-file/","text":"shark / shark / HeapAnalysisSuccess / heapDumpFile heapDumpFile \u00b6 val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis-success/heap-dump-file/#heapdumpfile","text":"val heapDumpFile: File Overrides HeapAnalysis.heapDumpFile The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-success/library-leaks/","text":"shark / shark / HeapAnalysisSuccess / libraryLeaks libraryLeaks \u00b6 val libraryLeaks: List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer .","title":"Library leaks"},{"location":"api/shark/shark/-heap-analysis-success/library-leaks/#libraryleaks","text":"val libraryLeaks: List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer .","title":"libraryLeaks"},{"location":"api/shark/shark/-heap-analysis-success/metadata/","text":"shark / shark / HeapAnalysisSuccess / metadata metadata \u00b6 val metadata: Map < String , String >","title":"Metadata"},{"location":"api/shark/shark/-heap-analysis-success/metadata/#metadata","text":"val metadata: Map < String , String >","title":"metadata"},{"location":"api/shark/shark/-heap-analysis-success/to-string/","text":"shark / shark / HeapAnalysisSuccess / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-success/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-heap-analyzer/","text":"shark / shark / HeapAnalyzer HeapAnalyzer \u00b6 class HeapAnalyzer Analyzes heap dumps to look for leaks. Constructors \u00b6 Name Summary <init> HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks. Functions \u00b6 Name Summary analyze fun analyze(heapDumpFile: File , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), leakFinders: List < ObjectInspector > = objectInspectors, metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"Home"},{"location":"api/shark/shark/-heap-analyzer/#heapanalyzer","text":"class HeapAnalyzer Analyzes heap dumps to look for leaks.","title":"HeapAnalyzer"},{"location":"api/shark/shark/-heap-analyzer/#constructors","text":"Name Summary <init> HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks.","title":"Constructors"},{"location":"api/shark/shark/-heap-analyzer/#functions","text":"Name Summary analyze fun analyze(heapDumpFile: File , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), leakFinders: List < ObjectInspector > = objectInspectors, metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"Functions"},{"location":"api/shark/shark/-heap-analyzer/-init-/","text":"shark / shark / HeapAnalyzer / <init> <init> \u00b6 HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks.","title":" init "},{"location":"api/shark/shark/-heap-analyzer/-init-/#init","text":"HeapAnalyzer(listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-heap-analyzer/analyze/","text":"shark / shark / HeapAnalyzer / analyze analyze \u00b6 fun analyze(heapDumpFile: File , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), leakFinders: List < ObjectInspector > = objectInspectors, metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"Analyze"},{"location":"api/shark/shark/-heap-analyzer/analyze/#analyze","text":"fun analyze(heapDumpFile: File , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), leakFinders: List < ObjectInspector > = objectInspectors, metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP, proguardMapping: ProguardMapping? = null): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"analyze"},{"location":"api/shark/shark/-ignored-reference-matcher/","text":"shark / shark / IgnoredReferenceMatcher IgnoredReferenceMatcher \u00b6 class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. Constructors \u00b6 Name Summary <init> IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. Properties \u00b6 Name Summary pattern val pattern: ReferencePattern The pattern that references will be matched against. Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-ignored-reference-matcher/#ignoredreferencematcher","text":"class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":"IgnoredReferenceMatcher"},{"location":"api/shark/shark/-ignored-reference-matcher/#constructors","text":"Name Summary <init> IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":"Constructors"},{"location":"api/shark/shark/-ignored-reference-matcher/#properties","text":"Name Summary pattern val pattern: ReferencePattern The pattern that references will be matched against.","title":"Properties"},{"location":"api/shark/shark/-ignored-reference-matcher/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-ignored-reference-matcher/-init-/","text":"shark / shark / IgnoredReferenceMatcher / <init> <init> \u00b6 IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":" init "},{"location":"api/shark/shark/-ignored-reference-matcher/-init-/#init","text":"IgnoredReferenceMatcher(pattern: ReferencePattern ) IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-ignored-reference-matcher/pattern/","text":"shark / shark / IgnoredReferenceMatcher / pattern pattern \u00b6 val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-ignored-reference-matcher/pattern/#pattern","text":"val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-ignored-reference-matcher/to-string/","text":"shark / shark / IgnoredReferenceMatcher / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-ignored-reference-matcher/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-leak/","text":"shark / shark / Leak Leak \u00b6 sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . Properties \u00b6 Name Summary className abstract val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName . classSimpleName val classSimpleName: String Returns className stripped of any string content before the last period (included). groupHash val groupHash: String A unique SHA1 hash that represents this group of leaks. leakTrace abstract val leakTrace: LeakTrace Shortest path from GC roots to the leaking object. retainedHeapByteSize abstract val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. Functions \u00b6 Name Summary createGroupHash abstract fun createGroupHash(): String toString open fun toString(): String Inheritors \u00b6 Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"Home"},{"location":"api/shark/shark/-leak/#leak","text":"sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak .","title":"Leak"},{"location":"api/shark/shark/-leak/#properties","text":"Name Summary className abstract val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName . classSimpleName val classSimpleName: String Returns className stripped of any string content before the last period (included). groupHash val groupHash: String A unique SHA1 hash that represents this group of leaks. leakTrace abstract val leakTrace: LeakTrace Shortest path from GC roots to the leaking object. retainedHeapByteSize abstract val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"Properties"},{"location":"api/shark/shark/-leak/#functions","text":"Name Summary createGroupHash abstract fun createGroupHash(): String toString open fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-leak/#inheritors","text":"Name Summary ApplicationLeak data class ApplicationLeak : Leak A leak found by HeapAnalyzer in your application. LibraryLeak data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"Inheritors"},{"location":"api/shark/shark/-leak/class-name/","text":"shark / shark / Leak / className className \u00b6 abstract val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName .","title":"Class name"},{"location":"api/shark/shark/-leak/class-name/#classname","text":"abstract val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName .","title":"className"},{"location":"api/shark/shark/-leak/class-simple-name/","text":"shark / shark / Leak / classSimpleName classSimpleName \u00b6 val classSimpleName: String Returns className stripped of any string content before the last period (included).","title":"Class simple name"},{"location":"api/shark/shark/-leak/class-simple-name/#classsimplename","text":"val classSimpleName: String Returns className stripped of any string content before the last period (included).","title":"classSimpleName"},{"location":"api/shark/shark/-leak/create-group-hash/","text":"shark / shark / Leak / createGroupHash createGroupHash \u00b6 protected abstract fun createGroupHash(): String","title":"Create group hash"},{"location":"api/shark/shark/-leak/create-group-hash/#creategrouphash","text":"protected abstract fun createGroupHash(): String","title":"createGroupHash"},{"location":"api/shark/shark/-leak/group-hash/","text":"shark / shark / Leak / groupHash groupHash \u00b6 val groupHash: String A unique SHA1 hash that represents this group of leaks. For ApplicationLeak this is based on LeakTrace.leakCauses and for LibraryLeak this is based on LibraryLeak.pattern .","title":"Group hash"},{"location":"api/shark/shark/-leak/group-hash/#grouphash","text":"val groupHash: String A unique SHA1 hash that represents this group of leaks. For ApplicationLeak this is based on LeakTrace.leakCauses and for LibraryLeak this is based on LibraryLeak.pattern .","title":"groupHash"},{"location":"api/shark/shark/-leak/leak-trace/","text":"shark / shark / Leak / leakTrace leakTrace \u00b6 abstract val leakTrace: LeakTrace Shortest path from GC roots to the leaking object.","title":"Leak trace"},{"location":"api/shark/shark/-leak/leak-trace/#leaktrace","text":"abstract val leakTrace: LeakTrace Shortest path from GC roots to the leaking object.","title":"leakTrace"},{"location":"api/shark/shark/-leak/retained-heap-byte-size/","text":"shark / shark / Leak / retainedHeapByteSize retainedHeapByteSize \u00b6 abstract val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"Retained heap byte size"},{"location":"api/shark/shark/-leak/retained-heap-byte-size/#retainedheapbytesize","text":"abstract val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"retainedHeapByteSize"},{"location":"api/shark/shark/-leak/to-string/","text":"shark / shark / Leak / toString toString \u00b6 open fun toString(): String","title":"To string"},{"location":"api/shark/shark/-leak/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"api/shark/shark/-leak-node-status/","text":"shark / shark / LeakNodeStatus LeakNodeStatus \u00b6 enum class LeakNodeStatus Enum Values \u00b6 Name Summary NOT_LEAKING The instance was needed and therefore expected to be reachable. LEAKING The instance was no longer needed and therefore expected to be unreachable. UNKNOWN No decision can be made about the provided instance.","title":"Home"},{"location":"api/shark/shark/-leak-node-status/#leaknodestatus","text":"enum class LeakNodeStatus","title":"LeakNodeStatus"},{"location":"api/shark/shark/-leak-node-status/#enum-values","text":"Name Summary NOT_LEAKING The instance was needed and therefore expected to be reachable. LEAKING The instance was no longer needed and therefore expected to be unreachable. UNKNOWN No decision can be made about the provided instance.","title":"Enum Values"},{"location":"api/shark/shark/-leak-node-status/-l-e-a-k-i-n-g/","text":"shark / shark / LeakNodeStatus / LEAKING LEAKING \u00b6 LEAKING The instance was no longer needed and therefore expected to be unreachable.","title":" l e a k i n g"},{"location":"api/shark/shark/-leak-node-status/-l-e-a-k-i-n-g/#leaking","text":"LEAKING The instance was no longer needed and therefore expected to be unreachable.","title":"LEAKING"},{"location":"api/shark/shark/-leak-node-status/-n-o-t_-l-e-a-k-i-n-g/","text":"shark / shark / LeakNodeStatus / NOT_LEAKING NOT_LEAKING \u00b6 NOT_LEAKING The instance was needed and therefore expected to be reachable.","title":" n o t  l e a k i n g"},{"location":"api/shark/shark/-leak-node-status/-n-o-t_-l-e-a-k-i-n-g/#not_leaking","text":"NOT_LEAKING The instance was needed and therefore expected to be reachable.","title":"NOT_LEAKING"},{"location":"api/shark/shark/-leak-node-status/-u-n-k-n-o-w-n/","text":"shark / shark / LeakNodeStatus / UNKNOWN UNKNOWN \u00b6 UNKNOWN No decision can be made about the provided instance.","title":" u n k n o w n"},{"location":"api/shark/shark/-leak-node-status/-u-n-k-n-o-w-n/#unknown","text":"UNKNOWN No decision can be made about the provided instance.","title":"UNKNOWN"},{"location":"api/shark/shark/-leak-reference/","text":"shark / shark / LeakReference LeakReference \u00b6 data class LeakReference : Serializable A single field in a LeakTraceElement . Constructors \u00b6 Name Summary <init> LeakReference(type: LeakTraceElement.Type , name: String ) A single field in a LeakTraceElement . Properties \u00b6 Name Summary displayName val displayName: String groupingName val groupingName: String name val name: String type val type: LeakTraceElement.Type","title":"Home"},{"location":"api/shark/shark/-leak-reference/#leakreference","text":"data class LeakReference : Serializable A single field in a LeakTraceElement .","title":"LeakReference"},{"location":"api/shark/shark/-leak-reference/#constructors","text":"Name Summary <init> LeakReference(type: LeakTraceElement.Type , name: String ) A single field in a LeakTraceElement .","title":"Constructors"},{"location":"api/shark/shark/-leak-reference/#properties","text":"Name Summary displayName val displayName: String groupingName val groupingName: String name val name: String type val type: LeakTraceElement.Type","title":"Properties"},{"location":"api/shark/shark/-leak-reference/-init-/","text":"shark / shark / LeakReference / <init> <init> \u00b6 LeakReference(type: LeakTraceElement.Type , name: String ) A single field in a LeakTraceElement .","title":" init "},{"location":"api/shark/shark/-leak-reference/-init-/#init","text":"LeakReference(type: LeakTraceElement.Type , name: String ) A single field in a LeakTraceElement .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-leak-reference/display-name/","text":"shark / shark / LeakReference / displayName displayName \u00b6 val displayName: String","title":"Display name"},{"location":"api/shark/shark/-leak-reference/display-name/#displayname","text":"val displayName: String","title":"displayName"},{"location":"api/shark/shark/-leak-reference/grouping-name/","text":"shark / shark / LeakReference / groupingName groupingName \u00b6 val groupingName: String","title":"Grouping name"},{"location":"api/shark/shark/-leak-reference/grouping-name/#groupingname","text":"val groupingName: String","title":"groupingName"},{"location":"api/shark/shark/-leak-reference/name/","text":"shark / shark / LeakReference / name name \u00b6 val name: String","title":"Name"},{"location":"api/shark/shark/-leak-reference/name/#name","text":"val name: String","title":"name"},{"location":"api/shark/shark/-leak-reference/type/","text":"shark / shark / LeakReference / type type \u00b6 val type: LeakTraceElement.Type","title":"Type"},{"location":"api/shark/shark/-leak-reference/type/#type","text":"val type: LeakTraceElement.Type","title":"type"},{"location":"api/shark/shark/-leak-trace/","text":"shark / shark / LeakTrace LeakTrace \u00b6 data class LeakTrace : Serializable A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. Constructors \u00b6 Name Summary <init> LeakTrace(elements: List < LeakTraceElement >) A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain. Properties \u00b6 Name Summary elements val elements: List < LeakTraceElement > leakCauses val leakCauses: List < LeakTraceElement > Functions \u00b6 Name Summary elementMayBeLeakCause fun elementMayBeLeakCause(index: Int ): Boolean toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-leak-trace/#leaktrace","text":"data class LeakTrace : Serializable A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain.","title":"LeakTrace"},{"location":"api/shark/shark/-leak-trace/#constructors","text":"Name Summary <init> LeakTrace(elements: List < LeakTraceElement >) A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain.","title":"Constructors"},{"location":"api/shark/shark/-leak-trace/#properties","text":"Name Summary elements val elements: List < LeakTraceElement > leakCauses val leakCauses: List < LeakTraceElement >","title":"Properties"},{"location":"api/shark/shark/-leak-trace/#functions","text":"Name Summary elementMayBeLeakCause fun elementMayBeLeakCause(index: Int ): Boolean toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-leak-trace/-init-/","text":"shark / shark / LeakTrace / <init> <init> \u00b6 LeakTrace(elements: List < LeakTraceElement >) A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain.","title":" init "},{"location":"api/shark/shark/-leak-trace/-init-/#init","text":"LeakTrace(elements: List < LeakTraceElement >) A chain of references that constitute the shortest strong reference path from a GC root to the leaking object. Fixing the leak usually means breaking one of the references in that chain.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-leak-trace/element-may-be-leak-cause/","text":"shark / shark / LeakTrace / elementMayBeLeakCause elementMayBeLeakCause \u00b6 fun elementMayBeLeakCause(index: Int ): Boolean","title":"Element may be leak cause"},{"location":"api/shark/shark/-leak-trace/element-may-be-leak-cause/#elementmaybeleakcause","text":"fun elementMayBeLeakCause(index: Int ): Boolean","title":"elementMayBeLeakCause"},{"location":"api/shark/shark/-leak-trace/elements/","text":"shark / shark / LeakTrace / elements elements \u00b6 val elements: List < LeakTraceElement >","title":"Elements"},{"location":"api/shark/shark/-leak-trace/elements/#elements","text":"val elements: List < LeakTraceElement >","title":"elements"},{"location":"api/shark/shark/-leak-trace/leak-causes/","text":"shark / shark / LeakTrace / leakCauses leakCauses \u00b6 val leakCauses: List < LeakTraceElement >","title":"Leak causes"},{"location":"api/shark/shark/-leak-trace/leak-causes/#leakcauses","text":"val leakCauses: List < LeakTraceElement >","title":"leakCauses"},{"location":"api/shark/shark/-leak-trace/to-string/","text":"shark / shark / LeakTrace / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-leak-trace/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-leak-trace-element/","text":"shark / shark / LeakTraceElement LeakTraceElement \u00b6 data class LeakTraceElement : Serializable Types \u00b6 Name Summary Holder enum class Holder Type enum class Type Constructors \u00b6 Name Summary <init> LeakTraceElement(reference: LeakReference ?, holder: LeakTraceElement.Holder , className: String , labels: Set < String >, leakStatus: LeakNodeStatus , leakStatusReason: String ) Properties \u00b6 Name Summary className val className: String classSimpleName val classSimpleName: String Returns {@link #className} without the package. holder val holder: LeakTraceElement.Holder labels val labels: Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the leak trace element. leakStatus val leakStatus: LeakNodeStatus leakStatusReason val leakStatusReason: String reference val reference: LeakReference ? Information about the reference that points to the next LeakTraceElement in LeakTrace.elements . Null if this is the last element in the leak trace, ie the leaking object.","title":"Home"},{"location":"api/shark/shark/-leak-trace-element/#leaktraceelement","text":"data class LeakTraceElement : Serializable","title":"LeakTraceElement"},{"location":"api/shark/shark/-leak-trace-element/#types","text":"Name Summary Holder enum class Holder Type enum class Type","title":"Types"},{"location":"api/shark/shark/-leak-trace-element/#constructors","text":"Name Summary <init> LeakTraceElement(reference: LeakReference ?, holder: LeakTraceElement.Holder , className: String , labels: Set < String >, leakStatus: LeakNodeStatus , leakStatusReason: String )","title":"Constructors"},{"location":"api/shark/shark/-leak-trace-element/#properties","text":"Name Summary className val className: String classSimpleName val classSimpleName: String Returns {@link #className} without the package. holder val holder: LeakTraceElement.Holder labels val labels: Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the leak trace element. leakStatus val leakStatus: LeakNodeStatus leakStatusReason val leakStatusReason: String reference val reference: LeakReference ? Information about the reference that points to the next LeakTraceElement in LeakTrace.elements . Null if this is the last element in the leak trace, ie the leaking object.","title":"Properties"},{"location":"api/shark/shark/-leak-trace-element/-init-/","text":"shark / shark / LeakTraceElement / <init> <init> \u00b6 LeakTraceElement(reference: LeakReference ?, holder: LeakTraceElement.Holder , className: String , labels: Set < String >, leakStatus: LeakNodeStatus , leakStatusReason: String )","title":" init "},{"location":"api/shark/shark/-leak-trace-element/-init-/#init","text":"LeakTraceElement(reference: LeakReference ?, holder: LeakTraceElement.Holder , className: String , labels: Set < String >, leakStatus: LeakNodeStatus , leakStatusReason: String )","title":"&lt;init&gt;"},{"location":"api/shark/shark/-leak-trace-element/class-name/","text":"shark / shark / LeakTraceElement / className className \u00b6 val className: String","title":"Class name"},{"location":"api/shark/shark/-leak-trace-element/class-name/#classname","text":"val className: String","title":"className"},{"location":"api/shark/shark/-leak-trace-element/class-simple-name/","text":"shark / shark / LeakTraceElement / classSimpleName classSimpleName \u00b6 val classSimpleName: String Returns {@link #className} without the package.","title":"Class simple name"},{"location":"api/shark/shark/-leak-trace-element/class-simple-name/#classsimplename","text":"val classSimpleName: String Returns {@link #className} without the package.","title":"classSimpleName"},{"location":"api/shark/shark/-leak-trace-element/holder/","text":"shark / shark / LeakTraceElement / holder holder \u00b6 val holder: LeakTraceElement.Holder","title":"Holder"},{"location":"api/shark/shark/-leak-trace-element/holder/#holder","text":"val holder: LeakTraceElement.Holder","title":"holder"},{"location":"api/shark/shark/-leak-trace-element/labels/","text":"shark / shark / LeakTraceElement / labels labels \u00b6 val labels: Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the leak trace element.","title":"Labels"},{"location":"api/shark/shark/-leak-trace-element/labels/#labels","text":"val labels: Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the leak trace element.","title":"labels"},{"location":"api/shark/shark/-leak-trace-element/leak-status-reason/","text":"shark / shark / LeakTraceElement / leakStatusReason leakStatusReason \u00b6 val leakStatusReason: String","title":"Leak status reason"},{"location":"api/shark/shark/-leak-trace-element/leak-status-reason/#leakstatusreason","text":"val leakStatusReason: String","title":"leakStatusReason"},{"location":"api/shark/shark/-leak-trace-element/leak-status/","text":"shark / shark / LeakTraceElement / leakStatus leakStatus \u00b6 val leakStatus: LeakNodeStatus","title":"Leak status"},{"location":"api/shark/shark/-leak-trace-element/leak-status/#leakstatus","text":"val leakStatus: LeakNodeStatus","title":"leakStatus"},{"location":"api/shark/shark/-leak-trace-element/reference/","text":"shark / shark / LeakTraceElement / reference reference \u00b6 val reference: LeakReference ? Information about the reference that points to the next LeakTraceElement in LeakTrace.elements . Null if this is the last element in the leak trace, ie the leaking object.","title":"Reference"},{"location":"api/shark/shark/-leak-trace-element/reference/#reference","text":"val reference: LeakReference ? Information about the reference that points to the next LeakTraceElement in LeakTrace.elements . Null if this is the last element in the leak trace, ie the leaking object.","title":"reference"},{"location":"api/shark/shark/-leak-trace-element/-holder/","text":"shark / shark / LeakTraceElement / Holder Holder \u00b6 enum class Holder Enum Values \u00b6 Name Summary OBJECT CLASS THREAD ARRAY","title":"Home"},{"location":"api/shark/shark/-leak-trace-element/-holder/#holder","text":"enum class Holder","title":"Holder"},{"location":"api/shark/shark/-leak-trace-element/-holder/#enum-values","text":"Name Summary OBJECT CLASS THREAD ARRAY","title":"Enum Values"},{"location":"api/shark/shark/-leak-trace-element/-holder/-a-r-r-a-y/","text":"shark / shark / LeakTraceElement / Holder / ARRAY ARRAY \u00b6 ARRAY","title":" a r r a y"},{"location":"api/shark/shark/-leak-trace-element/-holder/-a-r-r-a-y/#array","text":"ARRAY","title":"ARRAY"},{"location":"api/shark/shark/-leak-trace-element/-holder/-c-l-a-s-s/","text":"shark / shark / LeakTraceElement / Holder / CLASS CLASS \u00b6 CLASS","title":" c l a s s"},{"location":"api/shark/shark/-leak-trace-element/-holder/-c-l-a-s-s/#class","text":"CLASS","title":"CLASS"},{"location":"api/shark/shark/-leak-trace-element/-holder/-o-b-j-e-c-t/","text":"shark / shark / LeakTraceElement / Holder / OBJECT OBJECT \u00b6 OBJECT","title":" o b j e c t"},{"location":"api/shark/shark/-leak-trace-element/-holder/-o-b-j-e-c-t/#object","text":"OBJECT","title":"OBJECT"},{"location":"api/shark/shark/-leak-trace-element/-holder/-t-h-r-e-a-d/","text":"shark / shark / LeakTraceElement / Holder / THREAD THREAD \u00b6 THREAD","title":" t h r e a d"},{"location":"api/shark/shark/-leak-trace-element/-holder/-t-h-r-e-a-d/#thread","text":"THREAD","title":"THREAD"},{"location":"api/shark/shark/-leak-trace-element/-type/","text":"shark / shark / LeakTraceElement / Type Type \u00b6 enum class Type Enum Values \u00b6 Name Summary INSTANCE_FIELD STATIC_FIELD LOCAL ARRAY_ENTRY","title":"Home"},{"location":"api/shark/shark/-leak-trace-element/-type/#type","text":"enum class Type","title":"Type"},{"location":"api/shark/shark/-leak-trace-element/-type/#enum-values","text":"Name Summary INSTANCE_FIELD STATIC_FIELD LOCAL ARRAY_ENTRY","title":"Enum Values"},{"location":"api/shark/shark/-leak-trace-element/-type/-a-r-r-a-y_-e-n-t-r-y/","text":"shark / shark / LeakTraceElement / Type / ARRAY_ENTRY ARRAY_ENTRY \u00b6 ARRAY_ENTRY","title":" a r r a y  e n t r y"},{"location":"api/shark/shark/-leak-trace-element/-type/-a-r-r-a-y_-e-n-t-r-y/#array_entry","text":"ARRAY_ENTRY","title":"ARRAY_ENTRY"},{"location":"api/shark/shark/-leak-trace-element/-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d/","text":"shark / shark / LeakTraceElement / Type / INSTANCE_FIELD INSTANCE_FIELD \u00b6 INSTANCE_FIELD","title":" i n s t a n c e  f i e l d"},{"location":"api/shark/shark/-leak-trace-element/-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d/#instance_field","text":"INSTANCE_FIELD","title":"INSTANCE_FIELD"},{"location":"api/shark/shark/-leak-trace-element/-type/-l-o-c-a-l/","text":"shark / shark / LeakTraceElement / Type / LOCAL LOCAL \u00b6 LOCAL","title":" l o c a l"},{"location":"api/shark/shark/-leak-trace-element/-type/-l-o-c-a-l/#local","text":"LOCAL","title":"LOCAL"},{"location":"api/shark/shark/-leak-trace-element/-type/-s-t-a-t-i-c_-f-i-e-l-d/","text":"shark / shark / LeakTraceElement / Type / STATIC_FIELD STATIC_FIELD \u00b6 STATIC_FIELD","title":" s t a t i c  f i e l d"},{"location":"api/shark/shark/-leak-trace-element/-type/-s-t-a-t-i-c_-f-i-e-l-d/#static_field","text":"STATIC_FIELD","title":"STATIC_FIELD"},{"location":"api/shark/shark/-library-leak/","text":"shark / shark / LibraryLeak LibraryLeak \u00b6 data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. Constructors \u00b6 Name Summary <init> LibraryLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?, pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. Properties \u00b6 Name Summary className val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName . description val description: String A description that conveys what we know about this library leak. leakTrace val leakTrace: LeakTrace Shortest path from GC roots to the leaking object. pattern val pattern: ReferencePattern The pattern that matched one of the references in leakTrace , as provided to a LibraryLeakReferenceMatcher instance. retainedHeapByteSize val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed. Inherited Properties \u00b6 Name Summary classSimpleName val classSimpleName: String Returns className stripped of any string content before the last period (included). groupHash val groupHash: String A unique SHA1 hash that represents this group of leaks. Functions \u00b6 Name Summary createGroupHash fun createGroupHash(): String toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-library-leak/#libraryleak","text":"data class LibraryLeak : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"LibraryLeak"},{"location":"api/shark/shark/-library-leak/#constructors","text":"Name Summary <init> LibraryLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?, pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"Constructors"},{"location":"api/shark/shark/-library-leak/#properties","text":"Name Summary className val className: String Class name of the leaking object. The class name format is the same as what would be returned by Class.getName . description val description: String A description that conveys what we know about this library leak. leakTrace val leakTrace: LeakTrace Shortest path from GC roots to the leaking object. pattern val pattern: ReferencePattern The pattern that matched one of the references in leakTrace , as provided to a LibraryLeakReferenceMatcher instance. retainedHeapByteSize val retainedHeapByteSize: Int ? The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"Properties"},{"location":"api/shark/shark/-library-leak/#inherited-properties","text":"Name Summary classSimpleName val classSimpleName: String Returns className stripped of any string content before the last period (included). groupHash val groupHash: String A unique SHA1 hash that represents this group of leaks.","title":"Inherited Properties"},{"location":"api/shark/shark/-library-leak/#functions","text":"Name Summary createGroupHash fun createGroupHash(): String toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-library-leak/-init-/","text":"shark / shark / LibraryLeak / <init> <init> \u00b6 LibraryLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?, pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":" init "},{"location":"api/shark/shark/-library-leak/-init-/#init","text":"LibraryLeak(className: String , leakTrace: LeakTrace , retainedHeapByteSize: Int ?, pattern: ReferencePattern , description: String ) A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-library-leak/class-name/","text":"shark / shark / LibraryLeak / className className \u00b6 val className: String Overrides Leak.className Class name of the leaking object. The class name format is the same as what would be returned by Class.getName .","title":"Class name"},{"location":"api/shark/shark/-library-leak/class-name/#classname","text":"val className: String Overrides Leak.className Class name of the leaking object. The class name format is the same as what would be returned by Class.getName .","title":"className"},{"location":"api/shark/shark/-library-leak/create-group-hash/","text":"shark / shark / LibraryLeak / createGroupHash createGroupHash \u00b6 protected fun createGroupHash(): String Overrides Leak.createGroupHash","title":"Create group hash"},{"location":"api/shark/shark/-library-leak/create-group-hash/#creategrouphash","text":"protected fun createGroupHash(): String Overrides Leak.createGroupHash","title":"createGroupHash"},{"location":"api/shark/shark/-library-leak/description/","text":"shark / shark / LibraryLeak / description description \u00b6 val description: String A description that conveys what we know about this library leak.","title":"Description"},{"location":"api/shark/shark/-library-leak/description/#description","text":"val description: String A description that conveys what we know about this library leak.","title":"description"},{"location":"api/shark/shark/-library-leak/leak-trace/","text":"shark / shark / LibraryLeak / leakTrace leakTrace \u00b6 val leakTrace: LeakTrace Overrides Leak.leakTrace Shortest path from GC roots to the leaking object.","title":"Leak trace"},{"location":"api/shark/shark/-library-leak/leak-trace/#leaktrace","text":"val leakTrace: LeakTrace Overrides Leak.leakTrace Shortest path from GC roots to the leaking object.","title":"leakTrace"},{"location":"api/shark/shark/-library-leak/pattern/","text":"shark / shark / LibraryLeak / pattern pattern \u00b6 val pattern: ReferencePattern The pattern that matched one of the references in leakTrace , as provided to a LibraryLeakReferenceMatcher instance.","title":"Pattern"},{"location":"api/shark/shark/-library-leak/pattern/#pattern","text":"val pattern: ReferencePattern The pattern that matched one of the references in leakTrace , as provided to a LibraryLeakReferenceMatcher instance.","title":"pattern"},{"location":"api/shark/shark/-library-leak/retained-heap-byte-size/","text":"shark / shark / LibraryLeak / retainedHeapByteSize retainedHeapByteSize \u00b6 val retainedHeapByteSize: Int ? Overrides Leak.retainedHeapByteSize The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"Retained heap byte size"},{"location":"api/shark/shark/-library-leak/retained-heap-byte-size/#retainedheapbytesize","text":"val retainedHeapByteSize: Int ? Overrides Leak.retainedHeapByteSize The number of bytes which would be freed if all references to the leaking object were released. Null if the retained heap size was not computed.","title":"retainedHeapByteSize"},{"location":"api/shark/shark/-library-leak/to-string/","text":"shark / shark / LibraryLeak / toString toString \u00b6 fun toString(): String Overrides Leak.toString","title":"To string"},{"location":"api/shark/shark/-library-leak/to-string/#tostring","text":"fun toString(): String Overrides Leak.toString","title":"toString"},{"location":"api/shark/shark/-library-leak-reference-matcher/","text":"shark / shark / LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher \u00b6 data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . Constructors \u00b6 Name Summary <init> LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) -> Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . Properties \u00b6 Name Summary description val description: String A description that conveys what we know about this library leak. pattern val pattern: ReferencePattern The pattern that references will be matched against. patternApplies val patternApplies: (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false. Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-library-leak-reference-matcher/#libraryleakreferencematcher","text":"data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"LibraryLeakReferenceMatcher"},{"location":"api/shark/shark/-library-leak-reference-matcher/#constructors","text":"Name Summary <init> LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) -> Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"Constructors"},{"location":"api/shark/shark/-library-leak-reference-matcher/#properties","text":"Name Summary description val description: String A description that conveys what we know about this library leak. pattern val pattern: ReferencePattern The pattern that references will be matched against. patternApplies val patternApplies: (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false.","title":"Properties"},{"location":"api/shark/shark/-library-leak-reference-matcher/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-library-leak-reference-matcher/-init-/","text":"shark / shark / LibraryLeakReferenceMatcher / <init> <init> \u00b6 LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) -> Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":" init "},{"location":"api/shark/shark/-library-leak-reference-matcher/-init-/#init","text":"LibraryLeakReferenceMatcher(pattern: ReferencePattern , description: String = \"\", patternApplies: (HeapGraph) -> Boolean = { true }) LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-library-leak-reference-matcher/description/","text":"shark / shark / LibraryLeakReferenceMatcher / description description \u00b6 val description: String A description that conveys what we know about this library leak.","title":"Description"},{"location":"api/shark/shark/-library-leak-reference-matcher/description/#description","text":"val description: String A description that conveys what we know about this library leak.","title":"description"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern-applies/","text":"shark / shark / LibraryLeakReferenceMatcher / patternApplies patternApplies \u00b6 val patternApplies: (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false.","title":"Pattern applies"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern-applies/#patternapplies","text":"val patternApplies: (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph . Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false.","title":"patternApplies"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern/","text":"shark / shark / LibraryLeakReferenceMatcher / pattern pattern \u00b6 val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern/#pattern","text":"val pattern: ReferencePattern Overrides ReferenceMatcher.pattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-library-leak-reference-matcher/to-string/","text":"shark / shark / LibraryLeakReferenceMatcher / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-library-leak-reference-matcher/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-metadata-extractor/","text":"shark / shark / MetadataExtractor MetadataExtractor \u00b6 interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . You can create a MetadataExtractor from a lambda by calling invoke . Functions \u00b6 Name Summary extractMetadata abstract fun extractMetadata(graph: HeapGraph): Map < String , String > Companion Object Properties \u00b6 Name Summary NO_OP val NO_OP: MetadataExtractor A no-op MetadataExtractor Companion Object Functions \u00b6 Name Summary invoke operator fun invoke(block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax.","title":"Home"},{"location":"api/shark/shark/-metadata-extractor/#metadataextractor","text":"interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . You can create a MetadataExtractor from a lambda by calling invoke .","title":"MetadataExtractor"},{"location":"api/shark/shark/-metadata-extractor/#functions","text":"Name Summary extractMetadata abstract fun extractMetadata(graph: HeapGraph): Map < String , String >","title":"Functions"},{"location":"api/shark/shark/-metadata-extractor/#companion-object-properties","text":"Name Summary NO_OP val NO_OP: MetadataExtractor A no-op MetadataExtractor","title":"Companion Object Properties"},{"location":"api/shark/shark/-metadata-extractor/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax.","title":"Companion Object Functions"},{"location":"api/shark/shark/-metadata-extractor/-n-o_-o-p/","text":"shark / shark / MetadataExtractor / NO_OP NO_OP \u00b6 val NO_OP: MetadataExtractor A no-op MetadataExtractor","title":" n o  o p"},{"location":"api/shark/shark/-metadata-extractor/-n-o_-o-p/#no_op","text":"val NO_OP: MetadataExtractor A no-op MetadataExtractor","title":"NO_OP"},{"location":"api/shark/shark/-metadata-extractor/extract-metadata/","text":"shark / shark / MetadataExtractor / extractMetadata extractMetadata \u00b6 abstract fun extractMetadata(graph: HeapGraph): Map < String , String >","title":"Extract metadata"},{"location":"api/shark/shark/-metadata-extractor/extract-metadata/#extractmetadata","text":"abstract fun extractMetadata(graph: HeapGraph): Map < String , String >","title":"extractMetadata"},{"location":"api/shark/shark/-metadata-extractor/invoke/","text":"shark / shark / MetadataExtractor / invoke invoke \u00b6 inline operator fun invoke(crossinline block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax. Usage: val inspector = MetadataExtractor { graph -> }","title":"Invoke"},{"location":"api/shark/shark/-metadata-extractor/invoke/#invoke","text":"inline operator fun invoke(crossinline block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax. Usage: val inspector = MetadataExtractor { graph -> }","title":"invoke"},{"location":"api/shark/shark/-object-inspector/","text":"shark / shark / ObjectInspector ObjectInspector \u00b6 interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. You can create a ObjectInspector from a lambda by calling invoke . Functions \u00b6 Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit Companion Object Functions \u00b6 Name Summary invoke operator fun invoke(block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Inheritors \u00b6 Name Summary AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects.","title":"Home"},{"location":"api/shark/shark/-object-inspector/#objectinspector","text":"interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. You can create a ObjectInspector from a lambda by calling invoke .","title":"ObjectInspector"},{"location":"api/shark/shark/-object-inspector/#functions","text":"Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspector/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax.","title":"Companion Object Functions"},{"location":"api/shark/shark/-object-inspector/#inheritors","text":"Name Summary AppSingletonInspector class AppSingletonInspector : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. ObjectInspectors enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects.","title":"Inheritors"},{"location":"api/shark/shark/-object-inspector/inspect/","text":"shark / shark / ObjectInspector / inspect inspect \u00b6 abstract fun inspect(reporter: ObjectReporter ): Unit See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspector/inspect/#inspect","text":"abstract fun inspect(reporter: ObjectReporter ): Unit See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspector/invoke/","text":"shark / shark / ObjectInspector / invoke invoke \u00b6 inline operator fun invoke(crossinline block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val inspector = ObjectInspector { reporter -> }","title":"Invoke"},{"location":"api/shark/shark/-object-inspector/invoke/#invoke","text":"inline operator fun invoke(crossinline block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val inspector = ObjectInspector { reporter -> }","title":"invoke"},{"location":"api/shark/shark/-object-inspectors/","text":"shark / shark / ObjectInspectors ObjectInspectors \u00b6 enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. Enum Values \u00b6 Name Summary KEYED_WEAK_REFERENCE CLASSLOADER CLASS ANONYMOUS_CLASS THREAD Inherited Functions \u00b6 Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit Companion Object Properties \u00b6 Name Summary jdkDefaults val jdkDefaults: List < ObjectInspector >","title":"Home"},{"location":"api/shark/shark/-object-inspectors/#objectinspectors","text":"enum class ObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common JDK objects.","title":"ObjectInspectors"},{"location":"api/shark/shark/-object-inspectors/#enum-values","text":"Name Summary KEYED_WEAK_REFERENCE CLASSLOADER CLASS ANONYMOUS_CLASS THREAD","title":"Enum Values"},{"location":"api/shark/shark/-object-inspectors/#inherited-functions","text":"Name Summary inspect abstract fun inspect(reporter: ObjectReporter ): Unit","title":"Inherited Functions"},{"location":"api/shark/shark/-object-inspectors/#companion-object-properties","text":"Name Summary jdkDefaults val jdkDefaults: List < ObjectInspector >","title":"Companion Object Properties"},{"location":"api/shark/shark/-object-inspectors/jdk-defaults/","text":"shark / shark / ObjectInspectors / jdkDefaults jdkDefaults \u00b6 val jdkDefaults: List < ObjectInspector > See Also ObjectInspectors","title":"Jdk defaults"},{"location":"api/shark/shark/-object-inspectors/jdk-defaults/#jdkdefaults","text":"val jdkDefaults: List < ObjectInspector > See Also ObjectInspectors","title":"jdkDefaults"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/","text":"shark / shark / ObjectInspectors / ANONYMOUS_CLASS ANONYMOUS_CLASS \u00b6 ANONYMOUS_CLASS Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/#anonymous_class","text":"ANONYMOUS_CLASS","title":"ANONYMOUS_CLASS"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect/","text":"shark / shark / ObjectInspectors / ANONYMOUS_CLASS / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/","text":"shark / shark / ObjectInspectors / CLASS CLASS \u00b6 CLASS Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/#class","text":"CLASS","title":"CLASS"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect/","text":"shark / shark / ObjectInspectors / CLASS / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/","text":"shark / shark / ObjectInspectors / CLASSLOADER CLASSLOADER \u00b6 CLASSLOADER Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/#classloader","text":"CLASSLOADER","title":"CLASSLOADER"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect/","text":"shark / shark / ObjectInspectors / CLASSLOADER / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/","text":"shark / shark / ObjectInspectors / KEYED_WEAK_REFERENCE KEYED_WEAK_REFERENCE \u00b6 KEYED_WEAK_REFERENCE Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/#keyed_weak_reference","text":"KEYED_WEAK_REFERENCE","title":"KEYED_WEAK_REFERENCE"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect/","text":"shark / shark / ObjectInspectors / KEYED_WEAK_REFERENCE / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/","text":"shark / shark / ObjectInspectors / THREAD THREAD \u00b6 THREAD Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Home"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/#thread","text":"THREAD","title":"THREAD"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter ): Unit","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect/","text":"shark / shark / ObjectInspectors / THREAD / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter ): Unit Overrides ObjectInspector.inspect See Also ObjectInspector","title":"inspect"},{"location":"api/shark/shark/-object-reporter/","text":"shark / shark / ObjectReporter ObjectReporter \u00b6 class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights. Constructors \u00b6 Name Summary <init> ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. Properties \u00b6 Name Summary heapObject val heapObject: HeapObject labels val labels: LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace. leakingReasons val leakingReasons: MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking). likelyLeakingReasons val likelyLeakingReasons: MutableSet < String > notLeakingReasons val notLeakingReasons: MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking). Functions \u00b6 Name Summary whenInstanceOf fun whenInstanceOf(expectedClass: KClass <out Any >, block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"Home"},{"location":"api/shark/shark/-object-reporter/#objectreporter","text":"class ObjectReporter Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights.","title":"ObjectReporter"},{"location":"api/shark/shark/-object-reporter/#constructors","text":"Name Summary <init> ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap.","title":"Constructors"},{"location":"api/shark/shark/-object-reporter/#properties","text":"Name Summary heapObject val heapObject: HeapObject labels val labels: LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace. leakingReasons val leakingReasons: MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking). likelyLeakingReasons val likelyLeakingReasons: MutableSet < String > notLeakingReasons val notLeakingReasons: MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking).","title":"Properties"},{"location":"api/shark/shark/-object-reporter/#functions","text":"Name Summary whenInstanceOf fun whenInstanceOf(expectedClass: KClass <out Any >, block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"Functions"},{"location":"api/shark/shark/-object-reporter/-init-/","text":"shark / shark / ObjectReporter / <init> <init> \u00b6 ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights.","title":" init "},{"location":"api/shark/shark/-object-reporter/-init-/#init","text":"ObjectReporter(heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-object-reporter/heap-object/","text":"shark / shark / ObjectReporter / heapObject heapObject \u00b6 val heapObject: HeapObject","title":"Heap object"},{"location":"api/shark/shark/-object-reporter/heap-object/#heapobject","text":"val heapObject: HeapObject","title":"heapObject"},{"location":"api/shark/shark/-object-reporter/labels/","text":"shark / shark / ObjectReporter / labels labels \u00b6 val labels: LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace.","title":"Labels"},{"location":"api/shark/shark/-object-reporter/labels/#labels","text":"val labels: LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace.","title":"labels"},{"location":"api/shark/shark/-object-reporter/leaking-reasons/","text":"shark / shark / ObjectReporter / leakingReasons leakingReasons \u00b6 val leakingReasons: MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking). Only add reasons to this if you\u2019re 100% sure this object is leaking, otherwise add reasons to likelyLeakingReasons . The difference is that objects that are \u201clikely leaking\u201d are not considered to be leaking objects on which LeakCanary should compute the leak trace.","title":"Leaking reasons"},{"location":"api/shark/shark/-object-reporter/leaking-reasons/#leakingreasons","text":"val leakingReasons: MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking). Only add reasons to this if you\u2019re 100% sure this object is leaking, otherwise add reasons to likelyLeakingReasons . The difference is that objects that are \u201clikely leaking\u201d are not considered to be leaking objects on which LeakCanary should compute the leak trace.","title":"leakingReasons"},{"location":"api/shark/shark/-object-reporter/likely-leaking-reasons/","text":"shark / shark / ObjectReporter / likelyLeakingReasons likelyLeakingReasons \u00b6 val likelyLeakingReasons: MutableSet < String > See Also leakingReasons","title":"Likely leaking reasons"},{"location":"api/shark/shark/-object-reporter/likely-leaking-reasons/#likelyleakingreasons","text":"val likelyLeakingReasons: MutableSet < String > See Also leakingReasons","title":"likelyLeakingReasons"},{"location":"api/shark/shark/-object-reporter/not-leaking-reasons/","text":"shark / shark / ObjectReporter / notLeakingReasons notLeakingReasons \u00b6 val notLeakingReasons: MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking).","title":"Not leaking reasons"},{"location":"api/shark/shark/-object-reporter/not-leaking-reasons/#notleakingreasons","text":"val notLeakingReasons: MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking).","title":"notLeakingReasons"},{"location":"api/shark/shark/-object-reporter/when-instance-of/","text":"shark / shark / ObjectReporter / whenInstanceOf whenInstanceOf \u00b6 fun whenInstanceOf(expectedClass: KClass <out Any >, block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"When instance of"},{"location":"api/shark/shark/-object-reporter/when-instance-of/#wheninstanceof","text":"fun whenInstanceOf(expectedClass: KClass <out Any >, block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClass . fun whenInstanceOf(expectedClassName: String , block: ObjectReporter .(HeapInstance) -> Unit ): Unit Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"whenInstanceOf"},{"location":"api/shark/shark/-on-analysis-progress-listener/","text":"shark / shark / OnAnalysisProgressListener OnAnalysisProgressListener \u00b6 interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. Types \u00b6 Name Summary Step enum class Step Functions \u00b6 Name Summary onAnalysisProgress abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit Companion Object Properties \u00b6 Name Summary NO_OP val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener Companion Object Functions \u00b6 Name Summary invoke operator fun invoke(block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax.","title":"Home"},{"location":"api/shark/shark/-on-analysis-progress-listener/#onanalysisprogresslistener","text":"interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values.","title":"OnAnalysisProgressListener"},{"location":"api/shark/shark/-on-analysis-progress-listener/#types","text":"Name Summary Step enum class Step","title":"Types"},{"location":"api/shark/shark/-on-analysis-progress-listener/#functions","text":"Name Summary onAnalysisProgress abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit","title":"Functions"},{"location":"api/shark/shark/-on-analysis-progress-listener/#companion-object-properties","text":"Name Summary NO_OP val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":"Companion Object Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax.","title":"Companion Object Functions"},{"location":"api/shark/shark/-on-analysis-progress-listener/-n-o_-o-p/","text":"shark / shark / OnAnalysisProgressListener / NO_OP NO_OP \u00b6 val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":" n o  o p"},{"location":"api/shark/shark/-on-analysis-progress-listener/-n-o_-o-p/#no_op","text":"val NO_OP: OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":"NO_OP"},{"location":"api/shark/shark/-on-analysis-progress-listener/invoke/","text":"shark / shark / OnAnalysisProgressListener / invoke invoke \u00b6 inline operator fun invoke(crossinline block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax. Usage: val listener = OnAnalysisProgressListener { }","title":"Invoke"},{"location":"api/shark/shark/-on-analysis-progress-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax. Usage: val listener = OnAnalysisProgressListener { }","title":"invoke"},{"location":"api/shark/shark/-on-analysis-progress-listener/on-analysis-progress/","text":"shark / shark / OnAnalysisProgressListener / onAnalysisProgress onAnalysisProgress \u00b6 abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit","title":"On analysis progress"},{"location":"api/shark/shark/-on-analysis-progress-listener/on-analysis-progress/#onanalysisprogress","text":"abstract fun onAnalysisProgress(step: OnAnalysisProgressListener.Step ): Unit","title":"onAnalysisProgress"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/","text":"shark / shark / OnAnalysisProgressListener / Step Step \u00b6 enum class Step Enum Values \u00b6 Name Summary PARSING_HEAP_DUMP EXTRACTING_METADATA FINDING_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_DOMINATORS COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_RETAINED_SIZE BUILDING_LEAK_TRACES REPORTING_HEAP_ANALYSIS","title":"Home"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/#step","text":"enum class Step","title":"Step"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/#enum-values","text":"Name Summary PARSING_HEAP_DUMP EXTRACTING_METADATA FINDING_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_DOMINATORS COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_RETAINED_SIZE BUILDING_LEAK_TRACES REPORTING_HEAP_ANALYSIS","title":"Enum Values"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s/","text":"shark / shark / OnAnalysisProgressListener / Step / BUILDING_LEAK_TRACES BUILDING_LEAK_TRACES \u00b6 BUILDING_LEAK_TRACES","title":" b u i l d i n g  l e a k  t r a c e s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s/#building_leak_traces","text":"BUILDING_LEAK_TRACES","title":"BUILDING_LEAK_TRACES"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e/","text":"shark / shark / OnAnalysisProgressListener / Step / COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_NATIVE_RETAINED_SIZE \u00b6 COMPUTING_NATIVE_RETAINED_SIZE","title":" c o m p u t i n g  n a t i v e  r e t a i n e d  s i z e"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e/#computing_native_retained_size","text":"COMPUTING_NATIVE_RETAINED_SIZE","title":"COMPUTING_NATIVE_RETAINED_SIZE"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e/","text":"shark / shark / OnAnalysisProgressListener / Step / COMPUTING_RETAINED_SIZE COMPUTING_RETAINED_SIZE \u00b6 COMPUTING_RETAINED_SIZE","title":" c o m p u t i n g  r e t a i n e d  s i z e"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e/#computing_retained_size","text":"COMPUTING_RETAINED_SIZE","title":"COMPUTING_RETAINED_SIZE"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-e-x-t-r-a-c-t-i-n-g_-m-e-t-a-d-a-t-a/","text":"shark / shark / OnAnalysisProgressListener / Step / EXTRACTING_METADATA EXTRACTING_METADATA \u00b6 EXTRACTING_METADATA","title":" e x t r a c t i n g  m e t a d a t a"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-e-x-t-r-a-c-t-i-n-g_-m-e-t-a-d-a-t-a/#extracting_metadata","text":"EXTRACTING_METADATA","title":"EXTRACTING_METADATA"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s/","text":"shark / shark / OnAnalysisProgressListener / Step / FINDING_DOMINATORS FINDING_DOMINATORS \u00b6 FINDING_DOMINATORS","title":" f i n d i n g  d o m i n a t o r s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s/#finding_dominators","text":"FINDING_DOMINATORS","title":"FINDING_DOMINATORS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/","text":"shark / shark / OnAnalysisProgressListener / Step / FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS \u00b6 FINDING_PATHS_TO_RETAINED_OBJECTS","title":" f i n d i n g  p a t h s  t o  r e t a i n e d  o b j e c t s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#finding_paths_to_retained_objects","text":"FINDING_PATHS_TO_RETAINED_OBJECTS","title":"FINDING_PATHS_TO_RETAINED_OBJECTS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/","text":"shark / shark / OnAnalysisProgressListener / Step / FINDING_RETAINED_OBJECTS FINDING_RETAINED_OBJECTS \u00b6 FINDING_RETAINED_OBJECTS","title":" f i n d i n g  r e t a i n e d  o b j e c t s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#finding_retained_objects","text":"FINDING_RETAINED_OBJECTS","title":"FINDING_RETAINED_OBJECTS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p/","text":"shark / shark / OnAnalysisProgressListener / Step / PARSING_HEAP_DUMP PARSING_HEAP_DUMP \u00b6 PARSING_HEAP_DUMP","title":" p a r s i n g  h e a p  d u m p"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p/#parsing_heap_dump","text":"PARSING_HEAP_DUMP","title":"PARSING_HEAP_DUMP"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-r-e-p-o-r-t-i-n-g_-h-e-a-p_-a-n-a-l-y-s-i-s/","text":"shark / shark / OnAnalysisProgressListener / Step / REPORTING_HEAP_ANALYSIS REPORTING_HEAP_ANALYSIS \u00b6 REPORTING_HEAP_ANALYSIS","title":" r e p o r t i n g  h e a p  a n a l y s i s"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-r-e-p-o-r-t-i-n-g_-h-e-a-p_-a-n-a-l-y-s-i-s/#reporting_heap_analysis","text":"REPORTING_HEAP_ANALYSIS","title":"REPORTING_HEAP_ANALYSIS"},{"location":"api/shark/shark/-reference-matcher/","text":"shark / shark / ReferenceMatcher ReferenceMatcher \u00b6 sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). Properties \u00b6 Name Summary pattern abstract val pattern: ReferencePattern The pattern that references will be matched against. Inheritors \u00b6 Name Summary IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"Home"},{"location":"api/shark/shark/-reference-matcher/#referencematcher","text":"sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ).","title":"ReferenceMatcher"},{"location":"api/shark/shark/-reference-matcher/#properties","text":"Name Summary pattern abstract val pattern: ReferencePattern The pattern that references will be matched against.","title":"Properties"},{"location":"api/shark/shark/-reference-matcher/#inheritors","text":"Name Summary IgnoredReferenceMatcher class IgnoredReferenceMatcher : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. LibraryLeakReferenceMatcher data class LibraryLeakReferenceMatcher : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"Inheritors"},{"location":"api/shark/shark/-reference-matcher/pattern/","text":"shark / shark / ReferenceMatcher / pattern pattern \u00b6 abstract val pattern: ReferencePattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-reference-matcher/pattern/#pattern","text":"abstract val pattern: ReferencePattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-reference-pattern/","text":"shark / shark / ReferencePattern ReferencePattern \u00b6 sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher . Types \u00b6 Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName . Inheritors \u00b6 Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"Home"},{"location":"api/shark/shark/-reference-pattern/#referencepattern","text":"sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher .","title":"ReferencePattern"},{"location":"api/shark/shark/-reference-pattern/#types","text":"Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"Types"},{"location":"api/shark/shark/-reference-pattern/#inheritors","text":"Name Summary InstanceFieldPattern data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"Inheritors"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/","text":"shark / shark / ReferencePattern / InstanceFieldPattern InstanceFieldPattern \u00b6 data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins. Constructors \u00b6 Name Summary <init> InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName . Properties \u00b6 Name Summary className val className: String fieldName val fieldName: String Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#instancefieldpattern","text":"data class InstanceFieldPattern : ReferencePattern Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins.","title":"InstanceFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#constructors","text":"Name Summary <init> InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName .","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#properties","text":"Name Summary className val className: String fieldName val fieldName: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-init-/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / <init> <init> \u00b6 InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins.","title":" init "},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-init-/#init","text":"InstanceFieldPattern(className: String , fieldName: String ) Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/class-name/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / className className \u00b6 val className: String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/class-name/#classname","text":"val className: String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/field-name/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / fieldName fieldName \u00b6 val fieldName: String","title":"Field name"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/field-name/#fieldname","text":"val fieldName: String","title":"fieldName"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/to-string/","text":"shark / shark / ReferencePattern / InstanceFieldPattern / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/","text":"shark / shark / ReferencePattern / JavaLocalPattern JavaLocalPattern \u00b6 data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. Constructors \u00b6 Name Summary <init> JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name. Properties \u00b6 Name Summary threadName val threadName: String Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#javalocalpattern","text":"data class JavaLocalPattern : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name.","title":"JavaLocalPattern"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#constructors","text":"Name Summary <init> JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name.","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#properties","text":"Name Summary threadName val threadName: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-init-/","text":"shark / shark / ReferencePattern / JavaLocalPattern / <init> <init> \u00b6 JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name.","title":" init "},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-init-/#init","text":"JavaLocalPattern(threadName: String ) Matches local references held in the stack of frames of a given thread, identified by its name.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/thread-name/","text":"shark / shark / ReferencePattern / JavaLocalPattern / threadName threadName \u00b6 val threadName: String","title":"Thread name"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/thread-name/#threadname","text":"val threadName: String","title":"threadName"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/to-string/","text":"shark / shark / ReferencePattern / JavaLocalPattern / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern NativeGlobalVariablePattern \u00b6 data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. Constructors \u00b6 Name Summary <init> NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. Properties \u00b6 Name Summary className val className: String Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#nativeglobalvariablepattern","text":"data class NativeGlobalVariablePattern : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":"NativeGlobalVariablePattern"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#constructors","text":"Name Summary <init> NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#properties","text":"Name Summary className val className: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-init-/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern / <init> <init> \u00b6 NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":" init "},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-init-/#init","text":"NativeGlobalVariablePattern(className: String ) Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/class-name/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern / className className \u00b6 val className: String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/class-name/#classname","text":"val className: String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/to-string/","text":"shark / shark / ReferencePattern / NativeGlobalVariablePattern / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/","text":"shark / shark / ReferencePattern / StaticFieldPattern StaticFieldPattern \u00b6 data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName . Constructors \u00b6 Name Summary <init> StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName . Properties \u00b6 Name Summary className val className: String fieldName val fieldName: String Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#staticfieldpattern","text":"data class StaticFieldPattern : ReferencePattern Matches static field references, identified by className and fieldName .","title":"StaticFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#constructors","text":"Name Summary <init> StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName .","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#properties","text":"Name Summary className val className: String fieldName val fieldName: String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-init-/","text":"shark / shark / ReferencePattern / StaticFieldPattern / <init> <init> \u00b6 StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName .","title":" init "},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-init-/#init","text":"StaticFieldPattern(className: String , fieldName: String ) Matches static field references, identified by className and fieldName .","title":"&lt;init&gt;"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/class-name/","text":"shark / shark / ReferencePattern / StaticFieldPattern / className className \u00b6 val className: String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/class-name/#classname","text":"val className: String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/field-name/","text":"shark / shark / ReferencePattern / StaticFieldPattern / fieldName fieldName \u00b6 val fieldName: String","title":"Field name"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/field-name/#fieldname","text":"val fieldName: String","title":"fieldName"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/to-string/","text":"shark / shark / ReferencePattern / StaticFieldPattern / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-android/","text":"shark-android Packages \u00b6 Name Summary shark Index \u00b6 All Types","title":"Home"},{"location":"api/shark-android/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-android/#index","text":"All Types","title":"Index"},{"location":"api/shark-android/alltypes/","text":"All Types \u00b6 Name Summary shark.AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . shark.AndroidMetadataExtractor shark.AndroidObjectInspectors A set of default ObjectInspector s that knows about common AOSP and library classes. shark.AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher .","title":"Home"},{"location":"api/shark-android/alltypes/#all-types","text":"Name Summary shark.AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . shark.AndroidMetadataExtractor shark.AndroidObjectInspectors A set of default ObjectInspector s that knows about common AOSP and library classes. shark.AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher .","title":"All Types"},{"location":"api/shark-android/shark/","text":"shark-android / shark Package shark \u00b6 Types \u00b6 Name Summary AndroidBuildMirror class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . AndroidMetadataExtractor object AndroidMetadataExtractor : MetadataExtractor AndroidObjectInspectors enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. AndroidReferenceMatchers enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . Functions \u00b6 Name Summary unwrapActivityContext fun HeapInstance.unwrapActivityContext(): HeapInstance? Recursively unwraps this HeapInstance as a ContextWrapper until an Activity is found in which case it is returned. Returns null if no activity was found.","title":"Extension: Shark Android"},{"location":"api/shark-android/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-android/shark/#types","text":"Name Summary AndroidBuildMirror class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . AndroidMetadataExtractor object AndroidMetadataExtractor : MetadataExtractor AndroidObjectInspectors enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. AndroidReferenceMatchers enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher .","title":"Types"},{"location":"api/shark-android/shark/#functions","text":"Name Summary unwrapActivityContext fun HeapInstance.unwrapActivityContext(): HeapInstance? Recursively unwraps this HeapInstance as a ContextWrapper until an Activity is found in which case it is returned. Returns null if no activity was found.","title":"Functions"},{"location":"api/shark-android/shark/unwrap-activity-context/","text":"shark-android / shark / unwrapActivityContext unwrapActivityContext \u00b6 fun HeapInstance.unwrapActivityContext(): HeapInstance? Recursively unwraps this HeapInstance as a ContextWrapper until an Activity is found in which case it is returned. Returns null if no activity was found.","title":"Unwrap activity context"},{"location":"api/shark-android/shark/unwrap-activity-context/#unwrapactivitycontext","text":"fun HeapInstance.unwrapActivityContext(): HeapInstance? Recursively unwraps this HeapInstance as a ContextWrapper until an Activity is found in which case it is returned. Returns null if no activity was found.","title":"unwrapActivityContext"},{"location":"api/shark-android/shark/-android-build-mirror/","text":"shark-android / shark / AndroidBuildMirror AndroidBuildMirror \u00b6 class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . Constructors \u00b6 Name Summary <init> AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . Properties \u00b6 Name Summary manufacturer val manufacturer: String Value of android.os.Build.MANUFACTURER sdkInt val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT Companion Object Functions \u00b6 Name Summary fromHeapGraph fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror","title":"Home"},{"location":"api/shark-android/shark/-android-build-mirror/#androidbuildmirror","text":"class AndroidBuildMirror Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":"AndroidBuildMirror"},{"location":"api/shark-android/shark/-android-build-mirror/#constructors","text":"Name Summary <init> AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":"Constructors"},{"location":"api/shark-android/shark/-android-build-mirror/#properties","text":"Name Summary manufacturer val manufacturer: String Value of android.os.Build.MANUFACTURER sdkInt val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT","title":"Properties"},{"location":"api/shark-android/shark/-android-build-mirror/#companion-object-functions","text":"Name Summary fromHeapGraph fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror","title":"Companion Object Functions"},{"location":"api/shark-android/shark/-android-build-mirror/-init-/","text":"shark-android / shark / AndroidBuildMirror / <init> <init> \u00b6 AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":" init "},{"location":"api/shark-android/shark/-android-build-mirror/-init-/#init","text":"AndroidBuildMirror(manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":"&lt;init&gt;"},{"location":"api/shark-android/shark/-android-build-mirror/from-heap-graph/","text":"shark-android / shark / AndroidBuildMirror / fromHeapGraph fromHeapGraph \u00b6 fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror See Also AndroidBuildMirror","title":"From heap graph"},{"location":"api/shark-android/shark/-android-build-mirror/from-heap-graph/#fromheapgraph","text":"fun fromHeapGraph(graph: HeapGraph): AndroidBuildMirror See Also AndroidBuildMirror","title":"fromHeapGraph"},{"location":"api/shark-android/shark/-android-build-mirror/manufacturer/","text":"shark-android / shark / AndroidBuildMirror / manufacturer manufacturer \u00b6 val manufacturer: String Value of android.os.Build.MANUFACTURER","title":"Manufacturer"},{"location":"api/shark-android/shark/-android-build-mirror/manufacturer/#manufacturer","text":"val manufacturer: String Value of android.os.Build.MANUFACTURER","title":"manufacturer"},{"location":"api/shark-android/shark/-android-build-mirror/sdk-int/","text":"shark-android / shark / AndroidBuildMirror / sdkInt sdkInt \u00b6 val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT","title":"Sdk int"},{"location":"api/shark-android/shark/-android-build-mirror/sdk-int/#sdkint","text":"val sdkInt: Int Value of android.os.Build.VERSION.SDK_INT","title":"sdkInt"},{"location":"api/shark-android/shark/-android-metadata-extractor/","text":"shark-android / shark / AndroidMetadataExtractor AndroidMetadataExtractor \u00b6 object AndroidMetadataExtractor : MetadataExtractor Functions \u00b6 Name Summary extractMetadata fun extractMetadata(graph: HeapGraph): Map < String , String >","title":"Home"},{"location":"api/shark-android/shark/-android-metadata-extractor/#androidmetadataextractor","text":"object AndroidMetadataExtractor : MetadataExtractor","title":"AndroidMetadataExtractor"},{"location":"api/shark-android/shark/-android-metadata-extractor/#functions","text":"Name Summary extractMetadata fun extractMetadata(graph: HeapGraph): Map < String , String >","title":"Functions"},{"location":"api/shark-android/shark/-android-metadata-extractor/extract-metadata/","text":"shark-android / shark / AndroidMetadataExtractor / extractMetadata extractMetadata \u00b6 fun extractMetadata(graph: HeapGraph): Map < String , String >","title":"Extract metadata"},{"location":"api/shark-android/shark/-android-metadata-extractor/extract-metadata/#extractmetadata","text":"fun extractMetadata(graph: HeapGraph): Map < String , String >","title":"extractMetadata"},{"location":"api/shark-android/shark/-android-object-inspectors/","text":"shark-android / shark / AndroidObjectInspectors AndroidObjectInspectors \u00b6 enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. These are heuristics based on our experience and knowledge of AOSP and various library internals. We only make a decision if we\u2019re reasonably sure the state of an object is unlikely to be the result of a programmer mistake. For example, no matter how many mistakes we make in our code, the value of Activity.mDestroy will not be influenced by those mistakes. Most developers should use the entire set of default ObjectInspector by calling appDefaults , unless there\u2019s a bug and you temporarily want to remove an inspector. Enum Values \u00b6 Name Summary VIEW EDITOR ACTIVITY CONTEXT_WRAPPER DIALOG APPLICATION INPUT_METHOD_MANAGER FRAGMENT SUPPORT_FRAGMENT ANDROIDX_FRAGMENT MESSAGE_QUEUE MORTAR_PRESENTER MORTAR_SCOPE COORDINATOR MAIN_THREAD VIEW_ROOT_IMPL WINDOW TOAST Companion Object Properties \u00b6 Name Summary appDefaults val appDefaults: List <ObjectInspector>","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/#androidobjectinspectors","text":"enum class AndroidObjectInspectors : ObjectInspector A set of default ObjectInspector s that knows about common AOSP and library classes. These are heuristics based on our experience and knowledge of AOSP and various library internals. We only make a decision if we\u2019re reasonably sure the state of an object is unlikely to be the result of a programmer mistake. For example, no matter how many mistakes we make in our code, the value of Activity.mDestroy will not be influenced by those mistakes. Most developers should use the entire set of default ObjectInspector by calling appDefaults , unless there\u2019s a bug and you temporarily want to remove an inspector.","title":"AndroidObjectInspectors"},{"location":"api/shark-android/shark/-android-object-inspectors/#enum-values","text":"Name Summary VIEW EDITOR ACTIVITY CONTEXT_WRAPPER DIALOG APPLICATION INPUT_METHOD_MANAGER FRAGMENT SUPPORT_FRAGMENT ANDROIDX_FRAGMENT MESSAGE_QUEUE MORTAR_PRESENTER MORTAR_SCOPE COORDINATOR MAIN_THREAD VIEW_ROOT_IMPL WINDOW TOAST","title":"Enum Values"},{"location":"api/shark-android/shark/-android-object-inspectors/#companion-object-properties","text":"Name Summary appDefaults val appDefaults: List <ObjectInspector>","title":"Companion Object Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/app-defaults/","text":"shark-android / shark / AndroidObjectInspectors / appDefaults appDefaults \u00b6 val appDefaults: List <ObjectInspector> See Also AndroidObjectInspectors","title":"App defaults"},{"location":"api/shark-android/shark/-android-object-inspectors/app-defaults/#appdefaults","text":"val appDefaults: List <ObjectInspector> See Also AndroidObjectInspectors","title":"appDefaults"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/","text":"shark-android / shark / AndroidObjectInspectors / ACTIVITY ACTIVITY \u00b6 ACTIVITY Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/#activity","text":"ACTIVITY","title":"ACTIVITY"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect/","text":"shark-android / shark / AndroidObjectInspectors / ACTIVITY / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/","text":"shark-android / shark / AndroidObjectInspectors / ANDROIDX_FRAGMENT ANDROIDX_FRAGMENT \u00b6 ANDROIDX_FRAGMENT Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/#androidx_fragment","text":"ANDROIDX_FRAGMENT","title":"ANDROIDX_FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / ANDROIDX_FRAGMENT / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/","text":"shark-android / shark / AndroidObjectInspectors / APPLICATION APPLICATION \u00b6 APPLICATION Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/#application","text":"APPLICATION","title":"APPLICATION"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect/","text":"shark-android / shark / AndroidObjectInspectors / APPLICATION / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/","text":"shark-android / shark / AndroidObjectInspectors / CONTEXT_WRAPPER CONTEXT_WRAPPER \u00b6 CONTEXT_WRAPPER Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/#context_wrapper","text":"CONTEXT_WRAPPER","title":"CONTEXT_WRAPPER"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / CONTEXT_WRAPPER / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/","text":"shark-android / shark / AndroidObjectInspectors / COORDINATOR COORDINATOR \u00b6 COORDINATOR Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/#coordinator","text":"COORDINATOR","title":"COORDINATOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / COORDINATOR / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/","text":"shark-android / shark / AndroidObjectInspectors / DIALOG DIALOG \u00b6 DIALOG Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/#dialog","text":"DIALOG","title":"DIALOG"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect/","text":"shark-android / shark / AndroidObjectInspectors / DIALOG / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/","text":"shark-android / shark / AndroidObjectInspectors / EDITOR EDITOR \u00b6 EDITOR Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/#editor","text":"EDITOR","title":"EDITOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / EDITOR / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/","text":"shark-android / shark / AndroidObjectInspectors / FRAGMENT FRAGMENT \u00b6 FRAGMENT Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/#fragment","text":"FRAGMENT","title":"FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / FRAGMENT / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidObjectInspectors / INPUT_METHOD_MANAGER INPUT_METHOD_MANAGER \u00b6 INPUT_METHOD_MANAGER Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/#input_method_manager","text":"INPUT_METHOD_MANAGER","title":"INPUT_METHOD_MANAGER"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / INPUT_METHOD_MANAGER / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/","text":"shark-android / shark / AndroidObjectInspectors / MAIN_THREAD MAIN_THREAD \u00b6 MAIN_THREAD Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/#main_thread","text":"MAIN_THREAD","title":"MAIN_THREAD"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MAIN_THREAD / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/","text":"shark-android / shark / AndroidObjectInspectors / MESSAGE_QUEUE MESSAGE_QUEUE \u00b6 MESSAGE_QUEUE Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/#message_queue","text":"MESSAGE_QUEUE","title":"MESSAGE_QUEUE"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MESSAGE_QUEUE / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_PRESENTER MORTAR_PRESENTER \u00b6 MORTAR_PRESENTER Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/#mortar_presenter","text":"MORTAR_PRESENTER","title":"MORTAR_PRESENTER"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_PRESENTER / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_SCOPE MORTAR_SCOPE \u00b6 MORTAR_SCOPE Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/#mortar_scope","text":"MORTAR_SCOPE","title":"MORTAR_SCOPE"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect/","text":"shark-android / shark / AndroidObjectInspectors / MORTAR_SCOPE / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/","text":"shark-android / shark / AndroidObjectInspectors / SUPPORT_FRAGMENT SUPPORT_FRAGMENT \u00b6 SUPPORT_FRAGMENT Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/#support_fragment","text":"SUPPORT_FRAGMENT","title":"SUPPORT_FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / SUPPORT_FRAGMENT / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/","text":"shark-android / shark / AndroidObjectInspectors / TOAST TOAST \u00b6 TOAST Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/#toast","text":"TOAST","title":"TOAST"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect/","text":"shark-android / shark / AndroidObjectInspectors / TOAST / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/","text":"shark-android / shark / AndroidObjectInspectors / VIEW VIEW \u00b6 VIEW Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/#view","text":"VIEW","title":"VIEW"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect/","text":"shark-android / shark / AndroidObjectInspectors / VIEW / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/","text":"shark-android / shark / AndroidObjectInspectors / VIEW_ROOT_IMPL VIEW_ROOT_IMPL \u00b6 VIEW_ROOT_IMPL Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/#view_root_impl","text":"VIEW_ROOT_IMPL","title":"VIEW_ROOT_IMPL"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect/","text":"shark-android / shark / AndroidObjectInspectors / VIEW_ROOT_IMPL / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/","text":"shark-android / shark / AndroidObjectInspectors / WINDOW WINDOW \u00b6 WINDOW Functions \u00b6 Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Home"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/#window","text":"WINDOW","title":"WINDOW"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/#functions","text":"Name Summary inspect fun inspect(reporter: ObjectReporter): Unit","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect/","text":"shark-android / shark / AndroidObjectInspectors / WINDOW / inspect inspect \u00b6 fun inspect(reporter: ObjectReporter): Unit","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect/#inspect","text":"fun inspect(reporter: ObjectReporter): Unit","title":"inspect"},{"location":"api/shark-android/shark/-android-reference-matchers/","text":"shark-android / shark / AndroidReferenceMatchers AndroidReferenceMatchers \u00b6 enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . AndroidReferenceMatchers is used to build the list of known references that cannot ever create leaks (via IgnoredReferenceMatcher ) as well as the list of known leaks in the Android Framework and in manufacturer specific Android implementations. This class is a work in progress. You can help by reporting leak traces that seem to be caused by the Android SDK, here: https://github.com/square/leakcanary/issues/new We filter on SDK versions and Manufacturers because many of those leaks are specific to a given manufacturer implementation, they usually share their builds across multiple models, and the leaks eventually get fixed in newer versions. Most app developers should use appDefaults . However, you can also use a subset of AndroidReferenceMatchers by creating an EnumSet that matches your needs and calling buildKnownReferences . Enum Values \u00b6 Name Summary IREQUEST_FINISH_CALLBACK ACTIVITY_CLIENT_RECORD__NEXT_IDLE SPAN_CONTROLLER MEDIA_SESSION_LEGACY_HELPER__SINSTANCE TEXT_LINE__SCACHED BLOCKING_QUEUE INPUT_METHOD_MANAGER_IS_TERRIBLE LAYOUT_TRANSITION SPELL_CHECKER_SESSION SPELL_CHECKER ACTIVITY_CHOOSE_MODEL MEDIA_PROJECTION_CALLBACK SPEECH_RECOGNIZER ACCOUNT_MANAGER MEDIA_SCANNER_CONNECTION USER_MANAGER__SINSTANCE APP_WIDGET_HOST_CALLBACKS AUDIO_MANAGER EDITTEXT_BLINK_MESSAGEQUEUE CONNECTIVITY_MANAGER__SINSTANCE ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ASSIST_STRUCTURE ACCESSIBILITY_ITERATORS BIOMETRIC_PROMPT MAGNIFIER BACKDROP_FRAME_RENDERER__MDECORVIEW VIEWLOCATIONHOLDER_ROOT ACCESSIBILITY_NODE_ID_MANAGER TEXT_TO_SPEECH WINDOW_MANAGER_GLOBAL CONTROLLED_INPUT_CONNECTION_WRAPPER TOAST_TN SPEN_GESTURE_MANAGER CLIPBOARD_UI_MANAGER__SINSTANCE SEM_CLIPBOARD_MANAGER__MCONTEXT CLIPBOARD_EX_MANAGER SEM_EMERGENCY_MANAGER__MCONTEXT SEM_PERSONA_MANAGER SEM_APP_ICON_SOLUTION AW_RESOURCE__SRESOURCES TEXT_VIEW__MLAST_HOVERED_VIEW PERSONA_MANAGER RESOURCES__MCONTEXT VIEW_CONFIGURATION__MCONTEXT AUDIO_MANAGER__MCONTEXT_STATIC ACTIVITY_MANAGER_MCONTEXT STATIC_MTARGET_VIEW GESTURE_BOOST_MANAGER BUBBLE_POPUP_HELPER__SHELPER LGCONTEXT__MCONTEXT SMART_COVER_MANAGER MAPPER_CLIENT SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL INSTRUMENTATION_RECOMMEND_ACTIVITY DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER EXTENDED_STATUS_BAR_MANAGER OEM_SCENE_CALL_BLOCKER REFERENCES FINALIZER_WATCHDOG_DAEMON MAIN LEAK_CANARY_THREAD LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_INTERNAL EVENT_RECEIVER__MMESSAGE_QUEUE Companion Object Properties \u00b6 Name Summary appDefaults val appDefaults: List <ReferenceMatcher> HUAWEI const val HUAWEI: String ignoredReferencesOnly val ignoredReferencesOnly: List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher . LENOVO const val LENOVO: String LG const val LG: String MEIZU const val MEIZU: String MOTOROLA const val MOTOROLA: String NVIDIA const val NVIDIA: String ONE_PLUS const val ONE_PLUS: String SAMSUNG const val SAMSUNG: String SHARP const val SHARP: String VIVO const val VIVO: String Companion Object Functions \u00b6 Name Summary buildKnownReferences fun buildKnownReferences(referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers . ignoredInstanceField fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern . ignoredJavaLocal fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern . instanceFieldLeak fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak. nativeGlobalVariableLeak fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher staticFieldLeak fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"Home"},{"location":"api/shark-android/shark/-android-reference-matchers/#androidreferencematchers","text":"enum class AndroidReferenceMatchers AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher . AndroidReferenceMatchers is used to build the list of known references that cannot ever create leaks (via IgnoredReferenceMatcher ) as well as the list of known leaks in the Android Framework and in manufacturer specific Android implementations. This class is a work in progress. You can help by reporting leak traces that seem to be caused by the Android SDK, here: https://github.com/square/leakcanary/issues/new We filter on SDK versions and Manufacturers because many of those leaks are specific to a given manufacturer implementation, they usually share their builds across multiple models, and the leaks eventually get fixed in newer versions. Most app developers should use appDefaults . However, you can also use a subset of AndroidReferenceMatchers by creating an EnumSet that matches your needs and calling buildKnownReferences .","title":"AndroidReferenceMatchers"},{"location":"api/shark-android/shark/-android-reference-matchers/#enum-values","text":"Name Summary IREQUEST_FINISH_CALLBACK ACTIVITY_CLIENT_RECORD__NEXT_IDLE SPAN_CONTROLLER MEDIA_SESSION_LEGACY_HELPER__SINSTANCE TEXT_LINE__SCACHED BLOCKING_QUEUE INPUT_METHOD_MANAGER_IS_TERRIBLE LAYOUT_TRANSITION SPELL_CHECKER_SESSION SPELL_CHECKER ACTIVITY_CHOOSE_MODEL MEDIA_PROJECTION_CALLBACK SPEECH_RECOGNIZER ACCOUNT_MANAGER MEDIA_SCANNER_CONNECTION USER_MANAGER__SINSTANCE APP_WIDGET_HOST_CALLBACKS AUDIO_MANAGER EDITTEXT_BLINK_MESSAGEQUEUE CONNECTIVITY_MANAGER__SINSTANCE ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ASSIST_STRUCTURE ACCESSIBILITY_ITERATORS BIOMETRIC_PROMPT MAGNIFIER BACKDROP_FRAME_RENDERER__MDECORVIEW VIEWLOCATIONHOLDER_ROOT ACCESSIBILITY_NODE_ID_MANAGER TEXT_TO_SPEECH WINDOW_MANAGER_GLOBAL CONTROLLED_INPUT_CONNECTION_WRAPPER TOAST_TN SPEN_GESTURE_MANAGER CLIPBOARD_UI_MANAGER__SINSTANCE SEM_CLIPBOARD_MANAGER__MCONTEXT CLIPBOARD_EX_MANAGER SEM_EMERGENCY_MANAGER__MCONTEXT SEM_PERSONA_MANAGER SEM_APP_ICON_SOLUTION AW_RESOURCE__SRESOURCES TEXT_VIEW__MLAST_HOVERED_VIEW PERSONA_MANAGER RESOURCES__MCONTEXT VIEW_CONFIGURATION__MCONTEXT AUDIO_MANAGER__MCONTEXT_STATIC ACTIVITY_MANAGER_MCONTEXT STATIC_MTARGET_VIEW GESTURE_BOOST_MANAGER BUBBLE_POPUP_HELPER__SHELPER LGCONTEXT__MCONTEXT SMART_COVER_MANAGER MAPPER_CLIENT SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL INSTRUMENTATION_RECOMMEND_ACTIVITY DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER EXTENDED_STATUS_BAR_MANAGER OEM_SCENE_CALL_BLOCKER REFERENCES FINALIZER_WATCHDOG_DAEMON MAIN LEAK_CANARY_THREAD LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_INTERNAL EVENT_RECEIVER__MMESSAGE_QUEUE","title":"Enum Values"},{"location":"api/shark-android/shark/-android-reference-matchers/#companion-object-properties","text":"Name Summary appDefaults val appDefaults: List <ReferenceMatcher> HUAWEI const val HUAWEI: String ignoredReferencesOnly val ignoredReferencesOnly: List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher . LENOVO const val LENOVO: String LG const val LG: String MEIZU const val MEIZU: String MOTOROLA const val MOTOROLA: String NVIDIA const val NVIDIA: String ONE_PLUS const val ONE_PLUS: String SAMSUNG const val SAMSUNG: String SHARP const val SHARP: String VIVO const val VIVO: String","title":"Companion Object Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/#companion-object-functions","text":"Name Summary buildKnownReferences fun buildKnownReferences(referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers . ignoredInstanceField fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern . ignoredJavaLocal fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern . instanceFieldLeak fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak. nativeGlobalVariableLeak fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher staticFieldLeak fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"Companion Object Functions"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-i-t-e-r-a-t-o-r-s/","text":"shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_ITERATORS ACCESSIBILITY_ITERATORS \u00b6 ACCESSIBILITY_ITERATORS","title":" a c c e s s i b i l i t y  i t e r a t o r s"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-i-t-e-r-a-t-o-r-s/#accessibility_iterators","text":"ACCESSIBILITY_ITERATORS","title":"ACCESSIBILITY_ITERATORS"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_NODE_ID_MANAGER ACCESSIBILITY_NODE_ID_MANAGER \u00b6 ACCESSIBILITY_NODE_ID_MANAGER","title":" a c c e s s i b i l i t y  n o d e  i d  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r/#accessibility_node_id_manager","text":"ACCESSIBILITY_NODE_ID_MANAGER","title":"ACCESSIBILITY_NODE_ID_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ACCESSIBILITY_NODE_INFO__MORIGINALTEXT \u00b6 ACCESSIBILITY_NODE_INFO__MORIGINALTEXT","title":" a c c e s s i b i l i t y  n o d e  i n f o   m o r i g i n a l t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t/#accessibility_node_info__moriginaltext","text":"ACCESSIBILITY_NODE_INFO__MORIGINALTEXT","title":"ACCESSIBILITY_NODE_INFO__MORIGINALTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / ACCOUNT_MANAGER ACCOUNT_MANAGER \u00b6 ACCOUNT_MANAGER","title":" a c c o u n t  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r/#account_manager","text":"ACCOUNT_MANAGER","title":"ACCOUNT_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l/","text":"shark-android / shark / AndroidReferenceMatchers / ACTIVITY_CHOOSE_MODEL ACTIVITY_CHOOSE_MODEL \u00b6 ACTIVITY_CHOOSE_MODEL","title":" a c t i v i t y  c h o o s e  m o d e l"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l/#activity_choose_model","text":"ACTIVITY_CHOOSE_MODEL","title":"ACTIVITY_CHOOSE_MODEL"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e/","text":"shark-android / shark / AndroidReferenceMatchers / ACTIVITY_CLIENT_RECORD__NEXT_IDLE ACTIVITY_CLIENT_RECORD__NEXT_IDLE \u00b6 ACTIVITY_CLIENT_RECORD__NEXT_IDLE","title":" a c t i v i t y  c l i e n t  r e c o r d   n e x t  i d l e"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e/#activity_client_record__next_idle","text":"ACTIVITY_CLIENT_RECORD__NEXT_IDLE","title":"ACTIVITY_CLIENT_RECORD__NEXT_IDLE"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / ACTIVITY_MANAGER_MCONTEXT ACTIVITY_MANAGER_MCONTEXT \u00b6 ACTIVITY_MANAGER_MCONTEXT","title":" a c t i v i t y  m a n a g e r  m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t/#activity_manager_mcontext","text":"ACTIVITY_MANAGER_MCONTEXT","title":"ACTIVITY_MANAGER_MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s/","text":"shark-android / shark / AndroidReferenceMatchers / APP_WIDGET_HOST_CALLBACKS APP_WIDGET_HOST_CALLBACKS \u00b6 APP_WIDGET_HOST_CALLBACKS","title":" a p p  w i d g e t  h o s t  c a l l b a c k s"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s/#app_widget_host_callbacks","text":"APP_WIDGET_HOST_CALLBACKS","title":"APP_WIDGET_HOST_CALLBACKS"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-s-s-i-s-t_-s-t-r-u-c-t-u-r-e/","text":"shark-android / shark / AndroidReferenceMatchers / ASSIST_STRUCTURE ASSIST_STRUCTURE \u00b6 ASSIST_STRUCTURE","title":" a s s i s t  s t r u c t u r e"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-s-s-i-s-t_-s-t-r-u-c-t-u-r-e/#assist_structure","text":"ASSIST_STRUCTURE","title":"ASSIST_STRUCTURE"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / AUDIO_MANAGER AUDIO_MANAGER \u00b6 AUDIO_MANAGER","title":" a u d i o  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r/#audio_manager","text":"AUDIO_MANAGER","title":"AUDIO_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c/","text":"shark-android / shark / AndroidReferenceMatchers / AUDIO_MANAGER__MCONTEXT_STATIC AUDIO_MANAGER__MCONTEXT_STATIC \u00b6 AUDIO_MANAGER__MCONTEXT_STATIC","title":" a u d i o  m a n a g e r   m c o n t e x t  s t a t i c"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c/#audio_manager__mcontext_static","text":"AUDIO_MANAGER__MCONTEXT_STATIC","title":"AUDIO_MANAGER__MCONTEXT_STATIC"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s/","text":"shark-android / shark / AndroidReferenceMatchers / AW_RESOURCE__SRESOURCES AW_RESOURCE__SRESOURCES \u00b6 AW_RESOURCE__SRESOURCES","title":" a w  r e s o u r c e   s r e s o u r c e s"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s/#aw_resource__sresources","text":"AW_RESOURCE__SRESOURCES","title":"AW_RESOURCE__SRESOURCES"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w/","text":"shark-android / shark / AndroidReferenceMatchers / BACKDROP_FRAME_RENDERER__MDECORVIEW BACKDROP_FRAME_RENDERER__MDECORVIEW \u00b6 BACKDROP_FRAME_RENDERER__MDECORVIEW","title":" b a c k d r o p  f r a m e  r e n d e r e r   m d e c o r v i e w"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w/#backdrop_frame_renderer__mdecorview","text":"BACKDROP_FRAME_RENDERER__MDECORVIEW","title":"BACKDROP_FRAME_RENDERER__MDECORVIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t/","text":"shark-android / shark / AndroidReferenceMatchers / BIOMETRIC_PROMPT BIOMETRIC_PROMPT \u00b6 BIOMETRIC_PROMPT","title":" b i o m e t r i c  p r o m p t"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t/#biometric_prompt","text":"BIOMETRIC_PROMPT","title":"BIOMETRIC_PROMPT"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e/","text":"shark-android / shark / AndroidReferenceMatchers / BLOCKING_QUEUE BLOCKING_QUEUE \u00b6 BLOCKING_QUEUE","title":" b l o c k i n g  q u e u e"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e/#blocking_queue","text":"BLOCKING_QUEUE","title":"BLOCKING_QUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / BUBBLE_POPUP_HELPER__SHELPER BUBBLE_POPUP_HELPER__SHELPER \u00b6 BUBBLE_POPUP_HELPER__SHELPER","title":" b u b b l e  p o p u p  h e l p e r   s h e l p e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r/#bubble_popup_helper__shelper","text":"BUBBLE_POPUP_HELPER__SHELPER","title":"BUBBLE_POPUP_HELPER__SHELPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / CLIPBOARD_EX_MANAGER CLIPBOARD_EX_MANAGER \u00b6 CLIPBOARD_EX_MANAGER","title":" c l i p b o a r d  e x  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r/#clipboard_ex_manager","text":"CLIPBOARD_EX_MANAGER","title":"CLIPBOARD_EX_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / CLIPBOARD_UI_MANAGER__SINSTANCE CLIPBOARD_UI_MANAGER__SINSTANCE \u00b6 CLIPBOARD_UI_MANAGER__SINSTANCE","title":" c l i p b o a r d  u i  m a n a g e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#clipboard_ui_manager__sinstance","text":"CLIPBOARD_UI_MANAGER__SINSTANCE","title":"CLIPBOARD_UI_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / CONNECTIVITY_MANAGER__SINSTANCE CONNECTIVITY_MANAGER__SINSTANCE \u00b6 CONNECTIVITY_MANAGER__SINSTANCE","title":" c o n n e c t i v i t y  m a n a g e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#connectivity_manager__sinstance","text":"CONNECTIVITY_MANAGER__SINSTANCE","title":"CONNECTIVITY_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-t-r-o-l-l-e-d_-i-n-p-u-t_-c-o-n-n-e-c-t-i-o-n_-w-r-a-p-p-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / CONTROLLED_INPUT_CONNECTION_WRAPPER CONTROLLED_INPUT_CONNECTION_WRAPPER \u00b6 CONTROLLED_INPUT_CONNECTION_WRAPPER","title":" c o n t r o l l e d  i n p u t  c o n n e c t i o n  w r a p p e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-t-r-o-l-l-e-d_-i-n-p-u-t_-c-o-n-n-e-c-t-i-o-n_-w-r-a-p-p-e-r/#controlled_input_connection_wrapper","text":"CONTROLLED_INPUT_CONNECTION_WRAPPER","title":"CONTROLLED_INPUT_CONNECTION_WRAPPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER \u00b6 DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER","title":" d e v i c e  p o l i c y  m a n a g e r   s e t t i n g s  o b s e r v e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r/#device_policy_manager__settings_observer","text":"DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER","title":"DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e/","text":"shark-android / shark / AndroidReferenceMatchers / EDITTEXT_BLINK_MESSAGEQUEUE EDITTEXT_BLINK_MESSAGEQUEUE \u00b6 EDITTEXT_BLINK_MESSAGEQUEUE","title":" e d i t t e x t  b l i n k  m e s s a g e q u e u e"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e/#edittext_blink_messagequeue","text":"EDITTEXT_BLINK_MESSAGEQUEUE","title":"EDITTEXT_BLINK_MESSAGEQUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e/","text":"shark-android / shark / AndroidReferenceMatchers / EVENT_RECEIVER__MMESSAGE_QUEUE EVENT_RECEIVER__MMESSAGE_QUEUE \u00b6 EVENT_RECEIVER__MMESSAGE_QUEUE","title":" e v e n t  r e c e i v e r   m m e s s a g e  q u e u e"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e/#event_receiver__mmessage_queue","text":"EVENT_RECEIVER__MMESSAGE_QUEUE","title":"EVENT_RECEIVER__MMESSAGE_QUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-x-t-e-n-d-e-d_-s-t-a-t-u-s_-b-a-r_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / EXTENDED_STATUS_BAR_MANAGER EXTENDED_STATUS_BAR_MANAGER \u00b6 EXTENDED_STATUS_BAR_MANAGER","title":" e x t e n d e d  s t a t u s  b a r  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-x-t-e-n-d-e-d_-s-t-a-t-u-s_-b-a-r_-m-a-n-a-g-e-r/#extended_status_bar_manager","text":"EXTENDED_STATUS_BAR_MANAGER","title":"EXTENDED_STATUS_BAR_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / FINALIZER_WATCHDOG_DAEMON FINALIZER_WATCHDOG_DAEMON \u00b6 FINALIZER_WATCHDOG_DAEMON","title":" f i n a l i z e r  w a t c h d o g  d a e m o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n/#finalizer_watchdog_daemon","text":"FINALIZER_WATCHDOG_DAEMON","title":"FINALIZER_WATCHDOG_DAEMON"},{"location":"api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / GESTURE_BOOST_MANAGER GESTURE_BOOST_MANAGER \u00b6 GESTURE_BOOST_MANAGER","title":" g e s t u r e  b o o s t  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r/#gesture_boost_manager","text":"GESTURE_BOOST_MANAGER","title":"GESTURE_BOOST_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-h-u-a-w-e-i/","text":"shark-android / shark / AndroidReferenceMatchers / HUAWEI HUAWEI \u00b6 const val HUAWEI: String","title":" h u a w e i"},{"location":"api/shark-android/shark/-android-reference-matchers/-h-u-a-w-e-i/#huawei","text":"const val HUAWEI: String","title":"HUAWEI"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e/","text":"shark-android / shark / AndroidReferenceMatchers / INPUT_METHOD_MANAGER_IS_TERRIBLE INPUT_METHOD_MANAGER_IS_TERRIBLE \u00b6 INPUT_METHOD_MANAGER_IS_TERRIBLE","title":" i n p u t  m e t h o d  m a n a g e r  i s  t e r r i b l e"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e/#input_method_manager_is_terrible","text":"INPUT_METHOD_MANAGER_IS_TERRIBLE","title":"INPUT_METHOD_MANAGER_IS_TERRIBLE"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y/","text":"shark-android / shark / AndroidReferenceMatchers / INSTRUMENTATION_RECOMMEND_ACTIVITY INSTRUMENTATION_RECOMMEND_ACTIVITY \u00b6 INSTRUMENTATION_RECOMMEND_ACTIVITY","title":" i n s t r u m e n t a t i o n  r e c o m m e n d  a c t i v i t y"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y/#instrumentation_recommend_activity","text":"INSTRUMENTATION_RECOMMEND_ACTIVITY","title":"INSTRUMENTATION_RECOMMEND_ACTIVITY"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-r-e-q-u-e-s-t_-f-i-n-i-s-h_-c-a-l-l-b-a-c-k/","text":"shark-android / shark / AndroidReferenceMatchers / IREQUEST_FINISH_CALLBACK IREQUEST_FINISH_CALLBACK \u00b6 IREQUEST_FINISH_CALLBACK","title":" i r e q u e s t  f i n i s h  c a l l b a c k"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-r-e-q-u-e-s-t_-f-i-n-i-s-h_-c-a-l-l-b-a-c-k/#irequest_finish_callback","text":"IREQUEST_FINISH_CALLBACK","title":"IREQUEST_FINISH_CALLBACK"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / LAYOUT_TRANSITION LAYOUT_TRANSITION \u00b6 LAYOUT_TRANSITION","title":" l a y o u t  t r a n s i t i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n/#layout_transition","text":"LAYOUT_TRANSITION","title":"LAYOUT_TRANSITION"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_HEAP_DUMPER \u00b6 LEAK_CANARY_HEAP_DUMPER","title":" l e a k  c a n a r y  h e a p  d u m p e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r/#leak_canary_heap_dumper","text":"LEAK_CANARY_HEAP_DUMPER","title":"LEAK_CANARY_HEAP_DUMPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l/","text":"shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_INTERNAL LEAK_CANARY_INTERNAL \u00b6 LEAK_CANARY_INTERNAL","title":" l e a k  c a n a r y  i n t e r n a l"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l/#leak_canary_internal","text":"LEAK_CANARY_INTERNAL","title":"LEAK_CANARY_INTERNAL"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d/","text":"shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_THREAD LEAK_CANARY_THREAD \u00b6 LEAK_CANARY_THREAD","title":" l e a k  c a n a r y  t h r e a d"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d/#leak_canary_thread","text":"LEAK_CANARY_THREAD","title":"LEAK_CANARY_THREAD"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-n-o-v-o/","text":"shark-android / shark / AndroidReferenceMatchers / LENOVO LENOVO \u00b6 const val LENOVO: String","title":" l e n o v o"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-n-o-v-o/#lenovo","text":"const val LENOVO: String","title":"LENOVO"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / LGCONTEXT__MCONTEXT LGCONTEXT__MCONTEXT \u00b6 LGCONTEXT__MCONTEXT","title":" l g c o n t e x t   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t/#lgcontext__mcontext","text":"LGCONTEXT__MCONTEXT","title":"LGCONTEXT__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g/","text":"shark-android / shark / AndroidReferenceMatchers / LG LG \u00b6 const val LG: String","title":" l g"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g/#lg","text":"const val LG: String","title":"LG"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / MAGNIFIER MAGNIFIER \u00b6 MAGNIFIER","title":" m a g n i f i e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r/#magnifier","text":"MAGNIFIER","title":"MAGNIFIER"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-i-n/","text":"shark-android / shark / AndroidReferenceMatchers / MAIN MAIN \u00b6 MAIN","title":" m a i n"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-i-n/#main","text":"MAIN","title":"MAIN"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t/","text":"shark-android / shark / AndroidReferenceMatchers / MAPPER_CLIENT MAPPER_CLIENT \u00b6 MAPPER_CLIENT","title":" m a p p e r  c l i e n t"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t/#mapper_client","text":"MAPPER_CLIENT","title":"MAPPER_CLIENT"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k/","text":"shark-android / shark / AndroidReferenceMatchers / MEDIA_PROJECTION_CALLBACK MEDIA_PROJECTION_CALLBACK \u00b6 MEDIA_PROJECTION_CALLBACK","title":" m e d i a  p r o j e c t i o n  c a l l b a c k"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k/#media_projection_callback","text":"MEDIA_PROJECTION_CALLBACK","title":"MEDIA_PROJECTION_CALLBACK"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / MEDIA_SCANNER_CONNECTION MEDIA_SCANNER_CONNECTION \u00b6 MEDIA_SCANNER_CONNECTION","title":" m e d i a  s c a n n e r  c o n n e c t i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n/#media_scanner_connection","text":"MEDIA_SCANNER_CONNECTION","title":"MEDIA_SCANNER_CONNECTION"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / MEDIA_SESSION_LEGACY_HELPER__SINSTANCE MEDIA_SESSION_LEGACY_HELPER__SINSTANCE \u00b6 MEDIA_SESSION_LEGACY_HELPER__SINSTANCE","title":" m e d i a  s e s s i o n  l e g a c y  h e l p e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e/#media_session_legacy_helper__sinstance","text":"MEDIA_SESSION_LEGACY_HELPER__SINSTANCE","title":"MEDIA_SESSION_LEGACY_HELPER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-i-z-u/","text":"shark-android / shark / AndroidReferenceMatchers / MEIZU MEIZU \u00b6 const val MEIZU: String","title":" m e i z u"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-i-z-u/#meizu","text":"const val MEIZU: String","title":"MEIZU"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-o-t-o-r-o-l-a/","text":"shark-android / shark / AndroidReferenceMatchers / MOTOROLA MOTOROLA \u00b6 const val MOTOROLA: String","title":" m o t o r o l a"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-o-t-o-r-o-l-a/#motorola","text":"const val MOTOROLA: String","title":"MOTOROLA"},{"location":"api/shark-android/shark/-android-reference-matchers/-n-v-i-d-i-a/","text":"shark-android / shark / AndroidReferenceMatchers / NVIDIA NVIDIA \u00b6 const val NVIDIA: String","title":" n v i d i a"},{"location":"api/shark-android/shark/-android-reference-matchers/-n-v-i-d-i-a/#nvidia","text":"const val NVIDIA: String","title":"NVIDIA"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-e-m_-s-c-e-n-e_-c-a-l-l_-b-l-o-c-k-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / OEM_SCENE_CALL_BLOCKER OEM_SCENE_CALL_BLOCKER \u00b6 OEM_SCENE_CALL_BLOCKER","title":" o e m  s c e n e  c a l l  b l o c k e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-e-m_-s-c-e-n-e_-c-a-l-l_-b-l-o-c-k-e-r/#oem_scene_call_blocker","text":"OEM_SCENE_CALL_BLOCKER","title":"OEM_SCENE_CALL_BLOCKER"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-n-e_-p-l-u-s/","text":"shark-android / shark / AndroidReferenceMatchers / ONE_PLUS ONE_PLUS \u00b6 const val ONE_PLUS: String","title":" o n e  p l u s"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-n-e_-p-l-u-s/#one_plus","text":"const val ONE_PLUS: String","title":"ONE_PLUS"},{"location":"api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / PERSONA_MANAGER PERSONA_MANAGER \u00b6 PERSONA_MANAGER","title":" p e r s o n a  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#persona_manager","text":"PERSONA_MANAGER","title":"PERSONA_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s/","text":"shark-android / shark / AndroidReferenceMatchers / REFERENCES REFERENCES \u00b6 REFERENCES","title":" r e f e r e n c e s"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s/#references","text":"REFERENCES","title":"REFERENCES"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / RESOURCES__MCONTEXT RESOURCES__MCONTEXT \u00b6 RESOURCES__MCONTEXT","title":" r e s o u r c e s   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t/#resources__mcontext","text":"RESOURCES__MCONTEXT","title":"RESOURCES__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-a-m-s-u-n-g/","text":"shark-android / shark / AndroidReferenceMatchers / SAMSUNG SAMSUNG \u00b6 const val SAMSUNG: String","title":" s a m s u n g"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-a-m-s-u-n-g/#samsung","text":"const val SAMSUNG: String","title":"SAMSUNG"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_APP_ICON_SOLUTION SEM_APP_ICON_SOLUTION \u00b6 SEM_APP_ICON_SOLUTION","title":" s e m  a p p  i c o n  s o l u t i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n/#sem_app_icon_solution","text":"SEM_APP_ICON_SOLUTION","title":"SEM_APP_ICON_SOLUTION"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_CLIPBOARD_MANAGER__MCONTEXT SEM_CLIPBOARD_MANAGER__MCONTEXT \u00b6 SEM_CLIPBOARD_MANAGER__MCONTEXT","title":" s e m  c l i p b o a r d  m a n a g e r   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#sem_clipboard_manager__mcontext","text":"SEM_CLIPBOARD_MANAGER__MCONTEXT","title":"SEM_CLIPBOARD_MANAGER__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_EMERGENCY_MANAGER__MCONTEXT SEM_EMERGENCY_MANAGER__MCONTEXT \u00b6 SEM_EMERGENCY_MANAGER__MCONTEXT","title":" s e m  e m e r g e n c y  m a n a g e r   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#sem_emergency_manager__mcontext","text":"SEM_EMERGENCY_MANAGER__MCONTEXT","title":"SEM_EMERGENCY_MANAGER__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SEM_PERSONA_MANAGER SEM_PERSONA_MANAGER \u00b6 SEM_PERSONA_MANAGER","title":" s e m  p e r s o n a  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#sem_persona_manager","text":"SEM_PERSONA_MANAGER","title":"SEM_PERSONA_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-h-a-r-p/","text":"shark-android / shark / AndroidReferenceMatchers / SHARP SHARP \u00b6 const val SHARP: String","title":" s h a r p"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-h-a-r-p/#sharp","text":"const val SHARP: String","title":"SHARP"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SMART_COVER_MANAGER SMART_COVER_MANAGER \u00b6 SMART_COVER_MANAGER","title":" s m a r t  c o v e r  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r/#smart_cover_manager","text":"SMART_COVER_MANAGER","title":"SMART_COVER_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPAN_CONTROLLER SPAN_CONTROLLER \u00b6 SPAN_CONTROLLER","title":" s p a n  c o n t r o l l e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r/#span_controller","text":"SPAN_CONTROLLER","title":"SPAN_CONTROLLER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPEECH_RECOGNIZER SPEECH_RECOGNIZER \u00b6 SPEECH_RECOGNIZER","title":" s p e e c h  r e c o g n i z e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r/#speech_recognizer","text":"SPEECH_RECOGNIZER","title":"SPEECH_RECOGNIZER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPELL_CHECKER SPELL_CHECKER \u00b6 SPELL_CHECKER","title":" s p e l l  c h e c k e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r/#spell_checker","text":"SPELL_CHECKER","title":"SPELL_CHECKER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n/","text":"shark-android / shark / AndroidReferenceMatchers / SPELL_CHECKER_SESSION SPELL_CHECKER_SESSION \u00b6 SPELL_CHECKER_SESSION","title":" s p e l l  c h e c k e r  s e s s i o n"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n/#spell_checker_session","text":"SPELL_CHECKER_SESSION","title":"SPELL_CHECKER_SESSION"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r/","text":"shark-android / shark / AndroidReferenceMatchers / SPEN_GESTURE_MANAGER SPEN_GESTURE_MANAGER \u00b6 SPEN_GESTURE_MANAGER","title":" s p e n  g e s t u r e  m a n a g e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r/#spen_gesture_manager","text":"SPEN_GESTURE_MANAGER","title":"SPEN_GESTURE_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-t-a-t-i-c_-m-t-a-r-g-e-t_-v-i-e-w/","text":"shark-android / shark / AndroidReferenceMatchers / STATIC_MTARGET_VIEW STATIC_MTARGET_VIEW \u00b6 STATIC_MTARGET_VIEW","title":" s t a t i c  m t a r g e t  v i e w"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-t-a-t-i-c_-m-t-a-r-g-e-t_-v-i-e-w/#static_mtarget_view","text":"STATIC_MTARGET_VIEW","title":"STATIC_MTARGET_VIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l/","text":"shark-android / shark / AndroidReferenceMatchers / SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL \u00b6 SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL","title":" s y s t e m  s e n s o r  m a n a g e r   m a p p c o n t e x t i m p l"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l/#system_sensor_manager__mappcontextimpl","text":"SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL","title":"SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d/","text":"shark-android / shark / AndroidReferenceMatchers / TEXT_LINE__SCACHED TEXT_LINE__SCACHED \u00b6 TEXT_LINE__SCACHED","title":" t e x t  l i n e   s c a c h e d"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d/#text_line__scached","text":"TEXT_LINE__SCACHED","title":"TEXT_LINE__SCACHED"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h/","text":"shark-android / shark / AndroidReferenceMatchers / TEXT_TO_SPEECH TEXT_TO_SPEECH \u00b6 TEXT_TO_SPEECH","title":" t e x t  t o  s p e e c h"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h/#text_to_speech","text":"TEXT_TO_SPEECH","title":"TEXT_TO_SPEECH"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/","text":"shark-android / shark / AndroidReferenceMatchers / TEXT_VIEW__MLAST_HOVERED_VIEW TEXT_VIEW__MLAST_HOVERED_VIEW \u00b6 TEXT_VIEW__MLAST_HOVERED_VIEW","title":" t e x t  v i e w   m l a s t  h o v e r e d  v i e w"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/#text_view__mlast_hovered_view","text":"TEXT_VIEW__MLAST_HOVERED_VIEW","title":"TEXT_VIEW__MLAST_HOVERED_VIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-o-a-s-t_-t-n/","text":"shark-android / shark / AndroidReferenceMatchers / TOAST_TN TOAST_TN \u00b6 TOAST_TN","title":" t o a s t  t n"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-o-a-s-t_-t-n/#toast_tn","text":"TOAST_TN","title":"TOAST_TN"},{"location":"api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"shark-android / shark / AndroidReferenceMatchers / USER_MANAGER__SINSTANCE USER_MANAGER__SINSTANCE \u00b6 USER_MANAGER__SINSTANCE","title":" u s e r  m a n a g e r   s i n s t a n c e"},{"location":"api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#user_manager__sinstance","text":"USER_MANAGER__SINSTANCE","title":"USER_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t/","text":"shark-android / shark / AndroidReferenceMatchers / VIEWLOCATIONHOLDER_ROOT VIEWLOCATIONHOLDER_ROOT \u00b6 VIEWLOCATIONHOLDER_ROOT","title":" v i e w l o c a t i o n h o l d e r  r o o t"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t/#viewlocationholder_root","text":"VIEWLOCATIONHOLDER_ROOT","title":"VIEWLOCATIONHOLDER_ROOT"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t/","text":"shark-android / shark / AndroidReferenceMatchers / VIEW_CONFIGURATION__MCONTEXT VIEW_CONFIGURATION__MCONTEXT \u00b6 VIEW_CONFIGURATION__MCONTEXT","title":" v i e w  c o n f i g u r a t i o n   m c o n t e x t"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t/#view_configuration__mcontext","text":"VIEW_CONFIGURATION__MCONTEXT","title":"VIEW_CONFIGURATION__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-v-o/","text":"shark-android / shark / AndroidReferenceMatchers / VIVO VIVO \u00b6 const val VIVO: String","title":" v i v o"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-v-o/#vivo","text":"const val VIVO: String","title":"VIVO"},{"location":"api/shark-android/shark/-android-reference-matchers/-w-i-n-d-o-w_-m-a-n-a-g-e-r_-g-l-o-b-a-l/","text":"shark-android / shark / AndroidReferenceMatchers / WINDOW_MANAGER_GLOBAL WINDOW_MANAGER_GLOBAL \u00b6 WINDOW_MANAGER_GLOBAL","title":" w i n d o w  m a n a g e r  g l o b a l"},{"location":"api/shark-android/shark/-android-reference-matchers/-w-i-n-d-o-w_-m-a-n-a-g-e-r_-g-l-o-b-a-l/#window_manager_global","text":"WINDOW_MANAGER_GLOBAL","title":"WINDOW_MANAGER_GLOBAL"},{"location":"api/shark-android/shark/-android-reference-matchers/app-defaults/","text":"shark-android / shark / AndroidReferenceMatchers / appDefaults appDefaults \u00b6 val appDefaults: List <ReferenceMatcher> See Also AndroidReferenceMatchers","title":"App defaults"},{"location":"api/shark-android/shark/-android-reference-matchers/app-defaults/#appdefaults","text":"val appDefaults: List <ReferenceMatcher> See Also AndroidReferenceMatchers","title":"appDefaults"},{"location":"api/shark-android/shark/-android-reference-matchers/build-known-references/","text":"shark-android / shark / AndroidReferenceMatchers / buildKnownReferences buildKnownReferences \u00b6 fun buildKnownReferences(referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers .","title":"Build known references"},{"location":"api/shark-android/shark/-android-reference-matchers/build-known-references/#buildknownreferences","text":"fun buildKnownReferences(referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers .","title":"buildKnownReferences"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-instance-field/","text":"shark-android / shark / AndroidReferenceMatchers / ignoredInstanceField ignoredInstanceField \u00b6 fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern .","title":"Ignored instance field"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-instance-field/#ignoredinstancefield","text":"fun ignoredInstanceField(className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern .","title":"ignoredInstanceField"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-java-local/","text":"shark-android / shark / AndroidReferenceMatchers / ignoredJavaLocal ignoredJavaLocal \u00b6 fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern .","title":"Ignored java local"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-java-local/#ignoredjavalocal","text":"fun ignoredJavaLocal(threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern .","title":"ignoredJavaLocal"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-references-only/","text":"shark-android / shark / AndroidReferenceMatchers / ignoredReferencesOnly ignoredReferencesOnly \u00b6 val ignoredReferencesOnly: List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher .","title":"Ignored references only"},{"location":"api/shark-android/shark/-android-reference-matchers/ignored-references-only/#ignoredreferencesonly","text":"val ignoredReferencesOnly: List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher .","title":"ignoredReferencesOnly"},{"location":"api/shark-android/shark/-android-reference-matchers/instance-field-leak/","text":"shark-android / shark / AndroidReferenceMatchers / instanceFieldLeak instanceFieldLeak \u00b6 fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak.","title":"Instance field leak"},{"location":"api/shark-android/shark/-android-reference-matchers/instance-field-leak/#instancefieldleak","text":"fun instanceFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern . description should convey what we know about this library leak.","title":"instanceFieldLeak"},{"location":"api/shark-android/shark/-android-reference-matchers/native-global-variable-leak/","text":"shark-android / shark / AndroidReferenceMatchers / nativeGlobalVariableLeak nativeGlobalVariableLeak \u00b6 fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher","title":"Native global variable leak"},{"location":"api/shark-android/shark/-android-reference-matchers/native-global-variable-leak/#nativeglobalvariableleak","text":"fun nativeGlobalVariableLeak(className: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher","title":"nativeGlobalVariableLeak"},{"location":"api/shark-android/shark/-android-reference-matchers/static-field-leak/","text":"shark-android / shark / AndroidReferenceMatchers / staticFieldLeak staticFieldLeak \u00b6 fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"Static field leak"},{"location":"api/shark-android/shark/-android-reference-matchers/static-field-leak/#staticfieldleak","text":"fun staticFieldLeak(className: String , fieldName: String , description: String = \"\", patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern . description should convey what we know about this library leak.","title":"staticFieldLeak"},{"location":"api/shark-graph/","text":"shark-graph Packages \u00b6 Name Summary shark Index \u00b6 All Types","title":"Home"},{"location":"api/shark-graph/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-graph/#index","text":"All Types","title":"Index"},{"location":"api/shark-graph/alltypes/","text":"All Types \u00b6 Name Summary shark.GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. shark.HeapField Represents a static field or an instance field. shark.HeapGraph Enables navigation through the heap graph of objects. shark.HeapObject An object in the heap dump. shark.HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. shark.HprofHeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . shark.ProguardMapping shark.ProguardMappingReader","title":"Home"},{"location":"api/shark-graph/alltypes/#all-types","text":"Name Summary shark.GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. shark.HeapField Represents a static field or an instance field. shark.HeapGraph Enables navigation through the heap graph of objects. shark.HeapObject An object in the heap dump. shark.HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. shark.HprofHeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . shark.ProguardMapping shark.ProguardMappingReader","title":"All Types"},{"location":"api/shark-graph/shark/","text":"shark-graph / shark Package shark \u00b6 Types \u00b6 Name Summary GraphContext class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. HeapField class HeapField Represents a static field or an instance field. HeapGraph interface HeapGraph Enables navigation through the heap graph of objects. HeapObject sealed class HeapObject An object in the heap dump. HeapValue class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . ProguardMapping class ProguardMapping ProguardMappingReader class ProguardMappingReader","title":"Core: Graph"},{"location":"api/shark-graph/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-graph/shark/#types","text":"Name Summary GraphContext class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. HeapField class HeapField Represents a static field or an instance field. HeapGraph interface HeapGraph Enables navigation through the heap graph of objects. HeapObject sealed class HeapObject An object in the heap dump. HeapValue class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . ProguardMapping class ProguardMapping ProguardMappingReader class ProguardMappingReader","title":"Types"},{"location":"api/shark-graph/shark/-graph-context/","text":"shark-graph / shark / GraphContext GraphContext \u00b6 class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. Constructors \u00b6 Name Summary <init> GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. Functions \u00b6 Name Summary contains operator fun contains(key: String ): Boolean get operator fun <T> get(key: String ): T ? getOrPut fun <T> getOrPut(key: String , defaultValue: () -> T ): T minusAssign operator fun minusAssign(key: String ): Unit set operator fun <T> set(key: String , value: T ): Unit","title":"Home"},{"location":"api/shark-graph/shark/-graph-context/#graphcontext","text":"class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":"GraphContext"},{"location":"api/shark-graph/shark/-graph-context/#constructors","text":"Name Summary <init> GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":"Constructors"},{"location":"api/shark-graph/shark/-graph-context/#functions","text":"Name Summary contains operator fun contains(key: String ): Boolean get operator fun <T> get(key: String ): T ? getOrPut fun <T> getOrPut(key: String , defaultValue: () -> T ): T minusAssign operator fun minusAssign(key: String ): Unit set operator fun <T> set(key: String , value: T ): Unit","title":"Functions"},{"location":"api/shark-graph/shark/-graph-context/-init-/","text":"shark-graph / shark / GraphContext / <init> <init> \u00b6 GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":" init "},{"location":"api/shark-graph/shark/-graph-context/-init-/#init","text":"GraphContext() In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-graph-context/contains/","text":"shark-graph / shark / GraphContext / contains contains \u00b6 operator fun contains(key: String ): Boolean See Also MutableMap.containsKey","title":"Contains"},{"location":"api/shark-graph/shark/-graph-context/contains/#contains","text":"operator fun contains(key: String ): Boolean See Also MutableMap.containsKey","title":"contains"},{"location":"api/shark-graph/shark/-graph-context/get-or-put/","text":"shark-graph / shark / GraphContext / getOrPut getOrPut \u00b6 fun <T> getOrPut(key: String , defaultValue: () -> T ): T See Also MutableMap.getOrPut","title":"Get or put"},{"location":"api/shark-graph/shark/-graph-context/get-or-put/#getorput","text":"fun <T> getOrPut(key: String , defaultValue: () -> T ): T See Also MutableMap.getOrPut","title":"getOrPut"},{"location":"api/shark-graph/shark/-graph-context/get/","text":"shark-graph / shark / GraphContext / get get \u00b6 operator fun <T> get(key: String ): T ?","title":"Get"},{"location":"api/shark-graph/shark/-graph-context/get/#get","text":"operator fun <T> get(key: String ): T ?","title":"get"},{"location":"api/shark-graph/shark/-graph-context/minus-assign/","text":"shark-graph / shark / GraphContext / minusAssign minusAssign \u00b6 operator fun minusAssign(key: String ): Unit See Also MutableMap.remove","title":"Minus assign"},{"location":"api/shark-graph/shark/-graph-context/minus-assign/#minusassign","text":"operator fun minusAssign(key: String ): Unit See Also MutableMap.remove","title":"minusAssign"},{"location":"api/shark-graph/shark/-graph-context/set/","text":"shark-graph / shark / GraphContext / set set \u00b6 operator fun <T> set(key: String , value: T ): Unit See Also MutableMap.set","title":"Set"},{"location":"api/shark-graph/shark/-graph-context/set/#set","text":"operator fun <T> set(key: String , value: T ): Unit See Also MutableMap.set","title":"set"},{"location":"api/shark-graph/shark/-heap-field/","text":"shark-graph / shark / HeapField HeapField \u00b6 class HeapField Represents a static field or an instance field. Constructors \u00b6 Name Summary <init> HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field. Properties \u00b6 Name Summary declaringClass val declaringClass: HeapObject.HeapClass The class this field was declared in. name val name: String Name of the field value val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray . valueAsClass val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise. valueAsInstance val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise. valueAsObjectArray val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise. valueAsPrimitiveArray val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Home"},{"location":"api/shark-graph/shark/-heap-field/#heapfield","text":"class HeapField Represents a static field or an instance field.","title":"HeapField"},{"location":"api/shark-graph/shark/-heap-field/#constructors","text":"Name Summary <init> HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field.","title":"Constructors"},{"location":"api/shark-graph/shark/-heap-field/#properties","text":"Name Summary declaringClass val declaringClass: HeapObject.HeapClass The class this field was declared in. name val name: String Name of the field value val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray . valueAsClass val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise. valueAsInstance val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise. valueAsObjectArray val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise. valueAsPrimitiveArray val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-field/-init-/","text":"shark-graph / shark / HeapField / <init> <init> \u00b6 HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field.","title":" init "},{"location":"api/shark-graph/shark/-heap-field/-init-/#init","text":"HeapField(declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field.","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-heap-field/declaring-class/","text":"shark-graph / shark / HeapField / declaringClass declaringClass \u00b6 val declaringClass: HeapObject.HeapClass The class this field was declared in.","title":"Declaring class"},{"location":"api/shark-graph/shark/-heap-field/declaring-class/#declaringclass","text":"val declaringClass: HeapObject.HeapClass The class this field was declared in.","title":"declaringClass"},{"location":"api/shark-graph/shark/-heap-field/name/","text":"shark-graph / shark / HeapField / name name \u00b6 val name: String Name of the field","title":"Name"},{"location":"api/shark-graph/shark/-heap-field/name/#name","text":"val name: String Name of the field","title":"name"},{"location":"api/shark-graph/shark/-heap-field/value-as-class/","text":"shark-graph / shark / HeapField / valueAsClass valueAsClass \u00b6 val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise.","title":"Value as class"},{"location":"api/shark-graph/shark/-heap-field/value-as-class/#valueasclass","text":"val valueAsClass: HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise.","title":"valueAsClass"},{"location":"api/shark-graph/shark/-heap-field/value-as-instance/","text":"shark-graph / shark / HeapField / valueAsInstance valueAsInstance \u00b6 val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise.","title":"Value as instance"},{"location":"api/shark-graph/shark/-heap-field/value-as-instance/#valueasinstance","text":"val valueAsInstance: HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise.","title":"valueAsInstance"},{"location":"api/shark-graph/shark/-heap-field/value-as-object-array/","text":"shark-graph / shark / HeapField / valueAsObjectArray valueAsObjectArray \u00b6 val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise.","title":"Value as object array"},{"location":"api/shark-graph/shark/-heap-field/value-as-object-array/#valueasobjectarray","text":"val valueAsObjectArray: HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise.","title":"valueAsObjectArray"},{"location":"api/shark-graph/shark/-heap-field/value-as-primitive-array/","text":"shark-graph / shark / HeapField / valueAsPrimitiveArray valueAsPrimitiveArray \u00b6 val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Value as primitive array"},{"location":"api/shark-graph/shark/-heap-field/value-as-primitive-array/#valueasprimitivearray","text":"val valueAsPrimitiveArray: HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"valueAsPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-field/value/","text":"shark-graph / shark / HeapField / value value \u00b6 val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray .","title":"Value"},{"location":"api/shark-graph/shark/-heap-field/value/#value","text":"val value: HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray .","title":"value"},{"location":"api/shark-graph/shark/-heap-graph/","text":"shark-graph / shark / HeapGraph HeapGraph \u00b6 interface HeapGraph Enables navigation through the heap graph of objects. Properties \u00b6 Name Summary classes abstract val classes: Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots abstract val gcRoots: List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize abstract val identifierByteSize: Int instances abstract val instances: Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objects abstract val objects: Sequence < HeapObject > Sequence of all objects in the heap dump. Functions \u00b6 Name Summary findClassByName abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump. Inheritors \u00b6 Name Summary HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof .","title":"Home"},{"location":"api/shark-graph/shark/-heap-graph/#heapgraph","text":"interface HeapGraph Enables navigation through the heap graph of objects.","title":"HeapGraph"},{"location":"api/shark-graph/shark/-heap-graph/#properties","text":"Name Summary classes abstract val classes: Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots abstract val gcRoots: List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize abstract val identifierByteSize: Int instances abstract val instances: Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objects abstract val objects: Sequence < HeapObject > Sequence of all objects in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-graph/#functions","text":"Name Summary findClassByName abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Functions"},{"location":"api/shark-graph/shark/-heap-graph/#inheritors","text":"Name Summary HprofHeapGraph class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof .","title":"Inheritors"},{"location":"api/shark-graph/shark/-heap-graph/classes/","text":"shark-graph / shark / HeapGraph / classes classes \u00b6 abstract val classes: Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"Classes"},{"location":"api/shark-graph/shark/-heap-graph/classes/#classes","text":"abstract val classes: Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"classes"},{"location":"api/shark-graph/shark/-heap-graph/context/","text":"shark-graph / shark / HeapGraph / context context \u00b6 abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"Context"},{"location":"api/shark-graph/shark/-heap-graph/context/#context","text":"abstract val context: GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"context"},{"location":"api/shark-graph/shark/-heap-graph/find-class-by-name/","text":"shark-graph / shark / HeapGraph / findClassByName findClassByName \u00b6 abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"Find class by name"},{"location":"api/shark-graph/shark/-heap-graph/find-class-by-name/#findclassbyname","text":"abstract fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"findClassByName"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id-or-null/","text":"shark-graph / shark / HeapGraph / findObjectByIdOrNull findObjectByIdOrNull \u00b6 abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"Find object by id or null"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id-or-null/#findobjectbyidornull","text":"abstract fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"findObjectByIdOrNull"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id/","text":"shark-graph / shark / HeapGraph / findObjectById findObjectById \u00b6 abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"Find object by id"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id/#findobjectbyid","text":"abstract fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"findObjectById"},{"location":"api/shark-graph/shark/-heap-graph/gc-roots/","text":"shark-graph / shark / HeapGraph / gcRoots gcRoots \u00b6 abstract val gcRoots: List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"Gc roots"},{"location":"api/shark-graph/shark/-heap-graph/gc-roots/#gcroots","text":"abstract val gcRoots: List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"gcRoots"},{"location":"api/shark-graph/shark/-heap-graph/identifier-byte-size/","text":"shark-graph / shark / HeapGraph / identifierByteSize identifierByteSize \u00b6 abstract val identifierByteSize: Int","title":"Identifier byte size"},{"location":"api/shark-graph/shark/-heap-graph/identifier-byte-size/#identifierbytesize","text":"abstract val identifierByteSize: Int","title":"identifierByteSize"},{"location":"api/shark-graph/shark/-heap-graph/instances/","text":"shark-graph / shark / HeapGraph / instances instances \u00b6 abstract val instances: Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"Instances"},{"location":"api/shark-graph/shark/-heap-graph/instances/#instances","text":"abstract val instances: Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"instances"},{"location":"api/shark-graph/shark/-heap-graph/object-exists/","text":"shark-graph / shark / HeapGraph / objectExists objectExists \u00b6 abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Object exists"},{"location":"api/shark-graph/shark/-heap-graph/object-exists/#objectexists","text":"abstract fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"objectExists"},{"location":"api/shark-graph/shark/-heap-graph/objects/","text":"shark-graph / shark / HeapGraph / objects objects \u00b6 abstract val objects: Sequence < HeapObject > Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"Objects"},{"location":"api/shark-graph/shark/-heap-graph/objects/#objects","text":"abstract val objects: Sequence < HeapObject > Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"objects"},{"location":"api/shark-graph/shark/-heap-object/","text":"shark-graph / shark / HeapObject HeapObject \u00b6 sealed class HeapObject An object in the heap dump. Types \u00b6 Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump. Properties \u00b6 Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId abstract val objectId: Long The heap identifier of this object. Functions \u00b6 Name Summary readRecord abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord . Inheritors \u00b6 Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/#heapobject","text":"sealed class HeapObject An object in the heap dump.","title":"HeapObject"},{"location":"api/shark-graph/shark/-heap-object/#types","text":"Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"Types"},{"location":"api/shark-graph/shark/-heap-object/#properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId abstract val objectId: Long The heap identifier of this object.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/#functions","text":"Name Summary readRecord abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord .","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/#inheritors","text":"Name Summary HeapClass class HeapClass : HeapObject A class in the heap dump. HeapInstance class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"Inheritors"},{"location":"api/shark-graph/shark/-heap-object/as-class/","text":"shark-graph / shark / HeapObject / asClass asClass \u00b6 val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise","title":"As class"},{"location":"api/shark-graph/shark/-heap-object/as-class/#asclass","text":"val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise","title":"asClass"},{"location":"api/shark-graph/shark/-heap-object/as-instance/","text":"shark-graph / shark / HeapObject / asInstance asInstance \u00b6 val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise","title":"As instance"},{"location":"api/shark-graph/shark/-heap-object/as-instance/#asinstance","text":"val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise","title":"asInstance"},{"location":"api/shark-graph/shark/-heap-object/as-object-array/","text":"shark-graph / shark / HeapObject / asObjectArray asObjectArray \u00b6 val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise","title":"As object array"},{"location":"api/shark-graph/shark/-heap-object/as-object-array/#asobjectarray","text":"val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise","title":"asObjectArray"},{"location":"api/shark-graph/shark/-heap-object/as-primitive-array/","text":"shark-graph / shark / HeapObject / asPrimitiveArray asPrimitiveArray \u00b6 val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"As primitive array"},{"location":"api/shark-graph/shark/-heap-object/as-primitive-array/#asprimitivearray","text":"val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"asPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-object/graph/","text":"shark-graph / shark / HeapObject / graph graph \u00b6 abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/graph/#graph","text":"abstract val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/object-id/","text":"shark-graph / shark / HeapObject / objectId objectId \u00b6 abstract val objectId: Long The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/object-id/#objectid","text":"abstract val objectId: Long The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/read-record/","text":"shark-graph / shark / HeapObject / readRecord readRecord \u00b6 abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/read-record/#readrecord","text":"abstract fun readRecord(): ObjectRecord Reads and returns the underlying ObjectRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/","text":"shark-graph / shark / HeapObject / HeapClass HeapClass \u00b6 class HeapClass : HeapObject A class in the heap dump. Properties \u00b6 Name Summary classHierarchy val classHierarchy: Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included). directInstances val directInstances: Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceByteSize val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. instances val instances: Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class. name val name: String The name of this class, identical to Class.getName . objectId val objectId: Long The heap identifier of this object. simpleName val simpleName: String Returns name stripped of any string content before the last period (included). subclasses val subclasses: Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump. superclass val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned. Inherited Properties \u00b6 Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions \u00b6 Name Summary get operator fun get(fieldName: String ): HeapField ? readFieldsByteSize fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. readRecord fun readRecord(): ClassDumpRecord Reads and returns the underlying ClassDumpRecord . readStaticField fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. readStaticFields fun readStaticFields(): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . subclassOf infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass . superclassOf infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#heapclass","text":"class HeapClass : HeapObject A class in the heap dump.","title":"HeapClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#properties","text":"Name Summary classHierarchy val classHierarchy: Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included). directInstances val directInstances: Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceByteSize val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. instances val instances: Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class. name val name: String The name of this class, identical to Class.getName . objectId val objectId: Long The heap identifier of this object. simpleName val simpleName: String Returns name stripped of any string content before the last period (included). subclasses val subclasses: Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump. superclass val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#functions","text":"Name Summary get operator fun get(fieldName: String ): HeapField ? readFieldsByteSize fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. readRecord fun readRecord(): ClassDumpRecord Reads and returns the underlying ClassDumpRecord . readStaticField fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. readStaticFields fun readStaticFields(): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . subclassOf infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass . superclassOf infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy/","text":"shark-graph / shark / HeapObject / HeapClass / classHierarchy classHierarchy \u00b6 val classHierarchy: Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included).","title":"Class hierarchy"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy/#classhierarchy","text":"val classHierarchy: Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included).","title":"classHierarchy"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/direct-instances/","text":"shark-graph / shark / HeapObject / HeapClass / directInstances directInstances \u00b6 val directInstances: Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class.","title":"Direct instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/direct-instances/#directinstances","text":"val directInstances: Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class.","title":"directInstances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/get/","text":"shark-graph / shark / HeapObject / HeapClass / get get \u00b6 operator fun get(fieldName: String ): HeapField ? See Also readStaticField","title":"Get"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/get/#get","text":"operator fun get(fieldName: String ): HeapField ? See Also readStaticField","title":"get"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/graph/","text":"shark-graph / shark / HeapObject / HeapClass / graph graph \u00b6 val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size/","text":"shark-graph / shark / HeapObject / HeapClass / instanceByteSize instanceByteSize \u00b6 val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. See Also readFieldsByteSize","title":"Instance byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size/#instancebytesize","text":"val instanceByteSize: Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. See Also readFieldsByteSize","title":"instanceByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instances/","text":"shark-graph / shark / HeapObject / HeapClass / instances instances \u00b6 val instances: Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class.","title":"Instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instances/#instances","text":"val instances: Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class.","title":"instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/name/","text":"shark-graph / shark / HeapObject / HeapClass / name name \u00b6 val name: String The name of this class, identical to Class.getName .","title":"Name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/name/#name","text":"val name: String The name of this class, identical to Class.getName .","title":"name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-id/","text":"shark-graph / shark / HeapObject / HeapClass / objectId objectId \u00b6 val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size/","text":"shark-graph / shark / HeapObject / HeapClass / readFieldsByteSize readFieldsByteSize \u00b6 fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. This may trigger IO reads. See Also instanceByteSize","title":"Read fields byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size/#readfieldsbytesize","text":"fun readFieldsByteSize(): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. This may trigger IO reads. See Also instanceByteSize","title":"readFieldsByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record/","text":"shark-graph / shark / HeapObject / HeapClass / readRecord readRecord \u00b6 fun readRecord(): ClassDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ClassDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record/#readrecord","text":"fun readRecord(): ClassDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ClassDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-field/","text":"shark-graph / shark / HeapObject / HeapClass / readStaticField readStaticField \u00b6 fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"Read static field"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-field/#readstaticfield","text":"fun readStaticField(fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"readStaticField"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-fields/","text":"shark-graph / shark / HeapObject / HeapClass / readStaticFields readStaticFields \u00b6 fun readStaticFields(): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . This may trigger IO reads.","title":"Read static fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-fields/#readstaticfields","text":"fun readStaticFields(): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . This may trigger IO reads.","title":"readStaticFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/simple-name/","text":"shark-graph / shark / HeapObject / HeapClass / simpleName simpleName \u00b6 val simpleName: String Returns name stripped of any string content before the last period (included).","title":"Simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/simple-name/#simplename","text":"val simpleName: String Returns name stripped of any string content before the last period (included).","title":"simpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclass-of/","text":"shark-graph / shark / HeapObject / HeapClass / subclassOf subclassOf \u00b6 infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass .","title":"Subclass of"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclass-of/#subclassof","text":"infix fun subclassOf(superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass .","title":"subclassOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclasses/","text":"shark-graph / shark / HeapObject / HeapClass / subclasses subclasses \u00b6 val subclasses: Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump.","title":"Subclasses"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclasses/#subclasses","text":"val subclasses: Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump.","title":"subclasses"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass-of/","text":"shark-graph / shark / HeapObject / HeapClass / superclassOf superclassOf \u00b6 infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass .","title":"Superclass of"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass-of/#superclassof","text":"infix fun superclassOf(subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass .","title":"superclassOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass/","text":"shark-graph / shark / HeapObject / HeapClass / superclass superclass \u00b6 val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"Superclass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass/#superclass","text":"val superclass: HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"superclass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/to-string/","text":"shark-graph / shark / HeapObject / HeapClass / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/","text":"shark-graph / shark / HeapObject / HeapInstance HeapInstance \u00b6 class HeapInstance : HeapObject An instance in the heap dump. Properties \u00b6 Name Summary byteSize val byteSize: Int graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceClass val instanceClass: HeapObject.HeapClass The class of this instance. instanceClassName val instanceClassName: String The name of the class of this instance, identical to Class.getName . instanceClassSimpleName val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included). isPrimitiveWrapper val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type. objectId val objectId: Long The heap identifier of this object. Inherited Properties \u00b6 Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions \u00b6 Name Summary get operator fun get(declaringClass: KClass <out Any >, fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? instanceOf infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass <*>): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class. readAsJavaString fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. readField fun readField(declaringClass: KClass <out Any >, fieldName: String ): HeapField ?``fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. readFields fun readFields(): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . readRecord fun readRecord(): InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#heapinstance","text":"class HeapInstance : HeapObject An instance in the heap dump.","title":"HeapInstance"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#properties","text":"Name Summary byteSize val byteSize: Int graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceClass val instanceClass: HeapObject.HeapClass The class of this instance. instanceClassName val instanceClassName: String The name of the class of this instance, identical to Class.getName . instanceClassSimpleName val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included). isPrimitiveWrapper val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type. objectId val objectId: Long The heap identifier of this object.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#functions","text":"Name Summary get operator fun get(declaringClass: KClass <out Any >, fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? instanceOf infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass <*>): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class. readAsJavaString fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. readField fun readField(declaringClass: KClass <out Any >, fieldName: String ): HeapField ?``fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. readFields fun readFields(): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . readRecord fun readRecord(): InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/byte-size/","text":"shark-graph / shark / HeapObject / HeapInstance / byteSize byteSize \u00b6 val byteSize: Int See Also HeapClass.instanceByteSize","title":"Byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/byte-size/#bytesize","text":"val byteSize: Int See Also HeapClass.instanceByteSize","title":"byteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/get/","text":"shark-graph / shark / HeapObject / HeapInstance / get get \u00b6 operator fun get(declaringClass: KClass <out Any >, fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? See Also readField","title":"Get"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/get/#get","text":"operator fun get(declaringClass: KClass <out Any >, fieldName: String ): HeapField ? operator fun get(declaringClassName: String , fieldName: String ): HeapField ? See Also readField","title":"get"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/graph/","text":"shark-graph / shark / HeapObject / HeapInstance / graph graph \u00b6 val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceClassName instanceClassName \u00b6 val instanceClassName: String The name of the class of this instance, identical to Class.getName .","title":"Instance class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name/#instanceclassname","text":"val instanceClassName: String The name of the class of this instance, identical to Class.getName .","title":"instanceClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceClassSimpleName instanceClassSimpleName \u00b6 val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included).","title":"Instance class simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name/#instanceclasssimplename","text":"val instanceClassSimpleName: String Returns instanceClassName stripped of any string content before the last period (included).","title":"instanceClassSimpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceClass instanceClass \u00b6 val instanceClass: HeapObject.HeapClass The class of this instance.","title":"Instance class"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class/#instanceclass","text":"val instanceClass: HeapObject.HeapClass The class of this instance.","title":"instanceClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-of/","text":"shark-graph / shark / HeapObject / HeapInstance / instanceOf instanceOf \u00b6 infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass <*>): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class.","title":"Instance of"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-of/#instanceof","text":"infix fun instanceOf(className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. infix fun instanceOf(expectedClass: KClass <*>): Boolean infix fun instanceOf(expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class.","title":"instanceOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper/","text":"shark-graph / shark / HeapObject / HeapInstance / isPrimitiveWrapper isPrimitiveWrapper \u00b6 val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type.","title":"Is primitive wrapper"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper/#isprimitivewrapper","text":"val isPrimitiveWrapper: Boolean Whether this is an instance of a primitive wrapper type.","title":"isPrimitiveWrapper"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-id/","text":"shark-graph / shark / HeapObject / HeapInstance / objectId objectId \u00b6 val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string/","text":"shark-graph / shark / HeapObject / HeapInstance / readAsJavaString readAsJavaString \u00b6 fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"Read as java string"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string/#readasjavastring","text":"fun readAsJavaString(): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"readAsJavaString"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-field/","text":"shark-graph / shark / HeapObject / HeapInstance / readField readField \u00b6 fun readField(declaringClass: KClass <out Any >, fieldName: String ): HeapField ? See Also readField fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"Read field"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-field/#readfield","text":"fun readField(declaringClass: KClass <out Any >, fieldName: String ): HeapField ? See Also readField fun readField(declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"readField"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-fields/","text":"shark-graph / shark / HeapObject / HeapInstance / readFields readFields \u00b6 fun readFields(): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . This may trigger IO reads.","title":"Read fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-fields/#readfields","text":"fun readFields(): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . This may trigger IO reads.","title":"readFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-record/","text":"shark-graph / shark / HeapObject / HeapInstance / readRecord readRecord \u00b6 fun readRecord(): InstanceDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying InstanceDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-record/#readrecord","text":"fun readRecord(): InstanceDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying InstanceDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/to-string/","text":"shark-graph / shark / HeapObject / HeapInstance / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/","text":"shark-graph / shark / HeapObject / HeapObjectArray HeapObjectArray \u00b6 class HeapObjectArray : HeapObject An object array in the heap dump. Properties \u00b6 Name Summary arrayClass val arrayClass: HeapObject.HeapClass The class of this array. arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . arrayClassSimpleName val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included). graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. isPrimitiveWrapperArray val isPrimitiveWrapperArray: Boolean objectId val objectId: Long The heap identifier of this object. Inherited Properties \u00b6 Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions \u00b6 Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readElements fun readElements(): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . readRecord fun readRecord(): ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#heapobjectarray","text":"class HeapObjectArray : HeapObject An object array in the heap dump.","title":"HeapObjectArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#properties","text":"Name Summary arrayClass val arrayClass: HeapObject.HeapClass The class of this array. arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . arrayClassSimpleName val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included). graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. isPrimitiveWrapperArray val isPrimitiveWrapperArray: Boolean objectId val objectId: Long The heap identifier of this object.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#functions","text":"Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readElements fun readElements(): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . readRecord fun readRecord(): ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name/","text":"shark-graph / shark / HeapObject / HeapObjectArray / arrayClassName arrayClassName \u00b6 val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"Array class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name/#arrayclassname","text":"val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"arrayClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name/","text":"shark-graph / shark / HeapObject / HeapObjectArray / arrayClassSimpleName arrayClassSimpleName \u00b6 val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included).","title":"Array class simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name/#arrayclasssimplename","text":"val arrayClassSimpleName: String Returns arrayClassName stripped of any string content before the last period (included).","title":"arrayClassSimpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class/","text":"shark-graph / shark / HeapObject / HeapObjectArray / arrayClass arrayClass \u00b6 val arrayClass: HeapObject.HeapClass The class of this array.","title":"Array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class/#arrayclass","text":"val arrayClass: HeapObject.HeapClass The class of this array.","title":"arrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/graph/","text":"shark-graph / shark / HeapObject / HeapObjectArray / graph graph \u00b6 val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/is-primitive-wrapper-array/","text":"shark-graph / shark / HeapObject / HeapObjectArray / isPrimitiveWrapperArray isPrimitiveWrapperArray \u00b6 val isPrimitiveWrapperArray: Boolean","title":"Is primitive wrapper array"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/is-primitive-wrapper-array/#isprimitivewrapperarray","text":"val isPrimitiveWrapperArray: Boolean","title":"isPrimitiveWrapperArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-id/","text":"shark-graph / shark / HeapObject / HeapObjectArray / objectId objectId \u00b6 val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size/","text":"shark-graph / shark / HeapObject / HeapObjectArray / readByteSize readByteSize \u00b6 fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"Read byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size/#readbytesize","text":"fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"readByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-elements/","text":"shark-graph / shark / HeapObject / HeapObjectArray / readElements readElements \u00b6 fun readElements(): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . This may trigger IO reads.","title":"Read elements"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-elements/#readelements","text":"fun readElements(): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . This may trigger IO reads.","title":"readElements"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-record/","text":"shark-graph / shark / HeapObject / HeapObjectArray / readRecord readRecord \u00b6 fun readRecord(): ObjectArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ObjectArrayDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-record/#readrecord","text":"fun readRecord(): ObjectArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying ObjectArrayDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/to-string/","text":"shark-graph / shark / HeapObject / HeapObjectArray / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray HeapPrimitiveArray \u00b6 class HeapPrimitiveArray : HeapObject A primitive array in the heap dump. Properties \u00b6 Name Summary arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId val objectId: Long The heap identifier of this object. primitiveType val primitiveType: PrimitiveType The PrimitiveType of elements in this array. Inherited Properties \u00b6 Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise Functions \u00b6 Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readRecord fun readRecord(): PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord . toString fun toString(): String","title":"Home"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#heapprimitivearray","text":"class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"HeapPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#properties","text":"Name Summary arrayClassName val arrayClassName: String The name of the class of this array, identical to Class.getName . graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId val objectId: Long The heap identifier of this object. primitiveType val primitiveType: PrimitiveType The PrimitiveType of elements in this array.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#inherited-properties","text":"Name Summary asClass val asClass: HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance val asInstance: HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray val asObjectArray: HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray val asPrimitiveArray: HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"Inherited Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#functions","text":"Name Summary readByteSize fun readByteSize(): Int The total byte shallow size of elements in this array. readRecord fun readRecord(): PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord . toString fun toString(): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / arrayClassName arrayClassName \u00b6 val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"Array class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name/#arrayclassname","text":"val arrayClassName: String The name of the class of this array, identical to Class.getName .","title":"arrayClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/graph/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / graph graph \u00b6 val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/graph/#graph","text":"val graph: HeapGraph Overrides HeapObject.graph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / objectId objectId \u00b6 val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id/#objectid","text":"val objectId: Long Overrides HeapObject.objectId The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / primitiveType primitiveType \u00b6 val primitiveType: PrimitiveType The PrimitiveType of elements in this array.","title":"Primitive type"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type/#primitivetype","text":"val primitiveType: PrimitiveType The PrimitiveType of elements in this array.","title":"primitiveType"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / readByteSize readByteSize \u00b6 fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"Read byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size/#readbytesize","text":"fun readByteSize(): Int The total byte shallow size of elements in this array.","title":"readByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / readRecord readRecord \u00b6 fun readRecord(): PrimitiveArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying PrimitiveArrayDumpRecord . This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record/#readrecord","text":"fun readRecord(): PrimitiveArrayDumpRecord Overrides HeapObject.readRecord Reads and returns the underlying PrimitiveArrayDumpRecord . This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string/","text":"shark-graph / shark / HeapObject / HeapPrimitiveArray / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-value/","text":"shark-graph / shark / HeapValue HeapValue \u00b6 class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type. Constructors \u00b6 Name Summary <init> HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type. Properties \u00b6 Name Summary asBoolean val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise. asByte val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise. asChar val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise. asDouble val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise. asFloat val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise. asInt val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise. asLong val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise. asNonNullObjectId val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise. asObject val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise. asObjectId val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise. asShort val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. holder val holder: ValueHolder Holds the actual value that this HeapValue represents. isNonNullReference val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise. isNullReference val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise. Functions \u00b6 Name Summary readAsJavaString fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null.","title":"Home"},{"location":"api/shark-graph/shark/-heap-value/#heapvalue","text":"class HeapValue Represents a value in the heap dump, which can be an object reference or a primitive type.","title":"HeapValue"},{"location":"api/shark-graph/shark/-heap-value/#constructors","text":"Name Summary <init> HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type.","title":"Constructors"},{"location":"api/shark-graph/shark/-heap-value/#properties","text":"Name Summary asBoolean val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise. asByte val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise. asChar val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise. asDouble val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise. asFloat val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise. asInt val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise. asLong val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise. asNonNullObjectId val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise. asObject val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise. asObjectId val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise. asShort val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise. graph val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap. holder val holder: ValueHolder Holds the actual value that this HeapValue represents. isNonNullReference val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise. isNullReference val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-value/#functions","text":"Name Summary readAsJavaString fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null.","title":"Functions"},{"location":"api/shark-graph/shark/-heap-value/-init-/","text":"shark-graph / shark / HeapValue / <init> <init> \u00b6 HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type.","title":" init "},{"location":"api/shark-graph/shark/-heap-value/-init-/#init","text":"HeapValue(graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type.","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-heap-value/as-boolean/","text":"shark-graph / shark / HeapValue / asBoolean asBoolean \u00b6 val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise.","title":"As boolean"},{"location":"api/shark-graph/shark/-heap-value/as-boolean/#asboolean","text":"val asBoolean: Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise.","title":"asBoolean"},{"location":"api/shark-graph/shark/-heap-value/as-byte/","text":"shark-graph / shark / HeapValue / asByte asByte \u00b6 val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise.","title":"As byte"},{"location":"api/shark-graph/shark/-heap-value/as-byte/#asbyte","text":"val asByte: Byte ? This HeapValue as a Byte if it represents one, or null otherwise.","title":"asByte"},{"location":"api/shark-graph/shark/-heap-value/as-char/","text":"shark-graph / shark / HeapValue / asChar asChar \u00b6 val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise.","title":"As char"},{"location":"api/shark-graph/shark/-heap-value/as-char/#aschar","text":"val asChar: Char ? This HeapValue as a Char if it represents one, or null otherwise.","title":"asChar"},{"location":"api/shark-graph/shark/-heap-value/as-double/","text":"shark-graph / shark / HeapValue / asDouble asDouble \u00b6 val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise.","title":"As double"},{"location":"api/shark-graph/shark/-heap-value/as-double/#asdouble","text":"val asDouble: Double ? This HeapValue as a Double if it represents one, or null otherwise.","title":"asDouble"},{"location":"api/shark-graph/shark/-heap-value/as-float/","text":"shark-graph / shark / HeapValue / asFloat asFloat \u00b6 val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise.","title":"As float"},{"location":"api/shark-graph/shark/-heap-value/as-float/#asfloat","text":"val asFloat: Float ? This HeapValue as a Float if it represents one, or null otherwise.","title":"asFloat"},{"location":"api/shark-graph/shark/-heap-value/as-int/","text":"shark-graph / shark / HeapValue / asInt asInt \u00b6 val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise.","title":"As int"},{"location":"api/shark-graph/shark/-heap-value/as-int/#asint","text":"val asInt: Int ? This HeapValue as an Int if it represents one, or null otherwise.","title":"asInt"},{"location":"api/shark-graph/shark/-heap-value/as-long/","text":"shark-graph / shark / HeapValue / asLong asLong \u00b6 val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise.","title":"As long"},{"location":"api/shark-graph/shark/-heap-value/as-long/#aslong","text":"val asLong: Long ? This HeapValue as a Long if it represents one, or null otherwise.","title":"asLong"},{"location":"api/shark-graph/shark/-heap-value/as-non-null-object-id/","text":"shark-graph / shark / HeapValue / asNonNullObjectId asNonNullObjectId \u00b6 val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise.","title":"As non null object id"},{"location":"api/shark-graph/shark/-heap-value/as-non-null-object-id/#asnonnullobjectid","text":"val asNonNullObjectId: Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise.","title":"asNonNullObjectId"},{"location":"api/shark-graph/shark/-heap-value/as-object-id/","text":"shark-graph / shark / HeapValue / asObjectId asObjectId \u00b6 val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise.","title":"As object id"},{"location":"api/shark-graph/shark/-heap-value/as-object-id/#asobjectid","text":"val asObjectId: Long ? This HeapValue as a Long if it represents an object reference, or null otherwise.","title":"asObjectId"},{"location":"api/shark-graph/shark/-heap-value/as-object/","text":"shark-graph / shark / HeapValue / asObject asObject \u00b6 val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise.","title":"As object"},{"location":"api/shark-graph/shark/-heap-value/as-object/#asobject","text":"val asObject: HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise.","title":"asObject"},{"location":"api/shark-graph/shark/-heap-value/as-short/","text":"shark-graph / shark / HeapValue / asShort asShort \u00b6 val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise.","title":"As short"},{"location":"api/shark-graph/shark/-heap-value/as-short/#asshort","text":"val asShort: Short ? This HeapValue as a Short if it represents one, or null otherwise.","title":"asShort"},{"location":"api/shark-graph/shark/-heap-value/graph/","text":"shark-graph / shark / HeapValue / graph graph \u00b6 val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-value/graph/#graph","text":"val graph: HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-value/holder/","text":"shark-graph / shark / HeapValue / holder holder \u00b6 val holder: ValueHolder Holds the actual value that this HeapValue represents.","title":"Holder"},{"location":"api/shark-graph/shark/-heap-value/holder/#holder","text":"val holder: ValueHolder Holds the actual value that this HeapValue represents.","title":"holder"},{"location":"api/shark-graph/shark/-heap-value/is-non-null-reference/","text":"shark-graph / shark / HeapValue / isNonNullReference isNonNullReference \u00b6 val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise.","title":"Is non null reference"},{"location":"api/shark-graph/shark/-heap-value/is-non-null-reference/#isnonnullreference","text":"val isNonNullReference: Boolean True is this HeapValue represents a non null object reference, false otherwise.","title":"isNonNullReference"},{"location":"api/shark-graph/shark/-heap-value/is-null-reference/","text":"shark-graph / shark / HeapValue / isNullReference isNullReference \u00b6 val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"Is null reference"},{"location":"api/shark-graph/shark/-heap-value/is-null-reference/#isnullreference","text":"val isNullReference: Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"isNullReference"},{"location":"api/shark-graph/shark/-heap-value/read-as-java-string/","text":"shark-graph / shark / HeapValue / readAsJavaString readAsJavaString \u00b6 fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"Read as java string"},{"location":"api/shark-graph/shark/-heap-value/read-as-java-string/#readasjavastring","text":"fun readAsJavaString(): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"readAsJavaString"},{"location":"api/shark-graph/shark/-hprof-heap-graph/","text":"shark-graph / shark / HprofHeapGraph HprofHeapGraph \u00b6 class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof . Properties \u00b6 Name Summary classes val classes: Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots val gcRoots: List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize val identifierByteSize: Int instances val instances: Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objects val objects: Sequence < HeapObject > Sequence of all objects in the heap dump. Functions \u00b6 Name Summary findClassByName fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump. Companion Object Functions \u00b6 Name Summary indexHprof fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null): HeapGraph","title":"Home"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#hprofheapgraph","text":"class HprofHeapGraph : HeapGraph A HeapGraph that reads from an indexed Hprof . Create a new instance with indexHprof .","title":"HprofHeapGraph"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#properties","text":"Name Summary classes val classes: Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context val context: GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots val gcRoots: List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize val identifierByteSize: Int instances val instances: Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objects val objects: Sequence < HeapObject > Sequence of all objects in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#functions","text":"Name Summary findClassByName fun findClassByName(className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById fun findObjectById(objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. objectExists fun objectExists(objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Functions"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#companion-object-functions","text":"Name Summary indexHprof fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null): HeapGraph","title":"Companion Object Functions"},{"location":"api/shark-graph/shark/-hprof-heap-graph/classes/","text":"shark-graph / shark / HprofHeapGraph / classes classes \u00b6 val classes: Sequence < HeapObject.HeapClass > Overrides HeapGraph.classes Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"Classes"},{"location":"api/shark-graph/shark/-hprof-heap-graph/classes/#classes","text":"val classes: Sequence < HeapObject.HeapClass > Overrides HeapGraph.classes Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"classes"},{"location":"api/shark-graph/shark/-hprof-heap-graph/context/","text":"shark-graph / shark / HprofHeapGraph / context context \u00b6 val context: GraphContext Overrides HeapGraph.context In memory store that can be used to store objects this HeapGraph instance.","title":"Context"},{"location":"api/shark-graph/shark/-hprof-heap-graph/context/#context","text":"val context: GraphContext Overrides HeapGraph.context In memory store that can be used to store objects this HeapGraph instance.","title":"context"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-class-by-name/","text":"shark-graph / shark / HprofHeapGraph / findClassByName findClassByName \u00b6 fun findClassByName(className: String ): HeapObject.HeapClass ? Overrides HeapGraph.findClassByName Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"Find class by name"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-class-by-name/#findclassbyname","text":"fun findClassByName(className: String ): HeapObject.HeapClass ? Overrides HeapGraph.findClassByName Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"findClassByName"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id-or-null/","text":"shark-graph / shark / HprofHeapGraph / findObjectByIdOrNull findObjectByIdOrNull \u00b6 fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Overrides HeapGraph.findObjectByIdOrNull Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"Find object by id or null"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id-or-null/#findobjectbyidornull","text":"fun findObjectByIdOrNull(objectId: Long ): HeapObject ? Overrides HeapGraph.findObjectByIdOrNull Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"findObjectByIdOrNull"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id/","text":"shark-graph / shark / HprofHeapGraph / findObjectById findObjectById \u00b6 fun findObjectById(objectId: Long ): HeapObject Overrides HeapGraph.findObjectById Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"Find object by id"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id/#findobjectbyid","text":"fun findObjectById(objectId: Long ): HeapObject Overrides HeapGraph.findObjectById Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"findObjectById"},{"location":"api/shark-graph/shark/-hprof-heap-graph/gc-roots/","text":"shark-graph / shark / HprofHeapGraph / gcRoots gcRoots \u00b6 val gcRoots: List <GcRoot> Overrides HeapGraph.gcRoots All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"Gc roots"},{"location":"api/shark-graph/shark/-hprof-heap-graph/gc-roots/#gcroots","text":"val gcRoots: List <GcRoot> Overrides HeapGraph.gcRoots All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id , however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"gcRoots"},{"location":"api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size/","text":"shark-graph / shark / HprofHeapGraph / identifierByteSize identifierByteSize \u00b6 val identifierByteSize: Int Overrides HeapGraph.identifierByteSize","title":"Identifier byte size"},{"location":"api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size/#identifierbytesize","text":"val identifierByteSize: Int Overrides HeapGraph.identifierByteSize","title":"identifierByteSize"},{"location":"api/shark-graph/shark/-hprof-heap-graph/index-hprof/","text":"shark-graph / shark / HprofHeapGraph / indexHprof indexHprof \u00b6 fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null): HeapGraph","title":"Index hprof"},{"location":"api/shark-graph/shark/-hprof-heap-graph/index-hprof/#indexhprof","text":"fun indexHprof(hprof: Hprof, proguardMapping: ProguardMapping ? = null): HeapGraph","title":"indexHprof"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instances/","text":"shark-graph / shark / HprofHeapGraph / instances instances \u00b6 val instances: Sequence < HeapObject.HeapInstance > Overrides HeapGraph.instances Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"Instances"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instances/#instances","text":"val instances: Sequence < HeapObject.HeapInstance > Overrides HeapGraph.instances Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"instances"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-exists/","text":"shark-graph / shark / HprofHeapGraph / objectExists objectExists \u00b6 fun objectExists(objectId: Long ): Boolean Overrides HeapGraph.objectExists Returns true if the provided objectId exists in the heap dump.","title":"Object exists"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-exists/#objectexists","text":"fun objectExists(objectId: Long ): Boolean Overrides HeapGraph.objectExists Returns true if the provided objectId exists in the heap dump.","title":"objectExists"},{"location":"api/shark-graph/shark/-hprof-heap-graph/objects/","text":"shark-graph / shark / HprofHeapGraph / objects objects \u00b6 val objects: Sequence < HeapObject > Overrides HeapGraph.objects Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"Objects"},{"location":"api/shark-graph/shark/-hprof-heap-graph/objects/#objects","text":"val objects: Sequence < HeapObject > Overrides HeapGraph.objects Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"objects"},{"location":"api/shark-graph/shark/-proguard-mapping/","text":"shark-graph / shark / ProguardMapping ProguardMapping \u00b6 class ProguardMapping Constructors \u00b6 Name Summary <init> ProguardMapping() Functions \u00b6 Name Summary addMapping fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map. deobfuscateClassName fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name. deobfuscateFieldName fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Home"},{"location":"api/shark-graph/shark/-proguard-mapping/#proguardmapping","text":"class ProguardMapping","title":"ProguardMapping"},{"location":"api/shark-graph/shark/-proguard-mapping/#constructors","text":"Name Summary <init> ProguardMapping()","title":"Constructors"},{"location":"api/shark-graph/shark/-proguard-mapping/#functions","text":"Name Summary addMapping fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map. deobfuscateClassName fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name. deobfuscateFieldName fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Functions"},{"location":"api/shark-graph/shark/-proguard-mapping/-init-/","text":"shark-graph / shark / ProguardMapping / <init> <init> \u00b6 ProguardMapping()","title":" init "},{"location":"api/shark-graph/shark/-proguard-mapping/-init-/#init","text":"ProguardMapping()","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-proguard-mapping/add-mapping/","text":"shark-graph / shark / ProguardMapping / addMapping addMapping \u00b6 fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map.","title":"Add mapping"},{"location":"api/shark-graph/shark/-proguard-mapping/add-mapping/#addmapping","text":"fun addMapping(obfuscatedName: String , clearName: String ): Unit Adds entry to the obfuscatedToClearNamesMap map.","title":"addMapping"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-class-name/","text":"shark-graph / shark / ProguardMapping / deobfuscateClassName deobfuscateClassName \u00b6 fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name.","title":"Deobfuscate class name"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-class-name/#deobfuscateclassname","text":"fun deobfuscateClassName(obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name.","title":"deobfuscateClassName"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-field-name/","text":"shark-graph / shark / ProguardMapping / deobfuscateFieldName deobfuscateFieldName \u00b6 fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Deobfuscate field name"},{"location":"api/shark-graph/shark/-proguard-mapping/deobfuscate-field-name/#deobfuscatefieldname","text":"fun deobfuscateFieldName(obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"deobfuscateFieldName"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/","text":"shark-graph / shark / ProguardMappingReader ProguardMappingReader \u00b6 class ProguardMappingReader Constructors \u00b6 Name Summary <init> ProguardMappingReader(proguardMappingInputStream: InputStream ) Functions \u00b6 Name Summary readProguardMapping fun readProguardMapping(): ProguardMapping","title":"Home"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/#proguardmappingreader","text":"class ProguardMappingReader","title":"ProguardMappingReader"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/#constructors","text":"Name Summary <init> ProguardMappingReader(proguardMappingInputStream: InputStream )","title":"Constructors"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/#functions","text":"Name Summary readProguardMapping fun readProguardMapping(): ProguardMapping","title":"Functions"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/-init-/","text":"shark-graph / shark / ProguardMappingReader / <init> <init> \u00b6 ProguardMappingReader(proguardMappingInputStream: InputStream )","title":" init "},{"location":"api/shark-graph/shark/-proguard-mapping-reader/-init-/#init","text":"ProguardMappingReader(proguardMappingInputStream: InputStream )","title":"&lt;init&gt;"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/read-proguard-mapping/","text":"shark-graph / shark / ProguardMappingReader / readProguardMapping readProguardMapping \u00b6 fun readProguardMapping(): ProguardMapping","title":"Read proguard mapping"},{"location":"api/shark-graph/shark/-proguard-mapping-reader/read-proguard-mapping/#readproguardmapping","text":"fun readProguardMapping(): ProguardMapping","title":"readProguardMapping"},{"location":"api/shark-hprof/","text":"shark-hprof Packages \u00b6 Name Summary shark Index \u00b6 All Types","title":"Home"},{"location":"api/shark-hprof/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-hprof/#index","text":"All Types","title":"Index"},{"location":"api/shark-hprof/alltypes/","text":"All Types \u00b6 Name Summary shark.GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. shark.Hprof An opened Hprof file which can be read via reader . Open a new hprof with open , and don\u2019t forget to call close once done. shark.HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. shark.HprofReader Reads hprof content from an Okio BufferedSource . shark.HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. shark.HprofWriter Generates Hprof files. shark.OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . shark.PrimitiveType A primitive type in the prof. shark.ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Home"},{"location":"api/shark-hprof/alltypes/#all-types","text":"Name Summary shark.GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. shark.Hprof An opened Hprof file which can be read via reader . Open a new hprof with open , and don\u2019t forget to call close once done. shark.HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. shark.HprofReader Reads hprof content from an Okio BufferedSource . shark.HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. shark.HprofWriter Generates Hprof files. shark.OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . shark.PrimitiveType A primitive type in the prof. shark.ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"All Types"},{"location":"api/shark-hprof/shark/","text":"shark-hprof / shark Package shark \u00b6 Types \u00b6 Name Summary GcRoot sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. Hprof class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don\u2019t forget to call close once done. HprofPrimitiveArrayStripper class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. HprofReader class HprofReader Reads hprof content from an Okio BufferedSource . HprofRecord sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. HprofWriter class HprofWriter : Closeable Generates Hprof files. OnHprofRecordListener interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . PrimitiveType enum class PrimitiveType A primitive type in the prof. ValueHolder sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Core: Hprof"},{"location":"api/shark-hprof/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-hprof/shark/#types","text":"Name Summary GcRoot sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. Hprof class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don\u2019t forget to call close once done. HprofPrimitiveArrayStripper class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. HprofReader class HprofReader Reads hprof content from an Okio BufferedSource . HprofRecord sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. HprofWriter class HprofWriter : Closeable Generates Hprof files. OnHprofRecordListener interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . PrimitiveType enum class PrimitiveType A primitive type in the prof. ValueHolder sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Types"},{"location":"api/shark-hprof/shark/-gc-root/","text":"shark-hprof / shark / GcRoot GcRoot \u00b6 sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. Types \u00b6 Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It\u2019s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It\u2019s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It\u2019s unclear what this is, documentation welcome. Properties \u00b6 Name Summary id abstract val id: Long The object id of the object that this gc root references. Inheritors \u00b6 Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It\u2019s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It\u2019s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/#gcroot","text":"sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump.","title":"GcRoot"},{"location":"api/shark-hprof/shark/-gc-root/#types","text":"Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It\u2019s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It\u2019s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"Types"},{"location":"api/shark-hprof/shark/-gc-root/#properties","text":"Name Summary id abstract val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/#inheritors","text":"Name Summary Debugger class Debugger : GcRoot An object held by a connected debugger Finalizing class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString class InternedString : GcRoot An interned string, see java.lang.String.intern . JavaFrame class JavaFrame : GcRoot A java local variable JniGlobal class JniGlobal : GcRoot A global variable in native code. JniLocal class JniLocal : GcRoot A local variable in native code. JniMonitor class JniMonitor : GcRoot It\u2019s unclear what this is, documentation welcome. MonitorUsed class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack class NativeStack : GcRoot Input or output parameters in native code ReferenceCleanup class ReferenceCleanup : GcRoot It\u2019s unclear what this is, documentation welcome. StickyClass class StickyClass : GcRoot A system class ThreadBlock class ThreadBlock : GcRoot ThreadObject class ThreadObject : GcRoot A thread. Unknown class Unknown : GcRoot An unknown gc root. Unreachable class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal class VmInternal : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"Inheritors"},{"location":"api/shark-hprof/shark/-gc-root/id/","text":"shark-hprof / shark / GcRoot / id id \u00b6 abstract val id: Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/id/#id","text":"abstract val id: Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/","text":"shark-hprof / shark / GcRoot / Debugger Debugger \u00b6 class Debugger : GcRoot An object held by a connected debugger Constructors \u00b6 Name Summary <init> Debugger(id: Long ) An object held by a connected debugger Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#debugger","text":"class Debugger : GcRoot An object held by a connected debugger","title":"Debugger"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#constructors","text":"Name Summary <init> Debugger(id: Long ) An object held by a connected debugger","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/-init-/","text":"shark-hprof / shark / GcRoot / Debugger / <init> <init> \u00b6 Debugger(id: Long ) An object held by a connected debugger","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-debugger/-init-/#init","text":"Debugger(id: Long ) An object held by a connected debugger","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/id/","text":"shark-hprof / shark / GcRoot / Debugger / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/","text":"shark-hprof / shark / GcRoot / Finalizing Finalizing \u00b6 class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run. Constructors \u00b6 Name Summary <init> Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#finalizing","text":"class Finalizing : GcRoot An object that is in a queue, waiting for a finalizer to run.","title":"Finalizing"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#constructors","text":"Name Summary <init> Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/-init-/","text":"shark-hprof / shark / GcRoot / Finalizing / <init> <init> \u00b6 Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/-init-/#init","text":"Finalizing(id: Long ) An object that is in a queue, waiting for a finalizer to run.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/id/","text":"shark-hprof / shark / GcRoot / Finalizing / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/","text":"shark-hprof / shark / GcRoot / InternedString InternedString \u00b6 class InternedString : GcRoot An interned string, see java.lang.String.intern . Constructors \u00b6 Name Summary <init> InternedString(id: Long ) An interned string, see java.lang.String.intern . Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#internedstring","text":"class InternedString : GcRoot An interned string, see java.lang.String.intern .","title":"InternedString"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#constructors","text":"Name Summary <init> InternedString(id: Long ) An interned string, see java.lang.String.intern .","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/-init-/","text":"shark-hprof / shark / GcRoot / InternedString / <init> <init> \u00b6 InternedString(id: Long ) An interned string, see java.lang.String.intern .","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/-init-/#init","text":"InternedString(id: Long ) An interned string, see java.lang.String.intern .","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/id/","text":"shark-hprof / shark / GcRoot / InternedString / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/","text":"shark-hprof / shark / GcRoot / JavaFrame JavaFrame \u00b6 class JavaFrame : GcRoot A java local variable Constructors \u00b6 Name Summary <init> JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable Properties \u00b6 Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#javaframe","text":"class JavaFrame : GcRoot A java local variable","title":"JavaFrame"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#constructors","text":"Name Summary <init> JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#properties","text":"Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/-init-/","text":"shark-hprof / shark / GcRoot / JavaFrame / <init> <init> \u00b6 JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/-init-/#init","text":"JavaFrame(id: Long , threadSerialNumber: Int , frameNumber: Int ) A java local variable","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/frame-number/","text":"shark-hprof / shark / GcRoot / JavaFrame / frameNumber frameNumber \u00b6 val frameNumber: Int frame number in stack trace (-1 for empty)","title":"Frame number"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/frame-number/#framenumber","text":"val frameNumber: Int frame number in stack trace (-1 for empty)","title":"frameNumber"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/id/","text":"shark-hprof / shark / GcRoot / JavaFrame / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number/","text":"shark-hprof / shark / GcRoot / JavaFrame / threadSerialNumber threadSerialNumber \u00b6 val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/","text":"shark-hprof / shark / GcRoot / JniGlobal JniGlobal \u00b6 class JniGlobal : GcRoot A global variable in native code. Constructors \u00b6 Name Summary <init> JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references. jniGlobalRefId val jniGlobalRefId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#jniglobal","text":"class JniGlobal : GcRoot A global variable in native code.","title":"JniGlobal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#constructors","text":"Name Summary <init> JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. jniGlobalRefId val jniGlobalRefId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/-init-/","text":"shark-hprof / shark / GcRoot / JniGlobal / <init> <init> \u00b6 JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/-init-/#init","text":"JniGlobal(id: Long , jniGlobalRefId: Long ) A global variable in native code.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/id/","text":"shark-hprof / shark / GcRoot / JniGlobal / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id/","text":"shark-hprof / shark / GcRoot / JniGlobal / jniGlobalRefId jniGlobalRefId \u00b6 val jniGlobalRefId: Long","title":"Jni global ref id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id/#jniglobalrefid","text":"val jniGlobalRefId: Long","title":"jniGlobalRefId"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/","text":"shark-hprof / shark / GcRoot / JniLocal JniLocal \u00b6 class JniLocal : GcRoot A local variable in native code. Constructors \u00b6 Name Summary <init> JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code. Properties \u00b6 Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#jnilocal","text":"class JniLocal : GcRoot A local variable in native code.","title":"JniLocal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#constructors","text":"Name Summary <init> JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#properties","text":"Name Summary frameNumber val frameNumber: Int frame number in stack trace (-1 for empty) id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/-init-/","text":"shark-hprof / shark / GcRoot / JniLocal / <init> <init> \u00b6 JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/-init-/#init","text":"JniLocal(id: Long , threadSerialNumber: Int , frameNumber: Int ) A local variable in native code.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/frame-number/","text":"shark-hprof / shark / GcRoot / JniLocal / frameNumber frameNumber \u00b6 val frameNumber: Int frame number in stack trace (-1 for empty)","title":"Frame number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/frame-number/#framenumber","text":"val frameNumber: Int frame number in stack trace (-1 for empty)","title":"frameNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/id/","text":"shark-hprof / shark / GcRoot / JniLocal / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number/","text":"shark-hprof / shark / GcRoot / JniLocal / threadSerialNumber threadSerialNumber \u00b6 val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/","text":"shark-hprof / shark / GcRoot / JniMonitor JniMonitor \u00b6 class JniMonitor : GcRoot It\u2019s unclear what this is, documentation welcome. Constructors \u00b6 Name Summary <init> JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It\u2019s unclear what this is, documentation welcome. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references. stackDepth val stackDepth: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#jnimonitor","text":"class JniMonitor : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"JniMonitor"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#constructors","text":"Name Summary <init> JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It\u2019s unclear what this is, documentation welcome.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. stackDepth val stackDepth: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/-init-/","text":"shark-hprof / shark / GcRoot / JniMonitor / <init> <init> \u00b6 JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It\u2019s unclear what this is, documentation welcome.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/-init-/#init","text":"JniMonitor(id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) It\u2019s unclear what this is, documentation welcome.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/id/","text":"shark-hprof / shark / GcRoot / JniMonitor / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth/","text":"shark-hprof / shark / GcRoot / JniMonitor / stackDepth stackDepth \u00b6 val stackDepth: Int","title":"Stack depth"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth/#stackdepth","text":"val stackDepth: Int","title":"stackDepth"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number/","text":"shark-hprof / shark / GcRoot / JniMonitor / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/","text":"shark-hprof / shark / GcRoot / MonitorUsed MonitorUsed \u00b6 class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. Constructors \u00b6 Name Summary <init> MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#monitorused","text":"class MonitorUsed : GcRoot Everything that called the wait() or notify() methods, or that is synchronized.","title":"MonitorUsed"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#constructors","text":"Name Summary <init> MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/-init-/","text":"shark-hprof / shark / GcRoot / MonitorUsed / <init> <init> \u00b6 MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/-init-/#init","text":"MonitorUsed(id: Long ) Everything that called the wait() or notify() methods, or that is synchronized.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/id/","text":"shark-hprof / shark / GcRoot / MonitorUsed / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/","text":"shark-hprof / shark / GcRoot / NativeStack NativeStack \u00b6 class NativeStack : GcRoot Input or output parameters in native code Constructors \u00b6 Name Summary <init> NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#nativestack","text":"class NativeStack : GcRoot Input or output parameters in native code","title":"NativeStack"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#constructors","text":"Name Summary <init> NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/-init-/","text":"shark-hprof / shark / GcRoot / NativeStack / <init> <init> \u00b6 NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/-init-/#init","text":"NativeStack(id: Long , threadSerialNumber: Int ) Input or output parameters in native code","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/id/","text":"shark-hprof / shark / GcRoot / NativeStack / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number/","text":"shark-hprof / shark / GcRoot / NativeStack / threadSerialNumber threadSerialNumber \u00b6 val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/","text":"shark-hprof / shark / GcRoot / ReferenceCleanup ReferenceCleanup \u00b6 class ReferenceCleanup : GcRoot It\u2019s unclear what this is, documentation welcome. Constructors \u00b6 Name Summary <init> ReferenceCleanup(id: Long ) It\u2019s unclear what this is, documentation welcome. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#referencecleanup","text":"class ReferenceCleanup : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"ReferenceCleanup"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#constructors","text":"Name Summary <init> ReferenceCleanup(id: Long ) It\u2019s unclear what this is, documentation welcome.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/-init-/","text":"shark-hprof / shark / GcRoot / ReferenceCleanup / <init> <init> \u00b6 ReferenceCleanup(id: Long ) It\u2019s unclear what this is, documentation welcome.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/-init-/#init","text":"ReferenceCleanup(id: Long ) It\u2019s unclear what this is, documentation welcome.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/id/","text":"shark-hprof / shark / GcRoot / ReferenceCleanup / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/","text":"shark-hprof / shark / GcRoot / StickyClass StickyClass \u00b6 class StickyClass : GcRoot A system class Constructors \u00b6 Name Summary <init> StickyClass(id: Long ) A system class Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#stickyclass","text":"class StickyClass : GcRoot A system class","title":"StickyClass"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#constructors","text":"Name Summary <init> StickyClass(id: Long ) A system class","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/-init-/","text":"shark-hprof / shark / GcRoot / StickyClass / <init> <init> \u00b6 StickyClass(id: Long ) A system class","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/-init-/#init","text":"StickyClass(id: Long ) A system class","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/id/","text":"shark-hprof / shark / GcRoot / StickyClass / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/","text":"shark-hprof / shark / GcRoot / ThreadBlock ThreadBlock \u00b6 class ThreadBlock : GcRoot Constructors \u00b6 Name Summary <init> ThreadBlock(id: Long , threadSerialNumber: Int ) Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#threadblock","text":"class ThreadBlock : GcRoot","title":"ThreadBlock"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#constructors","text":"Name Summary <init> ThreadBlock(id: Long , threadSerialNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. threadSerialNumber val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/-init-/","text":"shark-hprof / shark / GcRoot / ThreadBlock / <init> <init> \u00b6 ThreadBlock(id: Long , threadSerialNumber: Int )","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/-init-/#init","text":"ThreadBlock(id: Long , threadSerialNumber: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/id/","text":"shark-hprof / shark / GcRoot / ThreadBlock / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number/","text":"shark-hprof / shark / GcRoot / ThreadBlock / threadSerialNumber threadSerialNumber \u00b6 val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/","text":"shark-hprof / shark / GcRoot / ThreadObject ThreadObject \u00b6 class ThreadObject : GcRoot A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c Constructors \u00b6 Name Summary <init> ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references. stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#threadobject","text":"class ThreadObject : GcRoot A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c","title":"ThreadObject"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#constructors","text":"Name Summary <init> ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references. stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/-init-/","text":"shark-hprof / shark / GcRoot / ThreadObject / <init> <init> \u00b6 ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/-init-/#init","text":"ThreadObject(id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/id/","text":"shark-hprof / shark / GcRoot / ThreadObject / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number/","text":"shark-hprof / shark / GcRoot / ThreadObject / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number/","text":"shark-hprof / shark / GcRoot / ThreadObject / threadSerialNumber threadSerialNumber \u00b6 val threadSerialNumber: Int","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/","text":"shark-hprof / shark / GcRoot / Unknown Unknown \u00b6 class Unknown : GcRoot An unknown gc root. Constructors \u00b6 Name Summary <init> Unknown(id: Long ) An unknown gc root. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#unknown","text":"class Unknown : GcRoot An unknown gc root.","title":"Unknown"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#constructors","text":"Name Summary <init> Unknown(id: Long ) An unknown gc root.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/-init-/","text":"shark-hprof / shark / GcRoot / Unknown / <init> <init> \u00b6 Unknown(id: Long ) An unknown gc root.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-unknown/-init-/#init","text":"Unknown(id: Long ) An unknown gc root.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/id/","text":"shark-hprof / shark / GcRoot / Unknown / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/","text":"shark-hprof / shark / GcRoot / Unreachable Unreachable \u00b6 class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself. Constructors \u00b6 Name Summary <init> Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#unreachable","text":"class Unreachable : GcRoot An object that is unreachable from any other root, but not a root itself.","title":"Unreachable"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#constructors","text":"Name Summary <init> Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/-init-/","text":"shark-hprof / shark / GcRoot / Unreachable / <init> <init> \u00b6 Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/-init-/#init","text":"Unreachable(id: Long ) An object that is unreachable from any other root, but not a root itself.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/id/","text":"shark-hprof / shark / GcRoot / Unreachable / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/","text":"shark-hprof / shark / GcRoot / VmInternal VmInternal \u00b6 class VmInternal : GcRoot It\u2019s unclear what this is, documentation welcome. Constructors \u00b6 Name Summary <init> VmInternal(id: Long ) It\u2019s unclear what this is, documentation welcome. Properties \u00b6 Name Summary id val id: Long The object id of the object that this gc root references.","title":"Home"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#vminternal","text":"class VmInternal : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"VmInternal"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#constructors","text":"Name Summary <init> VmInternal(id: Long ) It\u2019s unclear what this is, documentation welcome.","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#properties","text":"Name Summary id val id: Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/-init-/","text":"shark-hprof / shark / GcRoot / VmInternal / <init> <init> \u00b6 VmInternal(id: Long ) It\u2019s unclear what this is, documentation welcome.","title":" init "},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/-init-/#init","text":"VmInternal(id: Long ) It\u2019s unclear what this is, documentation welcome.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/id/","text":"shark-hprof / shark / GcRoot / VmInternal / id id \u00b6 val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/id/#id","text":"val id: Long Overrides GcRoot.id The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-hprof/","text":"shark-hprof / shark / Hprof Hprof \u00b6 class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don\u2019t forget to call close once done. Types \u00b6 Name Summary HprofVersion enum class HprofVersion Supported hprof versions Properties \u00b6 Name Summary fileLength val fileLength: Long Length of the hprof file, in bytes. heapDumpTimestamp val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped. hprofVersion val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped. reader val reader: HprofReader Functions \u00b6 Name Summary close fun close(): Unit moveReaderTo fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position . Companion Object Functions \u00b6 Name Summary open fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don\u2019t forget to call close once done.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof/#hprof","text":"class Hprof : Closeable An opened Hprof file which can be read via reader . Open a new hprof with open , and don\u2019t forget to call close once done.","title":"Hprof"},{"location":"api/shark-hprof/shark/-hprof/#types","text":"Name Summary HprofVersion enum class HprofVersion Supported hprof versions","title":"Types"},{"location":"api/shark-hprof/shark/-hprof/#properties","text":"Name Summary fileLength val fileLength: Long Length of the hprof file, in bytes. heapDumpTimestamp val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped. hprofVersion val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped. reader val reader: HprofReader","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof/#functions","text":"Name Summary close fun close(): Unit moveReaderTo fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position .","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof/#companion-object-functions","text":"Name Summary open fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don\u2019t forget to call close once done.","title":"Companion Object Functions"},{"location":"api/shark-hprof/shark/-hprof/close/","text":"shark-hprof / shark / Hprof / close close \u00b6 fun close(): Unit","title":"Close"},{"location":"api/shark-hprof/shark/-hprof/close/#close","text":"fun close(): Unit","title":"close"},{"location":"api/shark-hprof/shark/-hprof/file-length/","text":"shark-hprof / shark / Hprof / fileLength fileLength \u00b6 val fileLength: Long Length of the hprof file, in bytes.","title":"File length"},{"location":"api/shark-hprof/shark/-hprof/file-length/#filelength","text":"val fileLength: Long Length of the hprof file, in bytes.","title":"fileLength"},{"location":"api/shark-hprof/shark/-hprof/heap-dump-timestamp/","text":"shark-hprof / shark / Hprof / heapDumpTimestamp heapDumpTimestamp \u00b6 val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped.","title":"Heap dump timestamp"},{"location":"api/shark-hprof/shark/-hprof/heap-dump-timestamp/#heapdumptimestamp","text":"val heapDumpTimestamp: Long Unix timestamp at which the heap was dumped.","title":"heapDumpTimestamp"},{"location":"api/shark-hprof/shark/-hprof/hprof-version/","text":"shark-hprof / shark / Hprof / hprofVersion hprofVersion \u00b6 val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped.","title":"Hprof version"},{"location":"api/shark-hprof/shark/-hprof/hprof-version/#hprofversion","text":"val hprofVersion: Hprof.HprofVersion Version of the opened hprof, which is tied to the runtime where the heap was dumped.","title":"hprofVersion"},{"location":"api/shark-hprof/shark/-hprof/move-reader-to/","text":"shark-hprof / shark / Hprof / moveReaderTo moveReaderTo \u00b6 fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position .","title":"Move reader to"},{"location":"api/shark-hprof/shark/-hprof/move-reader-to/#movereaderto","text":"fun moveReaderTo(newPosition: Long ): Unit Moves reader to a new position in the hprof file. This is transparent to the reader, and will not reset HprofReader.position .","title":"moveReaderTo"},{"location":"api/shark-hprof/shark/-hprof/open/","text":"shark-hprof / shark / Hprof / open open \u00b6 fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don\u2019t forget to call close once done.","title":"Open"},{"location":"api/shark-hprof/shark/-hprof/open/#open","text":"fun open(hprofFile: File ): Hprof Reads the headers of the provided hprofFile and returns an opened Hprof . Don\u2019t forget to call close once done.","title":"open"},{"location":"api/shark-hprof/shark/-hprof/reader/","text":"shark-hprof / shark / Hprof / reader reader \u00b6 val reader: HprofReader","title":"Reader"},{"location":"api/shark-hprof/shark/-hprof/reader/#reader","text":"val reader: HprofReader","title":"reader"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/","text":"shark-hprof / shark / Hprof / HprofVersion HprofVersion \u00b6 enum class HprofVersion Supported hprof versions Enum Values \u00b6 Name Summary JDK1_2_BETA3 JDK1_2_BETA4 JDK_6 ANDROID Properties \u00b6 Name Summary versionString val versionString: String","title":"Home"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/#hprofversion","text":"enum class HprofVersion Supported hprof versions","title":"HprofVersion"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/#enum-values","text":"Name Summary JDK1_2_BETA3 JDK1_2_BETA4 JDK_6 ANDROID","title":"Enum Values"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/#properties","text":"Name Summary versionString val versionString: String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d/","text":"shark-hprof / shark / Hprof / HprofVersion / ANDROID ANDROID \u00b6 ANDROID Inherited Properties \u00b6 Name Summary versionString val versionString: String","title":" a n d r o i d"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d/#android","text":"ANDROID","title":"ANDROID"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-a-n-d-r-o-i-d/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3/","text":"shark-hprof / shark / Hprof / HprofVersion / JDK1_2_BETA3 JDK1_2_BETA3 \u00b6 JDK1_2_BETA3 Inherited Properties \u00b6 Name Summary versionString val versionString: String","title":" j d k1 2  b e t a3"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3/#jdk1_2_beta3","text":"JDK1_2_BETA3","title":"JDK1_2_BETA3"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a3/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4/","text":"shark-hprof / shark / Hprof / HprofVersion / JDK1_2_BETA4 JDK1_2_BETA4 \u00b6 JDK1_2_BETA4 Inherited Properties \u00b6 Name Summary versionString val versionString: String","title":" j d k1 2  b e t a4"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4/#jdk1_2_beta4","text":"JDK1_2_BETA4","title":"JDK1_2_BETA4"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k1_2_-b-e-t-a4/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6/","text":"shark-hprof / shark / Hprof / HprofVersion / JDK_6 JDK_6 \u00b6 JDK_6 Inherited Properties \u00b6 Name Summary versionString val versionString: String","title":" j d k 6"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6/#jdk_6","text":"JDK_6","title":"JDK_6"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/-j-d-k_6/#inherited-properties","text":"Name Summary versionString val versionString: String","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/version-string/","text":"shark-hprof / shark / Hprof / HprofVersion / versionString versionString \u00b6 val versionString: String","title":"Version string"},{"location":"api/shark-hprof/shark/-hprof/-hprof-version/version-string/#versionstring","text":"val versionString: String","title":"versionString"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/","text":"shark-hprof / shark / HprofPrimitiveArrayStripper HprofPrimitiveArrayStripper \u00b6 class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. Constructors \u00b6 Name Summary <init> HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. Functions \u00b6 Name Summary stripPrimitiveArrays fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File ` = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-stripped.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-stripped\u201d })): [ File`]( https://docs.oracle.com/javase/6/docs/api/java/io/File.html )","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#hprofprimitivearraystripper","text":"class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019.","title":"HprofPrimitiveArrayStripper"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#constructors","text":"Name Summary <init> HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#functions","text":"Name Summary stripPrimitiveArrays fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File ` = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-stripped.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-stripped\u201d })): [ File`]( https://docs.oracle.com/javase/6/docs/api/java/io/File.html )","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/-init-/","text":"shark-hprof / shark / HprofPrimitiveArrayStripper / <init> <init> \u00b6 HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/-init-/#init","text":"HprofPrimitiveArrayStripper() Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays/","text":"shark-hprof / shark / HprofPrimitiveArrayStripper / stripPrimitiveArrays stripPrimitiveArrays \u00b6 fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \".hprof\", \"-stripped.hprof\" ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \"-stripped\" })): File See Also HprofPrimitiveArrayStripper","title":"Strip primitive arrays"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays/#stripprimitivearrays","text":"fun stripPrimitiveArrays(inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \".hprof\", \"-stripped.hprof\" ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \"-stripped\" })): File See Also HprofPrimitiveArrayStripper","title":"stripPrimitiveArrays"},{"location":"api/shark-hprof/shark/-hprof-reader/","text":"shark-hprof / shark / HprofReader HprofReader \u00b6 class HprofReader Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib Constructors \u00b6 Name Summary <init> HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource . Properties \u00b6 Name Summary identifierByteSize val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be. position var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets. startPosition val startPosition: Long How many bytes have already been read from source when this HprofReader is created. Functions \u00b6 Name Summary readClassDumpRecord fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag. readClassSkipContentRecord fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content. readHprofRecords fun readHprofRecords(recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records. readInstanceDumpRecord fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag. readInstanceSkipContentRecord fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content. readObjectArrayDumpRecord fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag. readObjectArraySkipContentRecord fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content. readPrimitiveArrayDumpRecord fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag. readPrimitiveArraySkipContentRecord fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content. readValue fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-reader/#hprofreader","text":"class HprofReader Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib","title":"HprofReader"},{"location":"api/shark-hprof/shark/-hprof-reader/#constructors","text":"Name Summary <init> HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource .","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-reader/#properties","text":"Name Summary identifierByteSize val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be. position var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets. startPosition val startPosition: Long How many bytes have already been read from source when this HprofReader is created.","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-reader/#functions","text":"Name Summary readClassDumpRecord fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag. readClassSkipContentRecord fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content. readHprofRecords fun readHprofRecords(recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records. readInstanceDumpRecord fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag. readInstanceSkipContentRecord fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content. readObjectArrayDumpRecord fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag. readObjectArraySkipContentRecord fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content. readPrimitiveArrayDumpRecord fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag. readPrimitiveArraySkipContentRecord fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content. readValue fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-reader/-init-/","text":"shark-hprof / shark / HprofReader / <init> <init> \u00b6 HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib","title":" init "},{"location":"api/shark-hprof/shark/-hprof-reader/-init-/#init","text":"HprofReader(source: BufferedSource, identifierByteSize: Int , startPosition: Long = 0L) Reads hprof content from an Okio BufferedSource . Not thread safe, should be used from a single thread. Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share/demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev/perflib/src/main/java/com/android/tools/perflib","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-reader/identifier-byte-size/","text":"shark-hprof / shark / HprofReader / identifierByteSize identifierByteSize \u00b6 val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be.","title":"Identifier byte size"},{"location":"api/shark-hprof/shark/-hprof-reader/identifier-byte-size/#identifierbytesize","text":"val identifierByteSize: Int Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be.","title":"identifierByteSize"},{"location":"api/shark-hprof/shark/-hprof-reader/position/","text":"shark-hprof / shark / HprofReader / position position \u00b6 var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets.","title":"Position"},{"location":"api/shark-hprof/shark/-hprof-reader/position/#position","text":"var position: Long Starts at startPosition and increases as HprofReader reads bytes. This is useful for tracking the position of content in the backing source . This never resets.","title":"position"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-dump-record/","text":"shark-hprof / shark / HprofReader / readClassDumpRecord readClassDumpRecord \u00b6 fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag.","title":"Read class dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-dump-record/#readclassdumprecord","text":"fun readClassDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag.","title":"readClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-skip-content-record/","text":"shark-hprof / shark / HprofReader / readClassSkipContentRecord readClassSkipContentRecord \u00b6 fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content.","title":"Read class skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-class-skip-content-record/#readclassskipcontentrecord","text":"fun readClassSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ClassSkipContentRecord Reads a class record after a class dump tag, skipping its content.","title":"readClassSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-hprof-records/","text":"shark-hprof / shark / HprofReader / readHprofRecords readHprofRecords \u00b6 fun readHprofRecords(recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records.","title":"Read hprof records"},{"location":"api/shark-hprof/shark/-hprof-reader/read-hprof-records/#readhprofrecords","text":"fun readHprofRecords(recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Unit Reads all hprof records from source . Assumes the reader was has a source that currently points to the start position of hprof records.","title":"readHprofRecords"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-dump-record/","text":"shark-hprof / shark / HprofReader / readInstanceDumpRecord readInstanceDumpRecord \u00b6 fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag.","title":"Read instance dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-dump-record/#readinstancedumprecord","text":"fun readInstanceDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag.","title":"readInstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-skip-content-record/","text":"shark-hprof / shark / HprofReader / readInstanceSkipContentRecord readInstanceSkipContentRecord \u00b6 fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content.","title":"Read instance skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-instance-skip-content-record/#readinstanceskipcontentrecord","text":"fun readInstanceSkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceSkipContentRecord Reads an instance record after a instance dump tag, skipping its content.","title":"readInstanceSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-dump-record/","text":"shark-hprof / shark / HprofReader / readObjectArrayDumpRecord readObjectArrayDumpRecord \u00b6 fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag.","title":"Read object array dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-dump-record/#readobjectarraydumprecord","text":"fun readObjectArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag.","title":"readObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-skip-content-record/","text":"shark-hprof / shark / HprofReader / readObjectArraySkipContentRecord readObjectArraySkipContentRecord \u00b6 fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content.","title":"Read object array skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-object-array-skip-content-record/#readobjectarrayskipcontentrecord","text":"fun readObjectArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArraySkipContentRecord Reads an object array record after a object array dump tag, skipping its content.","title":"readObjectArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-dump-record/","text":"shark-hprof / shark / HprofReader / readPrimitiveArrayDumpRecord readPrimitiveArrayDumpRecord \u00b6 fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag.","title":"Read primitive array dump record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-dump-record/#readprimitivearraydumprecord","text":"fun readPrimitiveArrayDumpRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag.","title":"readPrimitiveArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-skip-content-record/","text":"shark-hprof / shark / HprofReader / readPrimitiveArraySkipContentRecord readPrimitiveArraySkipContentRecord \u00b6 fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content.","title":"Read primitive array skip content record"},{"location":"api/shark-hprof/shark/-hprof-reader/read-primitive-array-skip-content-record/#readprimitivearrayskipcontentrecord","text":"fun readPrimitiveArraySkipContentRecord(): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArraySkipContentRecord Reads a primitive array record after a primitive array dump tag, skipping its content.","title":"readPrimitiveArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-reader/read-value/","text":"shark-hprof / shark / HprofReader / readValue readValue \u00b6 fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"Read value"},{"location":"api/shark-hprof/shark/-hprof-reader/read-value/#readvalue","text":"fun readValue(type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"readValue"},{"location":"api/shark-hprof/shark/-hprof-reader/start-position/","text":"shark-hprof / shark / HprofReader / startPosition startPosition \u00b6 val startPosition: Long How many bytes have already been read from source when this HprofReader is created.","title":"Start position"},{"location":"api/shark-hprof/shark/-hprof-reader/start-position/#startposition","text":"val startPosition: Long How many bytes have already been read from source when this HprofReader is created.","title":"startPosition"},{"location":"api/shark-hprof/shark/-hprof-record/","text":"shark-hprof / shark / HprofRecord HprofRecord \u00b6 sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. Types \u00b6 Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord Inheritors \u00b6 Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/#hprofrecord","text":"sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files.","title":"HprofRecord"},{"location":"api/shark-hprof/shark/-hprof-record/#types","text":"Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/#inheritors","text":"Name Summary HeapDumpEndRecord object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord sealed class HeapDumpRecord : HprofRecord LoadClassRecord class LoadClassRecord : HprofRecord StackFrameRecord class StackFrameRecord : HprofRecord StackTraceRecord class StackTraceRecord : HprofRecord StringRecord class StringRecord : HprofRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-end-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpEndRecord HeapDumpEndRecord \u00b6 object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump.","title":" heap dump end record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-end-record/#heapdumpendrecord","text":"object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump.","title":"HeapDumpEndRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord HeapDumpRecord \u00b6 sealed class HeapDumpRecord : HprofRecord Types \u00b6 Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord Inheritors \u00b6 Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#heapdumprecord","text":"sealed class HeapDumpRecord : HprofRecord","title":"HeapDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#types","text":"Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#inheritors","text":"Name Summary GcRootRecord class GcRootRecord : HprofRecord.HeapDumpRecord HeapDumpInfoRecord class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord ObjectRecord sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord GcRootRecord \u00b6 class GcRootRecord : HprofRecord.HeapDumpRecord Constructors \u00b6 Name Summary <init> GcRootRecord(gcRoot: GcRoot ) Properties \u00b6 Name Summary gcRoot val gcRoot: GcRoot","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#gcrootrecord","text":"class GcRootRecord : HprofRecord.HeapDumpRecord","title":"GcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#constructors","text":"Name Summary <init> GcRootRecord(gcRoot: GcRoot )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#properties","text":"Name Summary gcRoot val gcRoot: GcRoot","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord / <init> <init> \u00b6 GcRootRecord(gcRoot: GcRoot )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-init-/#init","text":"GcRootRecord(gcRoot: GcRoot )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord / gcRoot gcRoot \u00b6 val gcRoot: GcRoot","title":"Gc root"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root/#gcroot","text":"val gcRoot: GcRoot","title":"gcRoot"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord HeapDumpInfoRecord \u00b6 class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord Constructors \u00b6 Name Summary <init> HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long ) Properties \u00b6 Name Summary heapId val heapId: Int heapNameStringId val heapNameStringId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#heapdumpinforecord","text":"class HeapDumpInfoRecord : HprofRecord.HeapDumpRecord","title":"HeapDumpInfoRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#constructors","text":"Name Summary <init> HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#properties","text":"Name Summary heapId val heapId: Int heapNameStringId val heapNameStringId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / <init> <init> \u00b6 HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-init-/#init","text":"HeapDumpInfoRecord(heapId: Int , heapNameStringId: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / heapId heapId \u00b6 val heapId: Int","title":"Heap id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id/#heapid","text":"val heapId: Int","title":"heapId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / heapNameStringId heapNameStringId \u00b6 val heapNameStringId: Long","title":"Heap name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id/#heapnamestringid","text":"val heapNameStringId: Long","title":"heapNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord ObjectRecord \u00b6 sealed class ObjectRecord : HprofRecord.HeapDumpRecord Types \u00b6 Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content. Inheritors \u00b6 Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#objectrecord","text":"sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"ObjectRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#types","text":"Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content.","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#inheritors","text":"Name Summary ClassDumpRecord class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ClassSkipContentRecord class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content. InstanceDumpRecord class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord InstanceSkipContentRecord class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content. ObjectArrayDumpRecord class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArraySkipContentRecord class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content. PrimitiveArrayDumpRecord sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArraySkipContentRecord class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content.","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord ClassDumpRecord \u00b6 class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Types \u00b6 Name Summary FieldRecord data class FieldRecord StaticFieldRecord data class StaticFieldRecord Constructors \u00b6 Name Summary <init> ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >) Properties \u00b6 Name Summary classLoaderId val classLoaderId: Long fields val fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord > id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFields val staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord > superclassId val superclassId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#classdumprecord","text":"class ClassDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"ClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#types","text":"Name Summary FieldRecord data class FieldRecord StaticFieldRecord data class StaticFieldRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#constructors","text":"Name Summary <init> ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >)","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#properties","text":"Name Summary classLoaderId val classLoaderId: Long fields val fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord > id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFields val staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord > superclassId val superclassId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / <init> <init> \u00b6 ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >)","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-init-/#init","text":"ClassDumpRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >)","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / classLoaderId classLoaderId \u00b6 val classLoaderId: Long","title":"Class loader id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id/#classloaderid","text":"val classLoaderId: Long","title":"classLoaderId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / fields fields \u00b6 val fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >","title":"Fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields/#fields","text":"val fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >","title":"fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / instanceSize instanceSize \u00b6 val instanceSize: Int","title":"Instance size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size/#instancesize","text":"val instanceSize: Int","title":"instanceSize"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / protectionDomainId protectionDomainId \u00b6 val protectionDomainId: Long","title":"Protection domain id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id/#protectiondomainid","text":"val protectionDomainId: Long","title":"protectionDomainId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / signersId signersId \u00b6 val signersId: Long","title":"Signers id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id/#signersid","text":"val signersId: Long","title":"signersId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / staticFields staticFields \u00b6 val staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >","title":"Static fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields/#staticfields","text":"val staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >","title":"staticFields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / superclassId superclassId \u00b6 val superclassId: Long","title":"Superclass id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id/#superclassid","text":"val superclassId: Long","title":"superclassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord FieldRecord \u00b6 data class FieldRecord Constructors \u00b6 Name Summary <init> FieldRecord(nameStringId: Long , type: Int ) Properties \u00b6 Name Summary nameStringId val nameStringId: Long type val type: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#fieldrecord","text":"data class FieldRecord","title":"FieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#constructors","text":"Name Summary <init> FieldRecord(nameStringId: Long , type: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#properties","text":"Name Summary nameStringId val nameStringId: Long type val type: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / <init> <init> \u00b6 FieldRecord(nameStringId: Long , type: Int )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-init-/#init","text":"FieldRecord(nameStringId: Long , type: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / nameStringId nameStringId \u00b6 val nameStringId: Long","title":"Name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id/#namestringid","text":"val nameStringId: Long","title":"nameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / type type \u00b6 val type: Int","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type/#type","text":"val type: Int","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord StaticFieldRecord \u00b6 data class StaticFieldRecord Constructors \u00b6 Name Summary <init> StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder ) Properties \u00b6 Name Summary nameStringId val nameStringId: Long type val type: Int value val value: ValueHolder","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#staticfieldrecord","text":"data class StaticFieldRecord","title":"StaticFieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#constructors","text":"Name Summary <init> StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#properties","text":"Name Summary nameStringId val nameStringId: Long type val type: Int value val value: ValueHolder","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / <init> <init> \u00b6 StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-init-/#init","text":"StaticFieldRecord(nameStringId: Long , type: Int , value: ValueHolder )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / nameStringId nameStringId \u00b6 val nameStringId: Long","title":"Name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id/#namestringid","text":"val nameStringId: Long","title":"nameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / type type \u00b6 val type: Int","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type/#type","text":"val type: Int","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / value value \u00b6 val value: ValueHolder","title":"Value"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value/#value","text":"val value: ValueHolder","title":"value"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord ClassSkipContentRecord \u00b6 class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content. Constructors \u00b6 Name Summary <init> ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content. Properties \u00b6 Name Summary classLoaderId val classLoaderId: Long fieldCount val fieldCount: Int id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFieldCount val staticFieldCount: Int superclassId val superclassId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/#classskipcontentrecord","text":"class ClassSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content.","title":"ClassSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/#constructors","text":"Name Summary <init> ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/#properties","text":"Name Summary classLoaderId val classLoaderId: Long fieldCount val fieldCount: Int id val id: Long instanceSize val instanceSize: Int protectionDomainId val protectionDomainId: Long signersId val signersId: Long stackTraceSerialNumber val stackTraceSerialNumber: Int staticFieldCount val staticFieldCount: Int superclassId val superclassId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / <init> <init> \u00b6 ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/-init-/#init","text":"ClassSkipContentRecord(id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFieldCount: Int , fieldCount: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ClassDumpRecord for when you don\u2019t need the class content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/class-loader-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / classLoaderId classLoaderId \u00b6 val classLoaderId: Long","title":"Class loader id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/class-loader-id/#classloaderid","text":"val classLoaderId: Long","title":"classLoaderId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/field-count/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / fieldCount fieldCount \u00b6 val fieldCount: Int","title":"Field count"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/field-count/#fieldcount","text":"val fieldCount: Int","title":"fieldCount"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/instance-size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / instanceSize instanceSize \u00b6 val instanceSize: Int","title":"Instance size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/instance-size/#instancesize","text":"val instanceSize: Int","title":"instanceSize"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/protection-domain-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / protectionDomainId protectionDomainId \u00b6 val protectionDomainId: Long","title":"Protection domain id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/protection-domain-id/#protectiondomainid","text":"val protectionDomainId: Long","title":"protectionDomainId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/signers-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / signersId signersId \u00b6 val signersId: Long","title":"Signers id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/signers-id/#signersid","text":"val signersId: Long","title":"signersId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/static-field-count/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / staticFieldCount staticFieldCount \u00b6 val staticFieldCount: Int","title":"Static field count"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/static-field-count/#staticfieldcount","text":"val staticFieldCount: Int","title":"staticFieldCount"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/superclass-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassSkipContentRecord / superclassId superclassId \u00b6 val superclassId: Long","title":"Superclass id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-skip-content-record/superclass-id/#superclassid","text":"val superclassId: Long","title":"superclassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord InstanceDumpRecord \u00b6 class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Constructors \u00b6 Name Summary <init> InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray ) Properties \u00b6 Name Summary classId val classId: Long fieldValues val fieldValues: ByteArray Instance field values (this class, followed by super class, etc) id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#instancedumprecord","text":"class InstanceDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"InstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#constructors","text":"Name Summary <init> InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#properties","text":"Name Summary classId val classId: Long fieldValues val fieldValues: ByteArray Instance field values (this class, followed by super class, etc) id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / <init> <init> \u00b6 InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-init-/#init","text":"InstanceDumpRecord(id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / classId classId \u00b6 val classId: Long","title":"Class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id/#classid","text":"val classId: Long","title":"classId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / fieldValues fieldValues \u00b6 val fieldValues: ByteArray Instance field values (this class, followed by super class, etc)","title":"Field values"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values/#fieldvalues","text":"val fieldValues: ByteArray Instance field values (this class, followed by super class, etc)","title":"fieldValues"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord InstanceSkipContentRecord \u00b6 class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content. Constructors \u00b6 Name Summary <init> InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content. Properties \u00b6 Name Summary classId val classId: Long id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/#instanceskipcontentrecord","text":"class InstanceSkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content.","title":"InstanceSkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/#constructors","text":"Name Summary <init> InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/#properties","text":"Name Summary classId val classId: Long id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / <init> <init> \u00b6 InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/-init-/#init","text":"InstanceSkipContentRecord(id: Long , stackTraceSerialNumber: Int , classId: Long ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to InstanceDumpRecord for when you don\u2019t need the instance content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / classId classId \u00b6 val classId: Long","title":"Class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/class-id/#classid","text":"val classId: Long","title":"classId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceSkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord ObjectArrayDumpRecord \u00b6 class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Constructors \u00b6 Name Summary <init> ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray ) Properties \u00b6 Name Summary arrayClassId val arrayClassId: Long elementIds val elementIds: LongArray id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#objectarraydumprecord","text":"class ObjectArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"ObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#constructors","text":"Name Summary <init> ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#properties","text":"Name Summary arrayClassId val arrayClassId: Long elementIds val elementIds: LongArray id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / <init> <init> \u00b6 ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-init-/#init","text":"ObjectArrayDumpRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / arrayClassId arrayClassId \u00b6 val arrayClassId: Long","title":"Array class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id/#arrayclassid","text":"val arrayClassId: Long","title":"arrayClassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / elementIds elementIds \u00b6 val elementIds: LongArray","title":"Element ids"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids/#elementids","text":"val elementIds: LongArray","title":"elementIds"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord ObjectArraySkipContentRecord \u00b6 class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content. Constructors \u00b6 Name Summary <init> ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content. Properties \u00b6 Name Summary arrayClassId val arrayClassId: Long id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/#objectarrayskipcontentrecord","text":"class ObjectArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content.","title":"ObjectArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/#constructors","text":"Name Summary <init> ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/#properties","text":"Name Summary arrayClassId val arrayClassId: Long id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / <init> <init> \u00b6 ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/-init-/#init","text":"ObjectArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , size: Int ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to ObjectArrayDumpRecord for when you don\u2019t need the array content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/array-class-id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / arrayClassId arrayClassId \u00b6 val arrayClassId: Long","title":"Array class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/array-class-id/#arrayclassid","text":"val arrayClassId: Long","title":"arrayClassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / size size \u00b6 val size: Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/size/#size","text":"val size: Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArraySkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord PrimitiveArrayDumpRecord \u00b6 sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Types \u00b6 Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary id abstract val id: Long size abstract val size: Int stackTraceSerialNumber abstract val stackTraceSerialNumber: Int Inheritors \u00b6 Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#primitivearraydumprecord","text":"sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"PrimitiveArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#types","text":"Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#properties","text":"Name Summary id abstract val id: Long size abstract val size: Int stackTraceSerialNumber abstract val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#inheritors","text":"Name Summary BooleanArrayDump class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / id id \u00b6 abstract val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id/#id","text":"abstract val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / size size \u00b6 abstract val size: Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size/#size","text":"abstract val size: Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 abstract val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"abstract val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump BooleanArrayDump \u00b6 class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray ) Properties \u00b6 Name Summary array val array: BooleanArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#booleanarraydump","text":"class BooleanArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"BooleanArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#constructors","text":"Name Summary <init> BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#properties","text":"Name Summary array val array: BooleanArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / <init> <init> \u00b6 BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-init-/#init","text":"BooleanArrayDump(id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / array array \u00b6 val array: BooleanArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array/#array","text":"val array: BooleanArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump ByteArrayDump \u00b6 class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray ) Properties \u00b6 Name Summary array val array: ByteArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#bytearraydump","text":"class ByteArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"ByteArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#constructors","text":"Name Summary <init> ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#properties","text":"Name Summary array val array: ByteArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / <init> <init> \u00b6 ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-init-/#init","text":"ByteArrayDump(id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / array array \u00b6 val array: ByteArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array/#array","text":"val array: ByteArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump CharArrayDump \u00b6 class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray ) Properties \u00b6 Name Summary array val array: CharArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#chararraydump","text":"class CharArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"CharArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#constructors","text":"Name Summary <init> CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#properties","text":"Name Summary array val array: CharArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / <init> <init> \u00b6 CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-init-/#init","text":"CharArrayDump(id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / array array \u00b6 val array: CharArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array/#array","text":"val array: CharArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump DoubleArrayDump \u00b6 class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray ) Properties \u00b6 Name Summary array val array: DoubleArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#doublearraydump","text":"class DoubleArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"DoubleArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#constructors","text":"Name Summary <init> DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#properties","text":"Name Summary array val array: DoubleArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / <init> <init> \u00b6 DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-init-/#init","text":"DoubleArrayDump(id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / array array \u00b6 val array: DoubleArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array/#array","text":"val array: DoubleArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump FloatArrayDump \u00b6 class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray ) Properties \u00b6 Name Summary array val array: FloatArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#floatarraydump","text":"class FloatArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"FloatArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#constructors","text":"Name Summary <init> FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#properties","text":"Name Summary array val array: FloatArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / <init> <init> \u00b6 FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-init-/#init","text":"FloatArrayDump(id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / array array \u00b6 val array: FloatArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array/#array","text":"val array: FloatArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump IntArrayDump \u00b6 class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray ) Properties \u00b6 Name Summary array val array: IntArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#intarraydump","text":"class IntArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"IntArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#constructors","text":"Name Summary <init> IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#properties","text":"Name Summary array val array: IntArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / <init> <init> \u00b6 IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-init-/#init","text":"IntArrayDump(id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / array array \u00b6 val array: IntArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array/#array","text":"val array: IntArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump LongArrayDump \u00b6 class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray ) Properties \u00b6 Name Summary array val array: LongArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#longarraydump","text":"class LongArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"LongArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#constructors","text":"Name Summary <init> LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#properties","text":"Name Summary array val array: LongArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / <init> <init> \u00b6 LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-init-/#init","text":"LongArrayDump(id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / array array \u00b6 val array: LongArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array/#array","text":"val array: LongArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump ShortArrayDump \u00b6 class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Constructors \u00b6 Name Summary <init> ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray ) Properties \u00b6 Name Summary array val array: ShortArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#shortarraydump","text":"class ShortArrayDump : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"ShortArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#constructors","text":"Name Summary <init> ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#properties","text":"Name Summary array val array: ShortArray id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / <init> <init> \u00b6 ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-init-/#init","text":"ShortArrayDump(id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / array array \u00b6 val array: ShortArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array/#array","text":"val array: ShortArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / id id \u00b6 val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id/#id","text":"val id: Long Overrides PrimitiveArrayDumpRecord.id","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / size size \u00b6 val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size/#size","text":"val size: Int Overrides PrimitiveArrayDumpRecord.size","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int Overrides PrimitiveArrayDumpRecord.stackTraceSerialNumber","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord PrimitiveArraySkipContentRecord \u00b6 class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content. Constructors \u00b6 Name Summary <init> PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content. Properties \u00b6 Name Summary id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int type val type: PrimitiveType","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/#primitivearrayskipcontentrecord","text":"class PrimitiveArraySkipContentRecord : HprofRecord.HeapDumpRecord.ObjectRecord This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content.","title":"PrimitiveArraySkipContentRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/#constructors","text":"Name Summary <init> PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content.","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/#properties","text":"Name Summary id val id: Long size val size: Int stackTraceSerialNumber val stackTraceSerialNumber: Int type val type: PrimitiveType","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/-init-/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / <init> <init> \u00b6 PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content.","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/-init-/#init","text":"PrimitiveArraySkipContentRecord(id: Long , stackTraceSerialNumber: Int , size: Int , type: PrimitiveType ) This isn\u2019t a real record type as found in the heap dump. It\u2019s an alternative to PrimitiveArrayDumpRecord for when you don\u2019t need the array content.","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/id/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/size/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / size size \u00b6 val size: Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/size/#size","text":"val size: Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/type/","text":"shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArraySkipContentRecord / type type \u00b6 val type: PrimitiveType","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-skip-content-record/type/#type","text":"val type: PrimitiveType","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord LoadClassRecord \u00b6 class LoadClassRecord : HprofRecord Constructors \u00b6 Name Summary <init> LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long ) Properties \u00b6 Name Summary classNameStringId val classNameStringId: Long classSerialNumber val classSerialNumber: Int id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#loadclassrecord","text":"class LoadClassRecord : HprofRecord","title":"LoadClassRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#constructors","text":"Name Summary <init> LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#properties","text":"Name Summary classNameStringId val classNameStringId: Long classSerialNumber val classSerialNumber: Int id val id: Long stackTraceSerialNumber val stackTraceSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/-init-/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / <init> <init> \u00b6 LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/-init-/#init","text":"LoadClassRecord(classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / classNameStringId classNameStringId \u00b6 val classNameStringId: Long","title":"Class name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id/#classnamestringid","text":"val classNameStringId: Long","title":"classNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / classSerialNumber classSerialNumber \u00b6 val classSerialNumber: Int","title":"Class serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number/#classserialnumber","text":"val classSerialNumber: Int","title":"classSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/id/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / LoadClassRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord StackFrameRecord \u00b6 class StackFrameRecord : HprofRecord Constructors \u00b6 Name Summary <init> StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int ) Properties \u00b6 Name Summary classSerialNumber val classSerialNumber: Int id val id: Long lineNumber val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented) methodNameStringId val methodNameStringId: Long methodSignatureStringId val methodSignatureStringId: Long sourceFileNameStringId val sourceFileNameStringId: Long","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#stackframerecord","text":"class StackFrameRecord : HprofRecord","title":"StackFrameRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#constructors","text":"Name Summary <init> StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#properties","text":"Name Summary classSerialNumber val classSerialNumber: Int id val id: Long lineNumber val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented) methodNameStringId val methodNameStringId: Long methodSignatureStringId val methodSignatureStringId: Long sourceFileNameStringId val sourceFileNameStringId: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/-init-/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / <init> <init> \u00b6 StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/-init-/#init","text":"StackFrameRecord(id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / classSerialNumber classSerialNumber \u00b6 val classSerialNumber: Int","title":"Class serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number/#classserialnumber","text":"val classSerialNumber: Int","title":"classSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / lineNumber lineNumber \u00b6 val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented)","title":"Line number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number/#linenumber","text":"val lineNumber: Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented)","title":"lineNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / methodNameStringId methodNameStringId \u00b6 val methodNameStringId: Long","title":"Method name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id/#methodnamestringid","text":"val methodNameStringId: Long","title":"methodNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / methodSignatureStringId methodSignatureStringId \u00b6 val methodSignatureStringId: Long","title":"Method signature string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id/#methodsignaturestringid","text":"val methodSignatureStringId: Long","title":"methodSignatureStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id/","text":"shark-hprof / shark / HprofRecord / StackFrameRecord / sourceFileNameStringId sourceFileNameStringId \u00b6 val sourceFileNameStringId: Long","title":"Source file name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id/#sourcefilenamestringid","text":"val sourceFileNameStringId: Long","title":"sourceFileNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord StackTraceRecord \u00b6 class StackTraceRecord : HprofRecord Constructors \u00b6 Name Summary <init> StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray ) Properties \u00b6 Name Summary stackFrameIds val stackFrameIds: LongArray stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#stacktracerecord","text":"class StackTraceRecord : HprofRecord","title":"StackTraceRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#constructors","text":"Name Summary <init> StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#properties","text":"Name Summary stackFrameIds val stackFrameIds: LongArray stackTraceSerialNumber val stackTraceSerialNumber: Int threadSerialNumber val threadSerialNumber: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/-init-/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / <init> <init> \u00b6 StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/-init-/#init","text":"StackTraceRecord(stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / stackFrameIds stackFrameIds \u00b6 val stackFrameIds: LongArray","title":"Stack frame ids"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids/#stackframeids","text":"val stackFrameIds: LongArray","title":"stackFrameIds"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 val stackTraceSerialNumber: Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number/#stacktraceserialnumber","text":"val stackTraceSerialNumber: Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number/","text":"shark-hprof / shark / HprofRecord / StackTraceRecord / threadSerialNumber threadSerialNumber \u00b6 val threadSerialNumber: Int","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number/#threadserialnumber","text":"val threadSerialNumber: Int","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/","text":"shark-hprof / shark / HprofRecord / StringRecord StringRecord \u00b6 class StringRecord : HprofRecord Constructors \u00b6 Name Summary <init> StringRecord(id: Long , string: String ) Properties \u00b6 Name Summary id val id: Long string val string: String","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#stringrecord","text":"class StringRecord : HprofRecord","title":"StringRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#constructors","text":"Name Summary <init> StringRecord(id: Long , string: String )","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#properties","text":"Name Summary id val id: Long string val string: String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/-init-/","text":"shark-hprof / shark / HprofRecord / StringRecord / <init> <init> \u00b6 StringRecord(id: Long , string: String )","title":" init "},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/-init-/#init","text":"StringRecord(id: Long , string: String )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/id/","text":"shark-hprof / shark / HprofRecord / StringRecord / id id \u00b6 val id: Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/id/#id","text":"val id: Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/string/","text":"shark-hprof / shark / HprofRecord / StringRecord / string string \u00b6 val string: String","title":"String"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/string/#string","text":"val string: String","title":"string"},{"location":"api/shark-hprof/shark/-hprof-writer/","text":"shark-hprof / shark / HprofWriter HprofWriter \u00b6 class HprofWriter : Closeable Generates Hprof files. Call open to create an instance, write to add instances and close when you\u2019re done. Properties \u00b6 Name Summary hprofVersion val hprofVersion: Hprof.HprofVersion identifierByteSize val identifierByteSize: Int Functions \u00b6 Name Summary close fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file. valuesToBytes fun valuesToBytes(values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder . write fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called. Companion Object Functions \u00b6 Name Summary open fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don\u2019t forget to call close once done.","title":"Home"},{"location":"api/shark-hprof/shark/-hprof-writer/#hprofwriter","text":"class HprofWriter : Closeable Generates Hprof files. Call open to create an instance, write to add instances and close when you\u2019re done.","title":"HprofWriter"},{"location":"api/shark-hprof/shark/-hprof-writer/#properties","text":"Name Summary hprofVersion val hprofVersion: Hprof.HprofVersion identifierByteSize val identifierByteSize: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-writer/#functions","text":"Name Summary close fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file. valuesToBytes fun valuesToBytes(values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder . write fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-writer/#companion-object-functions","text":"Name Summary open fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don\u2019t forget to call close once done.","title":"Companion Object Functions"},{"location":"api/shark-hprof/shark/-hprof-writer/close/","text":"shark-hprof / shark / HprofWriter / close close \u00b6 fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file.","title":"Close"},{"location":"api/shark-hprof/shark/-hprof-writer/close/#close","text":"fun close(): Unit Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file.","title":"close"},{"location":"api/shark-hprof/shark/-hprof-writer/hprof-version/","text":"shark-hprof / shark / HprofWriter / hprofVersion hprofVersion \u00b6 val hprofVersion: Hprof.HprofVersion","title":"Hprof version"},{"location":"api/shark-hprof/shark/-hprof-writer/hprof-version/#hprofversion","text":"val hprofVersion: Hprof.HprofVersion","title":"hprofVersion"},{"location":"api/shark-hprof/shark/-hprof-writer/identifier-byte-size/","text":"shark-hprof / shark / HprofWriter / identifierByteSize identifierByteSize \u00b6 val identifierByteSize: Int","title":"Identifier byte size"},{"location":"api/shark-hprof/shark/-hprof-writer/identifier-byte-size/#identifierbytesize","text":"val identifierByteSize: Int","title":"identifierByteSize"},{"location":"api/shark-hprof/shark/-hprof-writer/open/","text":"shark-hprof / shark / HprofWriter / open open \u00b6 fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don\u2019t forget to call close once done.","title":"Open"},{"location":"api/shark-hprof/shark/-hprof-writer/open/#open","text":"fun open(hprofFile: File , identifierByteSize: Int = 4, hprofVersion: Hprof.HprofVersion = HprofVersion.ANDROID): HprofWriter Opens a new file for writing hprof records. Don\u2019t forget to call close once done.","title":"open"},{"location":"api/shark-hprof/shark/-hprof-writer/values-to-bytes/","text":"shark-hprof / shark / HprofWriter / valuesToBytes valuesToBytes \u00b6 fun valuesToBytes(values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder .","title":"Values to bytes"},{"location":"api/shark-hprof/shark/-hprof-writer/values-to-bytes/#valuestobytes","text":"fun valuesToBytes(values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder .","title":"valuesToBytes"},{"location":"api/shark-hprof/shark/-hprof-writer/write/","text":"shark-hprof / shark / HprofWriter / write write \u00b6 fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"Write"},{"location":"api/shark-hprof/shark/-hprof-writer/write/#write","text":"fun write(record: HprofRecord ): Unit Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"write"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/","text":"shark-hprof / shark / OnHprofRecordListener OnHprofRecordListener \u00b6 interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords . Functions \u00b6 Name Summary onHprofRecord abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit Companion Object Functions \u00b6 Name Summary invoke operator fun invoke(block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax.","title":"Home"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#onhprofrecordlistener","text":"interface OnHprofRecordListener Listener passed in to HprofReader.readHprofRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to HprofReader.readHprofRecords .","title":"OnHprofRecordListener"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#functions","text":"Name Summary onHprofRecord abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit","title":"Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#companion-object-functions","text":"Name Summary invoke operator fun invoke(block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax.","title":"Companion Object Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/invoke/","text":"shark-hprof / shark / OnHprofRecordListener / invoke invoke \u00b6 inline operator fun invoke(crossinline block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax. Usage: val listener = OnHprofRecordListener { position , record -> }","title":"Invoke"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/invoke/#invoke","text":"inline operator fun invoke(crossinline block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax. Usage: val listener = OnHprofRecordListener { position , record -> }","title":"invoke"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record/","text":"shark-hprof / shark / OnHprofRecordListener / onHprofRecord onHprofRecord \u00b6 abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit","title":"On hprof record"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record/#onhprofrecord","text":"abstract fun onHprofRecord(position: Long , record: HprofRecord ): Unit","title":"onHprofRecord"},{"location":"api/shark-hprof/shark/-primitive-type/","text":"shark-hprof / shark / PrimitiveType PrimitiveType \u00b6 enum class PrimitiveType A primitive type in the prof. Enum Values \u00b6 Name Summary BOOLEAN CHAR FLOAT DOUBLE BYTE SHORT INT LONG Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d. Companion Object Properties \u00b6 Name Summary byteSizeByHprofType val byteSizeByHprofType: Map < Int , Int > primitiveTypeByHprofType val primitiveTypeByHprofType: Map < Int , PrimitiveType > REFERENCE_HPROF_TYPE const val REFERENCE_HPROF_TYPE: Int The hprof defined \u201cbasic type\u201d for references.","title":"Home"},{"location":"api/shark-hprof/shark/-primitive-type/#primitivetype","text":"enum class PrimitiveType A primitive type in the prof.","title":"PrimitiveType"},{"location":"api/shark-hprof/shark/-primitive-type/#enum-values","text":"Name Summary BOOLEAN CHAR FLOAT DOUBLE BYTE SHORT INT LONG","title":"Enum Values"},{"location":"api/shark-hprof/shark/-primitive-type/#properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/#companion-object-properties","text":"Name Summary byteSizeByHprofType val byteSizeByHprofType: Map < Int , Int > primitiveTypeByHprofType val primitiveTypeByHprofType: Map < Int , PrimitiveType > REFERENCE_HPROF_TYPE const val REFERENCE_HPROF_TYPE: Int The hprof defined \u201cbasic type\u201d for references.","title":"Companion Object Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/","text":"shark-hprof / shark / PrimitiveType / BOOLEAN BOOLEAN \u00b6 BOOLEAN Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" b o o l e a n"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/#boolean","text":"BOOLEAN","title":"BOOLEAN"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/","text":"shark-hprof / shark / PrimitiveType / BYTE BYTE \u00b6 BYTE Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" b y t e"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/#byte","text":"BYTE","title":"BYTE"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/","text":"shark-hprof / shark / PrimitiveType / CHAR CHAR \u00b6 CHAR Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" c h a r"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/#char","text":"CHAR","title":"CHAR"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/","text":"shark-hprof / shark / PrimitiveType / DOUBLE DOUBLE \u00b6 DOUBLE Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" d o u b l e"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/#double","text":"DOUBLE","title":"DOUBLE"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/","text":"shark-hprof / shark / PrimitiveType / FLOAT FLOAT \u00b6 FLOAT Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" f l o a t"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/#float","text":"FLOAT","title":"FLOAT"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/","text":"shark-hprof / shark / PrimitiveType / INT INT \u00b6 INT Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" i n t"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/#int","text":"INT","title":"INT"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/","text":"shark-hprof / shark / PrimitiveType / LONG LONG \u00b6 LONG Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" l o n g"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/#long","text":"LONG","title":"LONG"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e/","text":"shark-hprof / shark / PrimitiveType / REFERENCE_HPROF_TYPE REFERENCE_HPROF_TYPE \u00b6 const val REFERENCE_HPROF_TYPE: Int The hprof defined \u201cbasic type\u201d for references.","title":" r e f e r e n c e  h p r o f  t y p e"},{"location":"api/shark-hprof/shark/-primitive-type/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e/#reference_hprof_type","text":"const val REFERENCE_HPROF_TYPE: Int The hprof defined \u201cbasic type\u201d for references.","title":"REFERENCE_HPROF_TYPE"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/","text":"shark-hprof / shark / PrimitiveType / SHORT SHORT \u00b6 SHORT Inherited Properties \u00b6 Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":" s h o r t"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/#short","text":"SHORT","title":"SHORT"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/#inherited-properties","text":"Name Summary byteSize val byteSize: Int The size in bytes for each value of that type. hprofType val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Inherited Properties"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size-by-hprof-type/","text":"shark-hprof / shark / PrimitiveType / byteSizeByHprofType byteSizeByHprofType \u00b6 val byteSizeByHprofType: Map < Int , Int >","title":"Byte size by hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size-by-hprof-type/#bytesizebyhproftype","text":"val byteSizeByHprofType: Map < Int , Int >","title":"byteSizeByHprofType"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size/","text":"shark-hprof / shark / PrimitiveType / byteSize byteSize \u00b6 val byteSize: Int The size in bytes for each value of that type.","title":"Byte size"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size/#bytesize","text":"val byteSize: Int The size in bytes for each value of that type.","title":"byteSize"},{"location":"api/shark-hprof/shark/-primitive-type/hprof-type/","text":"shark-hprof / shark / PrimitiveType / hprofType hprofType \u00b6 val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"Hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/hprof-type/#hproftype","text":"val hprofType: Int The hprof defined \u201cbasic type\u201d.","title":"hprofType"},{"location":"api/shark-hprof/shark/-primitive-type/primitive-type-by-hprof-type/","text":"shark-hprof / shark / PrimitiveType / primitiveTypeByHprofType primitiveTypeByHprofType \u00b6 val primitiveTypeByHprofType: Map < Int , PrimitiveType >","title":"Primitive type by hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/primitive-type-by-hprof-type/#primitivetypebyhproftype","text":"val primitiveTypeByHprofType: Map < Int , PrimitiveType >","title":"primitiveTypeByHprofType"},{"location":"api/shark-hprof/shark/-value-holder/","text":"shark-hprof / shark / ValueHolder ValueHolder \u00b6 sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type. Types \u00b6 Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder Companion Object Properties \u00b6 Name Summary NULL_REFERENCE const val NULL_REFERENCE: Long Inheritors \u00b6 Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/#valueholder","text":"sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"ValueHolder"},{"location":"api/shark-hprof/shark/-value-holder/#types","text":"Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder","title":"Types"},{"location":"api/shark-hprof/shark/-value-holder/#companion-object-properties","text":"Name Summary NULL_REFERENCE const val NULL_REFERENCE: Long","title":"Companion Object Properties"},{"location":"api/shark-hprof/shark/-value-holder/#inheritors","text":"Name Summary BooleanHolder data class BooleanHolder : ValueHolder ByteHolder data class ByteHolder : ValueHolder CharHolder data class CharHolder : ValueHolder DoubleHolder data class DoubleHolder : ValueHolder FloatHolder data class FloatHolder : ValueHolder IntHolder data class IntHolder : ValueHolder LongHolder data class LongHolder : ValueHolder ReferenceHolder data class ReferenceHolder : ValueHolder ShortHolder data class ShortHolder : ValueHolder","title":"Inheritors"},{"location":"api/shark-hprof/shark/-value-holder/-n-u-l-l_-r-e-f-e-r-e-n-c-e/","text":"shark-hprof / shark / ValueHolder / NULL_REFERENCE NULL_REFERENCE \u00b6 const val NULL_REFERENCE: Long","title":" n u l l  r e f e r e n c e"},{"location":"api/shark-hprof/shark/-value-holder/-n-u-l-l_-r-e-f-e-r-e-n-c-e/#null_reference","text":"const val NULL_REFERENCE: Long","title":"NULL_REFERENCE"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/","text":"shark-hprof / shark / ValueHolder / BooleanHolder BooleanHolder \u00b6 data class BooleanHolder : ValueHolder Constructors \u00b6 Name Summary <init> BooleanHolder(value: Boolean ) Properties \u00b6 Name Summary value val value: Boolean","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#booleanholder","text":"data class BooleanHolder : ValueHolder","title":"BooleanHolder"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#constructors","text":"Name Summary <init> BooleanHolder(value: Boolean )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#properties","text":"Name Summary value val value: Boolean","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/-init-/","text":"shark-hprof / shark / ValueHolder / BooleanHolder / <init> <init> \u00b6 BooleanHolder(value: Boolean )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/-init-/#init","text":"BooleanHolder(value: Boolean )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/value/","text":"shark-hprof / shark / ValueHolder / BooleanHolder / value value \u00b6 val value: Boolean","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/value/#value","text":"val value: Boolean","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/","text":"shark-hprof / shark / ValueHolder / ByteHolder ByteHolder \u00b6 data class ByteHolder : ValueHolder Constructors \u00b6 Name Summary <init> ByteHolder(value: Byte ) Properties \u00b6 Name Summary value val value: Byte","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#byteholder","text":"data class ByteHolder : ValueHolder","title":"ByteHolder"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#constructors","text":"Name Summary <init> ByteHolder(value: Byte )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#properties","text":"Name Summary value val value: Byte","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/-init-/","text":"shark-hprof / shark / ValueHolder / ByteHolder / <init> <init> \u00b6 ByteHolder(value: Byte )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/-init-/#init","text":"ByteHolder(value: Byte )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/value/","text":"shark-hprof / shark / ValueHolder / ByteHolder / value value \u00b6 val value: Byte","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/value/#value","text":"val value: Byte","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/","text":"shark-hprof / shark / ValueHolder / CharHolder CharHolder \u00b6 data class CharHolder : ValueHolder Constructors \u00b6 Name Summary <init> CharHolder(value: Char ) Properties \u00b6 Name Summary value val value: Char","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#charholder","text":"data class CharHolder : ValueHolder","title":"CharHolder"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#constructors","text":"Name Summary <init> CharHolder(value: Char )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#properties","text":"Name Summary value val value: Char","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/-init-/","text":"shark-hprof / shark / ValueHolder / CharHolder / <init> <init> \u00b6 CharHolder(value: Char )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/-init-/#init","text":"CharHolder(value: Char )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/value/","text":"shark-hprof / shark / ValueHolder / CharHolder / value value \u00b6 val value: Char","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/value/#value","text":"val value: Char","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/","text":"shark-hprof / shark / ValueHolder / DoubleHolder DoubleHolder \u00b6 data class DoubleHolder : ValueHolder Constructors \u00b6 Name Summary <init> DoubleHolder(value: Double ) Properties \u00b6 Name Summary value val value: Double","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#doubleholder","text":"data class DoubleHolder : ValueHolder","title":"DoubleHolder"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#constructors","text":"Name Summary <init> DoubleHolder(value: Double )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#properties","text":"Name Summary value val value: Double","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/-init-/","text":"shark-hprof / shark / ValueHolder / DoubleHolder / <init> <init> \u00b6 DoubleHolder(value: Double )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/-init-/#init","text":"DoubleHolder(value: Double )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/value/","text":"shark-hprof / shark / ValueHolder / DoubleHolder / value value \u00b6 val value: Double","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/value/#value","text":"val value: Double","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/","text":"shark-hprof / shark / ValueHolder / FloatHolder FloatHolder \u00b6 data class FloatHolder : ValueHolder Constructors \u00b6 Name Summary <init> FloatHolder(value: Float ) Properties \u00b6 Name Summary value val value: Float","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#floatholder","text":"data class FloatHolder : ValueHolder","title":"FloatHolder"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#constructors","text":"Name Summary <init> FloatHolder(value: Float )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#properties","text":"Name Summary value val value: Float","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/-init-/","text":"shark-hprof / shark / ValueHolder / FloatHolder / <init> <init> \u00b6 FloatHolder(value: Float )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/-init-/#init","text":"FloatHolder(value: Float )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/value/","text":"shark-hprof / shark / ValueHolder / FloatHolder / value value \u00b6 val value: Float","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/value/#value","text":"val value: Float","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/","text":"shark-hprof / shark / ValueHolder / IntHolder IntHolder \u00b6 data class IntHolder : ValueHolder Constructors \u00b6 Name Summary <init> IntHolder(value: Int ) Properties \u00b6 Name Summary value val value: Int","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#intholder","text":"data class IntHolder : ValueHolder","title":"IntHolder"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#constructors","text":"Name Summary <init> IntHolder(value: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#properties","text":"Name Summary value val value: Int","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/-init-/","text":"shark-hprof / shark / ValueHolder / IntHolder / <init> <init> \u00b6 IntHolder(value: Int )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/-init-/#init","text":"IntHolder(value: Int )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/value/","text":"shark-hprof / shark / ValueHolder / IntHolder / value value \u00b6 val value: Int","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/value/#value","text":"val value: Int","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/","text":"shark-hprof / shark / ValueHolder / LongHolder LongHolder \u00b6 data class LongHolder : ValueHolder Constructors \u00b6 Name Summary <init> LongHolder(value: Long ) Properties \u00b6 Name Summary value val value: Long","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#longholder","text":"data class LongHolder : ValueHolder","title":"LongHolder"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#constructors","text":"Name Summary <init> LongHolder(value: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#properties","text":"Name Summary value val value: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/-init-/","text":"shark-hprof / shark / ValueHolder / LongHolder / <init> <init> \u00b6 LongHolder(value: Long )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/-init-/#init","text":"LongHolder(value: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/value/","text":"shark-hprof / shark / ValueHolder / LongHolder / value value \u00b6 val value: Long","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/value/#value","text":"val value: Long","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder ReferenceHolder \u00b6 data class ReferenceHolder : ValueHolder Constructors \u00b6 Name Summary <init> ReferenceHolder(value: Long ) Properties \u00b6 Name Summary isNull val isNull: Boolean value val value: Long","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#referenceholder","text":"data class ReferenceHolder : ValueHolder","title":"ReferenceHolder"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#constructors","text":"Name Summary <init> ReferenceHolder(value: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#properties","text":"Name Summary isNull val isNull: Boolean value val value: Long","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/-init-/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder / <init> <init> \u00b6 ReferenceHolder(value: Long )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/-init-/#init","text":"ReferenceHolder(value: Long )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/is-null/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder / isNull isNull \u00b6 val isNull: Boolean","title":"Is null"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/is-null/#isnull","text":"val isNull: Boolean","title":"isNull"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/value/","text":"shark-hprof / shark / ValueHolder / ReferenceHolder / value value \u00b6 val value: Long","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/value/#value","text":"val value: Long","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/","text":"shark-hprof / shark / ValueHolder / ShortHolder ShortHolder \u00b6 data class ShortHolder : ValueHolder Constructors \u00b6 Name Summary <init> ShortHolder(value: Short ) Properties \u00b6 Name Summary value val value: Short","title":"Home"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#shortholder","text":"data class ShortHolder : ValueHolder","title":"ShortHolder"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#constructors","text":"Name Summary <init> ShortHolder(value: Short )","title":"Constructors"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#properties","text":"Name Summary value val value: Short","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/-init-/","text":"shark-hprof / shark / ValueHolder / ShortHolder / <init> <init> \u00b6 ShortHolder(value: Short )","title":" init "},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/-init-/#init","text":"ShortHolder(value: Short )","title":"&lt;init&gt;"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/value/","text":"shark-hprof / shark / ValueHolder / ShortHolder / value value \u00b6 val value: Short","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/value/#value","text":"val value: Short","title":"value"},{"location":"api/shark-log/","text":"shark-log Packages \u00b6 Name Summary shark Index \u00b6 All Types","title":"Home"},{"location":"api/shark-log/#packages","text":"Name Summary shark","title":"Packages"},{"location":"api/shark-log/#index","text":"All Types","title":"Index"},{"location":"api/shark-log/alltypes/","text":"All Types \u00b6 Name Summary shark.SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Home"},{"location":"api/shark-log/alltypes/#all-types","text":"Name Summary shark.SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"All Types"},{"location":"api/shark-log/shark/","text":"shark-log / shark Package shark \u00b6 Types \u00b6 Name Summary SharkLog object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Core: Logs"},{"location":"api/shark-log/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-log/shark/#types","text":"Name Summary SharkLog object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Types"},{"location":"api/shark-log/shark/-shark-log/","text":"shark-log / shark / SharkLog SharkLog \u00b6 object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go. Types \u00b6 Name Summary Logger interface Logger Properties \u00b6 Name Summary logger var logger: SharkLog.Logger ? Functions \u00b6 Name Summary d fun d(message: () -> String ): Unit fun d(throwable: Throwable , message: () -> String ): Unit","title":"Home"},{"location":"api/shark-log/shark/-shark-log/#sharklog","text":"object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"SharkLog"},{"location":"api/shark-log/shark/-shark-log/#types","text":"Name Summary Logger interface Logger","title":"Types"},{"location":"api/shark-log/shark/-shark-log/#properties","text":"Name Summary logger var logger: SharkLog.Logger ?","title":"Properties"},{"location":"api/shark-log/shark/-shark-log/#functions","text":"Name Summary d fun d(message: () -> String ): Unit fun d(throwable: Throwable , message: () -> String ): Unit","title":"Functions"},{"location":"api/shark-log/shark/-shark-log/d/","text":"shark-log / shark / SharkLog / d d \u00b6 inline fun d(message: () -> String ): Unit inline fun d(throwable: Throwable , message: () -> String ): Unit See Also Logger.d","title":"D"},{"location":"api/shark-log/shark/-shark-log/d/#d","text":"inline fun d(message: () -> String ): Unit inline fun d(throwable: Throwable , message: () -> String ): Unit See Also Logger.d","title":"d"},{"location":"api/shark-log/shark/-shark-log/logger/","text":"shark-log / shark / SharkLog / logger logger \u00b6 var logger: SharkLog.Logger ?","title":"Logger"},{"location":"api/shark-log/shark/-shark-log/logger/#logger","text":"var logger: SharkLog.Logger ?","title":"logger"},{"location":"api/shark-log/shark/-shark-log/-logger/","text":"shark-log / shark / SharkLog / Logger Logger \u00b6 interface Logger See Also SharkLog Functions \u00b6 Name Summary d abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"Home"},{"location":"api/shark-log/shark/-shark-log/-logger/#logger","text":"interface Logger See Also SharkLog","title":"Logger"},{"location":"api/shark-log/shark/-shark-log/-logger/#functions","text":"Name Summary d abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"Functions"},{"location":"api/shark-log/shark/-shark-log/-logger/d/","text":"shark-log / shark / SharkLog / Logger / d d \u00b6 abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"D"},{"location":"api/shark-log/shark/-shark-log/-logger/d/#d","text":"abstract fun d(message: String ): Unit Logs a debug message formatted with the passed in arguments. abstract fun d(throwable: Throwable , message: String ): Unit Logs a Throwable and debug message formatted with the passed in arguments.","title":"d"}]}